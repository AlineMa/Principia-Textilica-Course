(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    667416,      12185]
NotebookOptionsPosition[    663456,      12047]
NotebookOutlinePosition[    663798,      12062]
CellTagsIndexPosition[    663755,      12059]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["first exercise for mathematica practice", "Title",
 CellChangeTimes->{{3.623580692650206*^9, 3.623580761038327*^9}}],

Cell["\<\
Alina Articulando
Lisa Germain
Iremnur Tokac\
\>", "Subtitle",
 CellChangeTimes->{{3.6235807651272564`*^9, 3.6235807986034136`*^9}}],

Cell["\<\
These exercises are our first attempts to get in Mathematica. It contains \
plots and mathematical functions \
\>", "Text",
 CellChangeTimes->{{3.6235808626707654`*^9, 3.6235809957280326`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.62358104180192*^9, 3.6235810521619134`*^9}, {
  3.62358115603603*^9, 3.623581157906142*^9}}],

Cell[CellGroupData[{

Cell["Basic calculation", "Section",
 CellChangeTimes->{{3.623581165556148*^9, 3.623581189955799*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"58264", "/", "3.2"}]], "Input",
 CellChangeTimes->{{3.623581200423936*^9, 3.623581226539675*^9}, {
  3.6235812771008296`*^9, 3.6235812790040784`*^9}}],

Cell[BoxData["18207.5`"], "Output",
 CellChangeTimes->{3.6235812836997986`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberForm", "[", 
  RowBox[{"18207.5`", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"NumberForm", "::", "sigz"}], "MessageName"], ":", 
  " ", "\<\"In addition to the number of digits requested, one or more zeros \
will appear as placeholders. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/NumberForm/sigz\\\", ButtonNote -> \
\\\"NumberForm::sigz\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.623581303824315*^9}],

Cell[BoxData[
 TagBox[
  InterpretationBox["\<\"18200.000\"\>",
   18207.5,
   AutoDelete->True],
  NumberForm[#, {3, 3}]& ]], "Output",
 CellChangeTimes->{3.623581303824315*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EngineeringForm", "[", "18207.5`", "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 TagBox[
  InterpretationBox[
   RowBox[{"\<\"18.2075\"\>", "\[Times]", 
    SuperscriptBox["10", "\<\"3\"\>"]}],
   18207.5,
   AutoDelete->True],
  EngineeringForm]], "Output",
 CellChangeTimes->{3.6235813362263455`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"5", "*", 
  RowBox[{"(", "1.3", ")"}], "\.b3"}]], "Input",
 CellChangeTimes->{{3.623581414711958*^9, 3.62358143934499*^9}}],

Cell[BoxData[
 RowBox[{"6.5`", " ", "\.b3"}]], "Output",
 CellChangeTimes->{3.6235814447739286`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"6.5`", " ", "\.b3"}], 
   RowBox[{"\[DifferentialD]", "\.b3"}]}]}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"3.25`", " ", 
  SuperscriptBox["\.b3", "2"]}]], "Output",
 CellChangeTimes->{3.623581452730133*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"3.25`", " ", 
    SuperscriptBox["\.b3", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"\.b3", ",", 
     RowBox[{"-", "1.2`"}], ",", "1.2`"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-1.2, 1.2}, {0., 4.67999961795919}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6235815067699184`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["creating function", "Section",
 CellChangeTimes->{{3.623581679214215*^9, 3.6235817532755938`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"6", "x"}], " ", "+", " ", "8"}]}]], "Input",
 CellChangeTimes->{{3.623581758345659*^9, 3.623581783009575*^9}, {
  3.6235818992392063`*^9, 3.623581974119686*^9}, {3.623582011263524*^9, 
  3.623582014040342*^9}, {3.623582107019043*^9, 3.6235821321352043`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.623582138843233*^9, 3.623582145114433*^9}}],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{3.6235821468928328`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"k", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"x", " ", "*", " ", "x"}], " ", "+", " ", 
   RowBox[{"2", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.623582157890833*^9, 3.6235821929284325`*^9}, {
  3.623582245141633*^9, 3.623582286763438*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"k", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.6235822952189636`*^9, 3.6235823007259755`*^9}}],

Cell[BoxData["8"], "Output",
 CellChangeTimes->{3.6235823033000746`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"3", 
    SuperscriptBox["x", "3"]}], " ", "+", " ", 
   RowBox[{"7", 
    SuperscriptBox["x", "2"]}], " ", "+", " ", 
   RowBox[{"6", "x"}], " ", "+", " ", "27"}]}]], "Input",
 CellChangeTimes->{{3.623582455376044*^9, 3.6235825613041005`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.6235825740806646`*^9, 3.623582600023797*^9}}],

Cell[BoxData["43"], "Output",
 CellChangeTimes->{3.6235826024262276`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"3", 
    SuperscriptBox["x", "3"]}], " ", "+", " ", 
   RowBox[{"7", 
    SuperscriptBox["x", "2"]}], " ", "+", " ", 
   RowBox[{"6", "x"}], " ", "+", " ", "27"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"x", ",", 
   RowBox[{
    RowBox[{"3", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"7", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"6", " ", "x"}], "+", "27"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"x", ",", 
   RowBox[{
    RowBox[{"3", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"7", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"6", " ", "x"}], "+", "27"}]}], "]"}]], "Output",
 CellChangeTimes->{3.6235827005702944`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"3", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"7", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"6", " ", "x"}], "+", "27"}]}], "]"}], "[", "\[FormalX]", 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[FormalX]", ",", 
     RowBox[{"-", "14.`"}], ",", "14.`"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
zPnXSVCdbS/INUuD///fgfQtuW8hqzT4H+yach8=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-14., 14.}, {-6916.9991005714655`, 9714.99887657147}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.623582709259606*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%24", ",", 
   RowBox[{"AxesStyle", "\[Rule]", "Gray"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
zPnXSVCdbS/INUuD///fgfQtuW8hqzT4H+yach8=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  AxesStyle->GrayLevel[0.5],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-14., 14.}, {-6916.9991005714655`, 9714.99887657147}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.623582718089319*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{"%25", ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"HoldForm", "[", "kartofflen", "]"}], ",", 
      RowBox[{"HoldForm", "[", "tomaten", "]"}]}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"LabelStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"GrayLevel", "[", "0", "]"}], "}"}]}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
zPnXSVCdbS/INUuD///fgfQtuW8hqzT4H+yach8=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["kartofflen", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["tomaten", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0},
  AxesStyle->GrayLevel[0.5],
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  LabelStyle->{
    GrayLevel[0]},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->None,
  PlotRange->{{-14., 14.}, {-6916.9991005714655`, 9714.99887657147}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6235827664967394`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["fonction exponential", "Section",
 CellChangeTimes->{{3.6235828587352185`*^9, 3.6235828862070065`*^9}, {
  3.6235831369038286`*^9, 3.623583146170288*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], " ", ":=", " ", 
  SuperscriptBox["\[ExponentialE]", "x"]}]], "Input",
 CellChangeTimes->{{3.623582967374327*^9, 3.6235830033325577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.623583020399067*^9, 3.6235830323331437`*^9}}],

Cell[BoxData["\[ExponentialE]"], "Output",
 CellChangeTimes->{3.6235830339243536`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"h", "[", "0", "]"}]], "Input",
 CellChangeTimes->{{3.6235830439084177`*^9, 3.623583046529235*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.6235830492748523`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"h", "[", "x_", "]"}], " ", ":=", " ", 
  SuperscriptBox["\[ExponentialE]", "x"]}]], "Input"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "exponential of x ", Typeset`newq$$ = 
   "exponential of x ", Typeset`chosen$$ = "Exp[x]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "exponential of x ", 
                  Defer[
                   Exp[Global`x]], "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Exp", "[", "x", "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Exp", "[", "x", "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Exp", "[", "x", "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "exponential of x ", 
                    Defer[
                    Exp[Global`x]], "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Exp", "[", "x", "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Exp", "[", "x", "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Exp", "[", "x", "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", "x"]], "Input",
 CellChangeTimes->{3.623583399120121*^9}],

Cell[BoxData[
 SuperscriptBox["\[ExponentialE]", "x"]], "Output",
 CellChangeTimes->{3.6235833991513214`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", "x"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "18.`"}], ",", "18.`"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-18., 18.}, {0., 291176.7958803304}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6235834057033634`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "integral of E^(2 x +  7)", Typeset`newq$$ =
    "integral of E^(2 x +  7)", Typeset`chosen$$ = 
   "Integrate[E^(2*x + 7), x]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{10., {3., 8.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "integral of E^(2 x +  7)", 
                  Defer[
                   Integrate[E^(2 Global`x + 7), Global`x]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Integrate", "[", 
                  RowBox[{
                   RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                   ",", " ", "x"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
        PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "integral of E^(2 x +  7)", 
                    Defer[
                    Integrate[E^(2 Global`x + 7), Global`x]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                    ",", " ", "x"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Integrate", "[", 
                    RowBox[{
                    RowBox[{"E", "^", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", "*", "x"}], " ", "+", " ", "7"}], ")"}]}], 
                    ",", " ", "x"}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], 
            PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"7", "+", 
    RowBox[{"2", " ", "x"}]}]]}]], "Output",
 CellChangeTimes->{3.62358347537341*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", "2"], " ", 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"7", "+", 
      RowBox[{"2", " ", "x"}]}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5.`"}], ",", "5.`"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-5., 5.}, {0., 849372.3443916922}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6235834785090303`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphics", "Section",
 CellChangeTimes->{{3.623583534404188*^9, 3.6235835542787156`*^9}}],

Cell[CellGroupData[{

Cell["graphic of sin", "WolframAlphaShort"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-6.6, 6.6}, {-0.9999998465152278, 0.9999985922607642}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.623583641046472*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "visualize cos(x)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", "Plot[Cos[x], {x, -6.6, 6.6}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"cos", "(", "x", ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Cos[x], {x, -6.6, 6.6}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1671$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1670$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$885451$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1670$\
885452$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1671$885453$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1671$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1670$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$885451$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1670$\
885452$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1671$\
885453$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$885435[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Cos[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$], \
-6.5973445725385655`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$]], 
                    (
                    Piecewise[{{
                    0. + 7.052858015123397 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 7.052858015123397 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$ + 
                    0.013194689145077132`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$]], 
                    6.5973445725385655`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{(-2) Pi, (-2) Pi}, {-Pi, -Pi}, {0, 0}, {
                    Pi, Pi}, {2 Pi, 2 Pi}}, Automatic}, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1670$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1671$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$885435] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$885435[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$885435[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkYAi7QMSYhsbkwaUpHzvLXZSC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FhGab/X6+\
nr1nyQnKRbeHpiza6c5bIQ5P1ZrqjWTIr0Gj67Y01MzR7l8IMS77tpzb5UMzD+/\
AbfB54UHAz9ahhnhlE9OVCQT1mia89IsRP7kwmXCXD2kz7b3n49HA49CoYyAmOoEvpVW8R8qkDTtId\
AN6zZ4SC++\
ePj8vip4Dym3wsqEqofWu9YAbEwUgDHdIJvvdJE3cO8DAgCilw6S06cO20v0EYxkY3pLMc3LuTqRVt\
cUJn21NwvqVmnHx/9LXwgYxeS97ic3dnxFxbG1WLvvKj+OXUDPL9tC6/\
k6UreML13HGkDw06oXmbzeesqeUKqlnXBz6m6pNmy0RgvnjD1P9IR02Y5jJdtw6CzY1vh1cpbhh+\
2hZc5tvxc2g+s+\
ewdJeCqyVDJ7aMkBZ9H0Ux54AXaPl2dW4fHuFvxHaMzpIIVTmTjLLvFdcejCrzeEWKs3WQD0hH1BIh\
oTq2LOG73WMbM7hQUJBZ4fl2/\
7LGxrEMJuLN97ZkgzI4vT8i6tQnNYbpQdzDJ9MsfFbeSy7kmQ94PhaEZVWtFfxvroyy5goxlYCQxXt\
DUazCHVVIjUMGyH5QgcQ6CIST7ZT/um3+4WAmk6kChupRnceBKcxaeRL8s8BEVmZk2t+\
vA0RXctphNJE9r1UUsTRenzeaY7jeZbtzQHOihJISWJHygd3tCtyf8xT1haQfuloRuSeiWhG5J6JaE\
/3dJcBHjv9JvEKm3Hg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Cos[x], {x, -26, 26}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1673$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1672$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$885520$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1672$\
885521$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1673$885522$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1673$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1672$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$885520$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1672$\
885521$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1673$\
885522$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$885504[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Cos[Global`x], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$], \
-26.389378290154262`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$]], 
                    (
                    Piecewise[{{
                    0. + 28.21143206049359 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 28.21143206049359 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$ + 
                    0.052778756580308527`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$]], 
                    26.389378290154262`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, LabelStyle -> {}, Ticks -> Automatic, 
                    ImageSize -> {300.}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1672$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1673$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, Global`UnitNumberForm, NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$885504] = \
{"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$885504[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$885504[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkcaYtA9IiG1sTBpQkvK9t9hJLVw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMZpf1er6dvWvNBcpJu4OmZNXtymstCkPfnuaJaMynSG/jsnjUxNfuUww9KvO+\
2NQdSTcH48xt8H3hScDD0q2GcGUb1+FBBPmGJrj1DxU7tT8ZcJsDZT/\
piZ2d7e3PLo2AoQzCGKqG32iLmEwWapj0EumXNLgfxzR+flsdPBecx/\
V5QkVD92HpHCoiFkQI4phN867Um6gHmZUAQUOTKWXLi3G17gTaKiWxEpzm+cSlXm21xQWXaU/\
OwpGaVfnz0d/CBjF1I3uNydmfHX1gY14u9i6L659QN8Py2LbySZ0t5w/\
TecaQNDDulepHNl62r5AmpWtYFP6PqimbLWmO8fMLU/\
0jHTJvFMF61DYNOT2yFlytvEf51W3iZY8vPpP3Ims/\
eUQIumwyV3D5KUvBZFM2UB16g7dPVuXV4jPsV3zE6QypY4UQ2zrJbXHc8qcDrHSHG2o3XIB1RT4CI5\
tS6iON2n2XM7E1AQWKBZ9f1yx4byTqUgDvb154Jwuz48oSsWpvQHKVzdQeTTL78UXEruVxoMuT9SBi\
aUbVS9HexPsqSK8hIBkYS4wVNvQZzWCU1BBUs+0EJEucgGEKyX/\
bjvvmH85VAqg4Vqkt5FgeuNOfhSfTLAh9TkZlJc7sOHF3BbYvZRPKsVl3E0nR+\
2qyP6X6T6cYNzYEeSkJoScIHercndHvCX9wTFnbgbknoloRuSeiWhG5J+H+XBBcx/iv9BqOOtwY="]\
]}; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.722", 
    "parsetiming" -> "0.214", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa5811b7d4d6bg1ih54f500002adc02f1a488d95g", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "18", "related" -> 
    "http://www2.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa5821b7d4d6bg1ih54f500003a811da59162hgh8&s=18", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2014, 10, 29, 16, 4, 35.7190697`9.305475032898986}, "Line" -> 
    41, "SessionID" -> 7615279968583788175}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", "Plot[Cos[x], {x, -6.6, 6.6}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "visualize cos(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{232., {48., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1: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
/76Hh///e/j/A16KP2g=
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{-6.6, 6.6}, {-0.9999999152298952, 0.9999997820724272}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6235838758126707`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "visualize cos(xy)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DPlot", "3D plot", 1, 1, "Input", 
        "Plot3D[Cos[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"cos", "(", 
                    RowBox[{"x", " ", "y"}], ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Cos[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max242$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max244$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min241$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min243$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max242$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max244$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$295747$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min241$\
295752$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max242$295753$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min243$\
295754$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max244$295755$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$295756$\
$ = False, CalculateUtilities`GraphicsUtilities`Private`ymesh$295757$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
295758$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$295759$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max242$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max244$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min241$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min243$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = 
                    True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$\
 = True, CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$295747$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min241$\
295752$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max242$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max242$\
295753$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min243$\
295754$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max244$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max244$\
295755$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$295756$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$295757$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$295758$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
295759$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    Cos[Global`x Global`y], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max242$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min241$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max242$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min241$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max242$$]], 
                    3.145793518145755]}, {Global`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max244$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min243$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max244$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min243$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max244$$]], 
                    3.145793518145755]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, ImageSize -> {300.}, 
                    ClippingStyle -> Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min241$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max242$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min243$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max244$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+MfIPEZwRhCSEiIvTAmDShJ+\
d5b7DQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5SW/\
g6ZE1O3Kay0KQvdNcUa2ZFOkVfHbbmpiaXcrhByXed92a91JNwfjzG3wfeFJwMPSrYZwZRvV4X0Ges\
UTXnqFix/YnYy4T4OwnfbL5+uWrrWceBUMZgjFUCf2iLWKeKdA07SHQNWu2OYhv/\
rhRHj8VnMf0e0FFQvUD6x0pIBZGCuCYTvCtl5qou5iXAUFAkQtnyYlzu+\
0F2igmJiM6zfGNc7l63hYX1ER7au6V1KzSj4/+Jj6QsQvJe1zO7uz4CwvjcrF3VlT/nLoBnt+\
2hVfyZClvmN47jrSBYcdUL7L5tHWVPCFVy7rgZ1Rd0GxZa4znT5j6H+\
mQabMYxmbbMOj0yFZ4ufIW4bfawsscW34m7fvWfPaOEnDZZKjk9lGSgs+\
iaKY88AJtn67OrcNj3Kn4jtEZUsEKJ7Jxlt3iuuNhBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7bMLMTgYKE\
gs8u65f9thI1qEE3Nm+9kwQZseXJ2TV2oTmIJ2rO5gk+/\
JHxa3kcqbJkPcDYeiEqpWiv4X1UZZcQUYyMJIYL2jqNZjDKqkhqGDZD0qQOAfBEJL9sh/3zT+\
crwRSta9QXcqzOHClOQ1Pol8W+\
JCKicma23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3NfK27g=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Cos[x y], {x, -3.14579, 3.14579}, {y, -3.14579, \
3.14579}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max611$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max613$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min610$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min612$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min610$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max611$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max613$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$299289$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min610$\
299294$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max611$299295$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min612$\
299296$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max613$299297$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max611$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max613$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min610$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min612$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$299289$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min610$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min610$\
299294$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max611$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max611$\
299295$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min612$\
299296$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max613$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max613$\
299297$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Cos[$CellContext`x $CellContext`y], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min610$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min610$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min610$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max611$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min610$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max611$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min610$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max611$$]], 
                    3.145793518145755]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$], \
-3.145793518145755], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max613$$]], 
                    (
                    Piecewise[{{
                    0. + 3.362994729838756 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 3.362994729838756 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min612$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max613$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min612$$ + 
                    0.00629158703629151, 
                    CalculateUtilities`GraphicsUtilities`Private`max613$$]], 
                    3.145793518145755]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, ImageSize -> {300.}, 
                    ClippingStyle -> Automatic, FrameLabel -> Automatic, 
                    RotateLabel -> False, PlotRangePadding -> 0, 
                    ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min610$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max611$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min612$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max613$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+\
ARKfkSh8YBISYhsbkwaUpHzvLXZSC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FhGab/X6+\
nr1nyQnKRbeHpiza6c5bIQ5P1ZrqjWTIr0Gj67Y01MzR7l8IMS77tpzb5UMzD+/\
AbfB54UHAz9ahhnhlE9OVCQT1mia89IsRP7kwmXCXD2kz4bbm8PXw89CoYyAmOoEvplW8R8qkDTtId\
AN6zZ4SC++\
ePj8vip4Dym3wsqEqofWu9YAbEwUgDHdIJvvdJE3cO8DAgCilw6S06cO20v0EYxkY3pLMc3LuTqRVt\
cUJn21NwvqVmnHx/9LXwgYxeS97ic3dnxFxbG1WLvvKj+OXUDPL9tC6/\
k6UreML13HGkDw06oXmbzeesqeUKqlnXBz6m6pNmy0RgvnjD1P9IR02Y5jGHbMOjs2FZ4tfKW4V+\
1hZc5tvxc2g+s+\
ewdJeCqyVDJ7aMkBZ9H0Ux54AXaPl2dW4fHuFvxHaMzpIIVTmTjLLvFdcejCrzeEWKs3WQD0hH1BIh\
oTq2LOG73WMbM7hQUJBZ4fl2/\
7LGxrEMJuLN97ZkgzI4vT8i6tQnNYbpQdzDJ9MsfFbeSy7kmQ94PhaEZVWtFfxvroyy5goxlYCQxXt\
DUazCHVVIjUMGyH5QgcQ6CIST7ZT/um3+4WAmk6kChupRnceBKcxaeRL8s8BEVmZk2t+\
vA0RXctphNJE9r1UUsTRenzeaY7jeZbtzQHOihJISWJHygd3tCtyf8xT1haQfuloRuSeiWhG5J6JaE\
/3dJcBHjv9JvloO3Fg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.719", 
    "parsetiming" -> "0.194", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa611g99730c40ac20a800002iae3f81g5ag9666", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "9", "related" -> 
    "http://www2.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa621g99730c40ac20a8000023775c5294a93909&s=9", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2014, 10, 29, 16, 5, 20.5067269`9.064471282315345}, "Line" -> 
    42, "SessionID" -> 7615279968583788175}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DPlot", "3D plot", 1, 1, "Input", 
    "Plot3D[Cos[x y], {x, -3.14579, 3.14579}, {y, -3.14579, 3.14579}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "visualize cos(xy)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{491., {48., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
/t5S91bQPSjRPrJC7aEDPYEdi53KPvW+u5dkHzmq+xTs19GX5+ds5PynD407
PSR4B4q+xI4an2gXy5f4f5ELao/c2D3O5LCdb3n8RI/lZ5Q++/OjWXdUHnXA
5MD2i+lbLsULB+dK1tfr2Rv8592x/e0caPEn819tfdNb62P9e3WMVM6cJY6d
PvGuF3eVf3aX+UFoX+jj4ru2pVtkfhNw6oBnvcyvPyL080nOIQc+fnKj+Y3t
PdftXzzcq/Ieox96q7n8ycgV/gFw1iPtkQPwXIrXQj45F+APAYffGXP3qPxx
k+12jkYe5zq/Dev0K8WjQj/t8TcyXvy1+GnB0ccT1Q/yxne4R+D/Mw8zlKfF
8rPL3psxs9bBQnkDPyfyM1B5/CyPMPkjFT/DdxkHfh5w1uuRKhWPVS+/0tYp
/WTZNfXrZgM32u98n++Cs16PThu28+oX9hs9zEP9belv+ezFjWY/s+7S5/10
Rqvau2xdWF40yT90oic5b7JOsZ8vjll86sm5R2y/gJ6HJYesK75zQP0jr+bP
VHvGaXo1S0Kv0i/4UOlV5JKfv6Ydq5j5j8U2HvB8Y+7Z3/nrzaZH4N/unQk+
o7/ACy5NV6/iiynGf+ar1KOJ+WJc4DNeev2hH2+ean5a9oHfKxd8d9fsLnbf
AP5q31xvram+PjgH6WfLzKHxGs4+Qj/Y6VkL9M6wZM4U+y7jLXi0wQdFH95k
9jb7Y7b8ifbIJfx/KmPRbM2G/GD+Eb4zVPXdkAe+0/Jo1b8+HrDN7Ad/DrW4
O+07Pw2/cGPOHUEdNOSqmuhBPixf4JLXJsycvcbuKdDnPUQP/ZsfNf+J0V0H
zTA9gLz/8uffDdp122rri3Fco/UFPbZeNe/sC+ynp3Il9Bjt6I9+kDfwC3Vf
ui7LfX8Zfcgd8ob8gK9Ue/Sy5T2QfoAO9PRjWtfg7FPL2k9cunT8DqvTwHr5
vXZCDuGn1bWQHPI96Pf6Bz7dLv4gl3zn96cS/YPznTHqn/mwd1onLjVJrfJ7
pNi0tdNK3pQ5jj2SIV2pkaPKdzZ9bXWvZIcgf+B19j0dmZw2I7bgMt07zK45
13X7iNuWTTf/lcXbjxjUq/+pNMPZbzuVy7D30Y2Bn5zvTCTfOPeL2udv0L0A
csK6yaI6Pswjcsv7a4vDEZ+wG8EZF/oN+4FxdRuTd9+LL2+IYQ+A19x6/acV
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
9/X8zyHjM3gr1S2Cb+BV7zh78qZBP11hb0+TXJne0P32rzqPgGP3fq9zMXzA
/rw08+S4ag33G36tvv9RvtSSeabtMfnnux0K3nf3wTdS7FwPzn0r7bk3rO/8
q7Qv9/XVfSa022jnNezk1u9f1/b3s/uMby1kf7bYnTif0j/tfzzYqc+So3tM
f3Jv2FZ+ZuikvaeT9ovkr2bez4s/F8UfcPp5OPfgfsfXBPe5xGsveDHDZw9M
2WR6CbyR4reZX+zJ3uIz/MdOzrQzcV4Gx06+aknC/4Y8jJW/K1eHxLmecVl9
xjUvfNls0QHjD/eS9XWPAH9o7/lD+zm6j8DutXz+WhfoGbNbNS5w7PZsmWc1
fyF1u51rntb8psn/AD+J95heoN62jXvSYmF/3THL1wqOfbtUcs54af9apMLj
I4sHdjX3m8/rfofx0r5stVkt344HdhHt2+ieCL7RHr8W4wKfJvrhG/1NEZ2W
50J2e3fnhySOJXv+MV8/nPVX0wPgJ9w5AjzX9Mbd3mkW2Dngnxx9JPLoh4es
Pfee5XRPBx8ScT0HYwvlBwNf4fyc9N9CcSsV5K8DvyT/YX75D1lH0JNHdDKP
Pr8rdPr7UOQq2f1pP8V94bekPfePP+g+FP5jD28U/y2vn/rr5vz8xPtUfS3s
Tx6ifk6qH+aLeLY8zm4HLyA+IFdLktzDfq/vLhf/ab9Y95K+Pf3vPHJ9ieVr
U51/dU/kU8kD8wJeSPSwr4Ff4+x58Bcln3YuFj336N6WdbFQ9JcT3+An8Y9T
tV6Q/7tkV3+Va+PcT6dtt3XN/WZLp8fox/MB/D6ta9rTj5cf2neR3oAPw4UP
4b22+ACd+zMl9Bs455EOTh/y3YIrXp51uvhh44/nA3hj2f/POD8t8bQvhN4H
zVtg9UFcHBT4Be0LtOce1toTF6Tzwnjd+4DTzzc5b8/QdP46Gxf9TOjbNOue
l48Y/bQ/rf3R9J7OBc11L0Z7u19+KnFPzXopoO/0dPsm54Jz2q8tnkHnC88H
8J9lP9Cee17Ph6v13bf0XeiknzqyW/y5Y56z0xj3t26fIq5yuew3xsV9LvYq
dFpdBtGJ3HIO6oO9J5z2JWR3MV+cgyrO2l+j7sZxtq45B138J2G3I//lFB/I
fSvtobO27rXhD9/t4uxe4gw5X8A3+p8mu9qdC6JJzgVRfy6Q/R+dIvvfnRei
nBfoh/vrS9kT9gztwTPIjwr/+e4/jv/gdyieHPkBnys63Tkims7xE/z3yl/l
eb3tQZsX6Oml85eLP4wSf4j+5Jzyp/px9Mf/cXIOPtfxE7u9puQHvmHn71Vc
BPOFfZhRfKM9+AanN7Azv1xes2yri4dsnWB3Pe72EfDbSlZafXW2A2b3Ylfs
0H4H/dg5MxSnZPlztc9OUdwUOPrnqk6JOEboZ71Xlv1P/8h5FfEHPQPeU+cm
7x/4SfoBPtj9UcnEuY/+kYds1RPnU8bLebaf4kaYX3DmF5z5uuRwi7d0OPPC
/gh/sG9jw+sXLHspiIfBfuu3cuVrm/IeNLkCn9UtU4Z0O1KND+AdnV8U/HjH
+TfMORTk6wavFiuap+oXh0zPgPfVd6GHuOuRwtE/4PXUD+sF/Ly+izyDd3H+
YfC5Ghf0gI9w32V/nyO+MY/YA9/pnGX2tuRwMfFU+i771E6tO9qDN9a5Gxz9
/JmTE3DkBDqXu/gc+CP/UryZ/Evg8Pul0V/8FOmx+wp/jtfnyGd1xSk5v1Z8
rruvHKD+M982ovPK7Gn2PeJ26nevUaDUwcCvlUc/9ynOx/tPZmjdheNS0sdr
KM6Z72p/jNeVfw98k+KCflpXcf7H4w8bPfADPvA7PxfIn8nvxAtN3FtvUMFr
Dl9x/+jjmddonWZqHY6LJj7njgl93nmm3Q47F1fUvV4pxQXxXdpvkx/Y4v0U
F/Rkv5Xfp3wdxHsTbzPxq2kl25YO+P+q7lmqf7m27ZTmQXzLC8K/dPc79yuO
ZdLg75cO2hzcj2zU+u2k9QWekMtVV5zvOJdV0v0X/d+je4QOukcD36u4jpy1
iz9V8qMU0w859Pcskiv49jZ1BxSnwXc7kp+hUOKeETr5Sb5Efl+u9XtBcZLJ
/OfgX2r9PuXkUP666Bnnj8Lfvqbn03nL5Q3i9ukf+QGn/4auf93XRzPJ7w1+
o/zee1bNX/f9jjQfPxAd4PzSfyieoVfZd17ffeiQyZXiHOKteq9478V8gf4E
76T24MQBZtS8uP7j9M98HZL/85LiOly8R/yMcK9/6kr/8F3iDRgvOHGAS7Xe
/T7r903vFwUfnWT/9e0Zb1FHj+nZxLzHb1P8DDjxDM/+Pe/bR4oHdvVIp9/4
7sgk9Hh/KfOIP3Z94fH/+SlHcB5ZxTsOrVNw4gHAofOw7t/vVHwUOH7RDG49
dqfujdZj2H9+ItZMOPYS9/hHFQ8APU2cPQM+Nokf75DovFt0gkNnetEJPlVx
jEcVDwmO/pwg/WnnVvnZzjyV0EvQjz/zbuk3xttTfi3q5li8pfCJoXrcx2PV
E3F9kcnSt9AzTHhTxROCc3/dSPqceRmbGFdkp8YFjt9jjMZFP+Nde/BSaj/K
tee+9X7HZ9ZBZicP3HuW177m4mAjZYVjT/6k98KVta/ZuUN+lT8lz+jJn6W3
L0pv0/7exH4dmaP9GjrvEz5Qcb/2/kv/r5bsAXD09g1av+Do+Tr/vn5tXzD/
bUIvRbFDwIs6ve3tPb/evT8Bvm9Q/zH1D53gxFeDcx/aUvYY9PTV39HnTv9H
0f/Q0ygJnfgHPJ18HzlhvvhuHfEfnO8+r/0I+eHe8ISze61eWc+1t2w8FowL
vNGfI0pc/1nAf/r5quKeobcWT/uv+wV2sh8X/T+r/sHpf7L6Zz1y33fswPX1
zmQM4lXYX565+Mv5e3YFdgjxbDNUN4f27C9bZVfwXfpprn7gD++Ab1s0cnWV
59OusGO9nWP1CpV/A/6T/+AuZ6/iN/izW7u8FTYG433X6TFw4nzqS48hH/e7
OGpw7NUnXPvE/Fx570D8RrXaZf78dkGqrQvyEjRQfD44ftRqss/tvkz6ZovG
hf7h3XOq+EN78ircKT57e2+Js/csj5rmF3rsfY3enzLv6IGnNb/gvBf28ozf
0sst/TRVP/auSv18o34YF3i/gXlWVd6116+vaCMn/+CsC/oB/0PrFPlhvYxU
/9AP7u0cq2Pu5pdzeiP3zkvxunHie+2+UngVh7Ouo8JZF3kVP1BGcRHOPxn3
/km+W9jFP9De+y3p/7/pHxeHHCcOGRz6c/8XnPESn3DR2eGjktiltPfzgp9q
mO4X6Af7M73OxfSDfvPy+aL022/Sb9B5XHrsLcW9g6e6vEbg6L0uwvluuB5j
YGeG6zEG70nz/ZK4Jx0t+43xcr7u4+IYeQ9y+pYdvfOMDfiDPjwrHP5sdH42
cH++Bs8kesHh2zBnT6JnfHvGVdbZaWE7JLh3AyduDTz8ru1U5Ea9ZwRf4ey0
8HuKwF6if+w6/130p/8udlfdfz83/Vc7Cr2B//KM9mXao/f8ukOPsY5cPFI0
STxS1Mcjab1Hd/YKv+Njva9+us8v+w5vNpw4/7e/7d9i119bjH7aj2/dffuo
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
9BX2BnILnzmPX69zKzj5Q27V+g3nGQv8mfCHc/EUvdcDv0n9l5SehA+cc5u6
8zLn4vL6rsmJ1vtsvQsA5x1fxOXHIP9DE+kZ+IP/s7r8tOZvURzU346fxEFl
cPwcrfbpSibagxNnlVHtkUPslnmvh9//Wn0x5/8hDuFZnZctf6zWSwHtF7S3
PPHap8CxWxo7fxfxTmWcv4t4oVLOv0e80GGdQ53/Nr5fdourYxJvKj+ky08e
by8/pMt7GSfvJfoN+/8xnUNdfsu4z29pdUT/3Z6JjxFu7/L0c4fizy0ORHrg
WsVdoPdY7/3uemN+hqZBHiHiZBa2bPf73RkPGv2cIxYrbyp4Rfkhe8qeZL/2
dSShn+/WXpnQk+gH/JZd9N4NHD9nN9e/r9sIvi6JXTHaxVuC+7qKjMveBS8s
V7dySuDXYp9dIZz9yb/XgP/ss5V07rD4Q+3LfXU+AieePK/OI+Cs99+Vrxj6
ff0+i29R+wdlz4TjsY9FJrj3pOBHFifOg+DkA8yp86DFOcu/NNDFJ+B36ufi
E3y9PMunpH12jeTN4gq0Px4rGc5Hwb73jPPzsy97fwX6pNPPYXmzenajT334
wKrgXhV/Qkntj/aOW/2M1XqhH/xLjzj/Evg/lybeWnvlRpMH4tvru/s+4uHX
u/s+619+A/QYf7/j3+8lo810HwR/8Nt4vxDnHeoauPuXaJL7lyj3L67uQJS6
A8wjeq9Muq8u84F9jXNQEXe+Q799695Rojfmyb5inVqdJs0jco5/Y7eTc/Kw
FZY8Qz92RcNTdZ/tfjpYp+QlGOPW6QM6X0TcOuW+uKzyD4NzX9ylRdu7+rYZ
cUX+wO/duzzwi5J/3/5HtQ/noU0fr6nzO+sEvX1Q9RGYF9b7scVh/w/vUzpL
D4MTL32V8wv5eELWKfYz8ZbMF/EzC9w+Ul77e2fpecvrrnV3W78P/3jg5sAP
gzwPva5DjYzpt9l+Ct6m9nstllfdZPYM8txDeS/BzR7WvZ7lp5V9u9Hd6zG+
C87fzn1ZKRcvRPz/bS7vOvlJvD12kvj8GxZ2qH97cC/Mefb50rHqbecGeRXI
4/Gg7Ebw1rq3mkB8vnDyZkx0cV+cc7sr/xs4eXcryr4Kn0eCevHMSwXN4xDF
pYOT16uxe6fGuewj5dcCRw9fLz1s9R1k1z2ydM/z8d+W23rh/U5TF3eNXZfh
4fTpri4QxKWgT8pLrujf8tjLz+new8Yr6Z01/RNf92Du6zoXKLXf+MC7xbee
Tax3+kdfHZ/60Qdr6gT51dkHn/wmmidv3t3WP+Pt5sbL+t5y4M8xw76ZafqH
n7X+Xf9ELz6doIf/j96b0n3Ie7lzDjI6sVsaKM+GvSek7tA3Lw37653g/Uhi
nwn8ruADnR8D/sPn7g0H33F7l0Cfc+82IPLL+MofzjX+ozfeV54luzcR30bq
nI6cs+/8oXpYHl8Pru9irzYX/5kX7s0P/Vn/9iL9gzoFnE9zKb8QOPnJry56
y7vLr/s9qB8nOzPb8E9Spu/+w+aR89eWmxLtwamT9eewRHu7h9J4S6ouG/hE
4ftVP8vvp1O1n9I/+c//cd9l36xXamrb+7IE+z55eG54pM7jt+ZYZnJFXvHy
c3v8kaVg3M6DX+jeufPtrVKe/zuwNzgv3zci3b3vdw9wzsXDMlzfd0anACd/
y4XPXn697/MBTh7I594r/FD1i4F9zn73kN7vsx6h93GtC3DWxVvPJNYF+pb4
sSqqM+XxqHDOb/RXYNiYAhN37rF4aMvTozwJ4OhR8tHhfwSnzg52PDh1RrCf
7B2h8nVw3gMnTwJ8Aeccx70OOPWJoAecvFX4R8DJ48T82blQOPRb3lD1w/q3
90OqZ2R5EIRjJ3DfAM47dPxing/wh3WAnQl/wKljBX/AyecGf8DJYwZ/wMnT
BX/Ayf+Afgzry6PGN3D8QvANnDhJ+AZOPiL4Bn4ofaK+FXwDf091uOx+RTj3
LPDNzhl6vw/fwMmzB9/AyWsH38DJ5wbfwIkzhG//XkdgyYJwvaOAb749fAPH
PwbfwMl7AN/AyXsA3yzvhcYL38DJb8D5B5zzFPzkHEbeA/SA1dFSe/hMe85r
VrfM4eF8GUE8fPi+JMDDda2uxKHH89+3Bw/XlQrmxbcH9/UXwnGcQftwnqwA
Z748H5gvjzNfSfh/RXvmBXuBuAXTq8IflN6AD+E6WkeNHnDq+zBflmdCeo/x
2jvsC2E9bHlc3L4APs/tC+zn3DNCPzj3AsgVOHHs0Gn+IeXJgR5w7suQH3D8
58w7OHnwoB8cPxV8s/tS0ck8Gp0al9V9lD3LuwDGC849KeMF51zMuMDJ/8O4
wIlzZlzg5PNhXODko0NurT6A8vwgh+DkU7I8O8SJ696ZcYEXUL0qxmXvYvXu
gHkEJx6S8YLvkV+R8dp7aMUHIufhd4rBugYnrhs+gOO3RM7BedcGf8DJw4Y8
gPN+EHkA514efloeONlj5FPATiN+nnwo4NRRIi8JOHGn2Pfg1CGi3g/4nbKT
eTdl9bv0DpS6L+CD5V/Cz2Lnab1P5/4VfIPy8nFOtrgk3dORP9rep8rfyPsH
q8ci/x71n7BXSyregDpP4LyTpd4SOHWXqD9k9aqUl5K6QeDUD6I+DTh1aqgH
A05dGOqvgFO3hfoo4NRbIa4OnPeS1FuyeF7FA3Bfa/4AxXVwf4AdTj0p6icZ
njNcl8feIclPixyCU+eLulzg1OciHg6c+lmc38CpY0VdKHDyplJvCZxzGXII
Th0i8/sLpx4QcghOXR7k0PI+yp9GnCU4dW2QQ6tHp7hE5JB98xXlb6dOmNVx
Vf556nVZfV3dkyKH4NTDor4UOPlaqW8ETp0j6gyBX688+cghOPWAkENw6vVY
fR3hvG8lft3yHyjvJf4Fy/uuPP+ct8Gp50XdI8s/pLgL5NbyHjm5Baf+F/cu
Fq8tPzP30FZ/VfURuAdlvfDeirwwdp8j/x7xAeDUkSEu0OpmKG6H+3uLr5F/
kvf24NSzID4PfKvyTXHOB/9d+fDxp1tdDo0X/yB4uC5PUOeOejctnB6g3gp1
RMCpJ0J9DnDqdFDHwvIaal54pwp+WnYp/nFw8i8xj+DcL/Ceh/Myef55hwlO
/Sbi28Cpr8S7Sstzr3xl+LXBqZtDvRmrM6B8WcRj2b2r5Jk6LuDUc6GOCzj1
XKibYvnqhPeXXxv8sOqnUBfE/CT6LvVLzM+gOibU/wCnDgjvB8CfVh0Q4t3N
3yn+kOcUnLoPvOOyelbiP3UU/HzhR7Y89NI/1FsCp+4ScXLg1Cfi/gCcOj7k
pwanbgt50MCp20K9E3DqnhDPavGb0tvET5ufT/sCeWrs/aXqemDPWLyJ2pM/
y96xCedeB3yo+uHdIzh1pqgvhX6mzhR1aMCpR4M+BKc+C3mCwKmTwrs1O/dp
HnnnaXmHJA/USbL8f5JD6hWBU7eIPEpBHuWE/OMnBaduDvVjwKkjQ3wMOHVG
0J8WByH5RH+yX3zn9Cf4Yqc/wanb1cLtR6ed/gT3+hPc60/wIk5/gh9z+tPq
LTv9abjTn5xDqW+C/rT8xMpXyT2inZe1DxJ3C35c9W6ox2DttT9Sd8rqGmkf
pO4UOPWnqPMEzv5InSdw6j2hD8Gpl0SdJMvTrH2Zd1Dg1PfhXRA4dXPQb+DU
i0G/eX4Sz8S5mDp66DFw6qAhh9jd1D0hf5zV91BdD+IRLb++3gtz/wFOPQju
vcDJw889Ojh51LkvxF4i7zTvQ7BDqFPD+Z32W+WXgE5w6npwTgfvKv8DcUtW
91h1DYgvBKdeAOd0cOqec68Pnl35Hzhf+3sN4v79ePFjMN428tvAH+wT3kkx
j7SnHg38AScfC/4N8FHyU8Ef8MnyO3HfCU6dC/wb4fcoRy0OEpy6AJZPn/Oj
7ovhDzjvHeAD462pOF7PB/KNg7Pvk28c/w/tyWPj7Vjq9cA3cN4BoZfon7o8
1OOx+yDFgYx151/qv6CvaE8dGfhP+9cU397c2cnUEwGnn1yh+hRLrnh3XNfZ
ydS5ALf8/eoHPxLtydOCvqI9+fy9/UxeffLBGZ/D8xVNMo9RP4+8N8MuIj88
97Xg1JMyvzTzpbxM3Gdb3ZhQPv8Mhs9Xfn70Gzh1auA/OHVbiD8Dp14A72qs
vozoJP7Gjwv6wckThdxi11HvCfsBnLpL6ENw6g0xLosfV76IZxTvwnepF0Od
GHDqxXDPTT/4T6DT3xeE3+cHeP6QvAZ4uH5PcK8RriMyz+UfPnfFfUc4f1CA
I7cet7z/7h4kXPcl+C51X6x+u/jA+gKnzovdXwhfoPs1xmVxTJoX/L3gq8g3
rvGCUzeE9Qv+gu7j4AM49TVMf8oOp84aeXutvqLkmfkFp16Y3Y8Lf173rX0V
1+L9SHYPLnyOu88F76D7XNNXwqmPY/fjwl/Td+Gn1TfT+rV7c+FTdR+EPIBT
j8P0kuMP+5TdQ+k+HX5iD5P3iXcglk9d+pN1AU79MvQMeB6n58PvO//XvaHw
Si6uAPw9xRWYfAqnrhDvECzeSn42kzfh1JcxeRO+RfEGJm/CK2pc3EeAFxPf
sAfAyaPFPmLnFOULYn8HD+cTW3JFPgH4Y/Gh2mfrunPQNW5/xN6mjhLvOmhP
vSHk0OhUvB/yBk4+NPhm9epFP/wB7yn7h/dX0NPnjsR7Sfwk4NSFgZ/0wzvN
8o6f5F8Cpx/qm7AfgfO+G/8VOPXjsAMtvlt1l/D/gL8he4n+/b0e/hZw6q+x
L3BvRR03/DC0p14YfhjrR/s7+sHyQ6sf5Bac+kHoB8uLpnMTcW/g1Mtjf7Q8
Z+0T5yDsTM5BL+j+ET0ATr1F7h/BqauCHuYcQZ1K2oPX0DkFvtk5SPku0FfY
4eQHgx7sqKpav+h57Le7Jefs42Y/y24Bpx/qyyCfPr4LerA3qKvCeMGpd8O8
gFPnBf2JfULdGcs75vZ3+mF/pC4M7c2fI7uU9eJx7w+hjgw48k8dGfQqckId
Ls6nFpeneiW8nwEf6XDml/opyDk49U1oz7xTV2Wu87fzTgfc6quorortg+Lb
FBcHBd7SxUGBr3BxUFZPT3aR7RfCZ/j+xf9t2nfgGzh1bbY5/xj5NsHNvyQ+
sF7QG9TToT049W6svo7msa+bF8vvK5x378wjdVK457L7ceVP4J4LnHof5CEF
p94HdWIsf6ryp1F/xd7R6h1cRXd/TV2St929M3U3iNtGfqg7Q5wAOPVTGJfl
f5IfjPgBcOqb+PP+NOf3AKdezBp3fqcOi7/34X7qyyTnXPYL7D3qmHR0957U
GeG9ivf38r7F58knb5rVdZTfmDzX4NRnIS82OPVZeP8GTl0V8tSDU5eE+wJw
6pLwngqcOiO8vzL/ufLV867J++d5NwJOHZCNbt1RR4b8tt5OW+7sJeqzeP/z
YjePlo9W88i9hu2bivfgvhWcehzkc7F1p3gS8qyBU1eCugvg1FPA/rF6uVqn
nKdYR9RDOeBw6qFQVwOc+hpdHE59DepPgFOH4ieH856F+xerz6D1Xt7h1Gvg
fS/rlLyg+I3t3YnyHng/HvVcRibxy41Msh75rsVFS664zwJHPqnbAU79Dupt
gJMvjncj9q5C9RSIx/D9E4/h6aGuCXYI9U2oFwJO3RAf74r/IZn/JBkOP/9/
/S3hejDz3DuUc1fg4bosAe7jRf+bX6Wc86uAk7/S6w3yvXr9w3t1cOpf/Jzk
nMU7GfZ36owQn2P3MpJb8sqBU0+EeQcnPyf5Gdnf73Z6Axy9QR4HezcpvcH+
Dk49mt6SW8vXqLg47jEtPlD7PnkNwNFL5DWw9+7qnzg6q8Mg+skjAE79FPII
gD+ld2TsL+DUT2E/svOU9C3zaHl/FWfIvSo49Uqw99CrhRXfiN1o902Kk4Rv
Fr8nvhEPY3aX+MZ6tPzxWzP/tmhv0D84+w7nfctfK7xsEr2Kvxo9Sb0D/Ntm
Fyk/HvlPwanfwXt+cOogcM6yc5zemRL/YPaS8hmaH09ySv0R3nfRnnep7Ke0
p/6I+c2I61A/jBec+hSMF5z6EeSZStI+6tv7cxz6BD+/x+nf49CJPpns6ASn
ngV8s3rpGi/9m39M/di5Ujh1NxiX75/3jea34V2wfrc8wZpf3udbfgXNr7eX
vHzSD3VSyDsATh0TxmXvR8Nyazh5iclvYnU5FA+MX9Hiq3Wu4RwFTh5+7F7L
K6b1i50MTl0Y/H6sa/apg86+os5Fsrg17oPoh3o9y9x5ijpEFdy5ibjfMS6e
ljyZYx1Onkz8YP4+lHhR5J/8jf4ejXth8l1aHSH5VciT6+0f+AYO3/DP+Hu0
ce7eqnD43irq763gm1938Nnja5LYJ82S2CH5ktgt4fy2AR7OPzsvSV5Ef990
5XuZZPdK3AN6nHnxuL9vArf6LpxHxeexDs8dxqP/v7i9q3L+dvIjs67Jk9xG
+yk4eZLxb4NTXx558H5j/PCsr4f0DoJ39eDkkcPOtHqner+AXrV8Zqp3QP+s
r0mK9yAPHTj56OgfnHcxjIv1WEfvfdDD4PVVVwJ5AKcuA/Pr/avQifx21n3E
Qud/Iw8e9Fh9GNm30A/eRucsfy9PvJlvTx5g7jtYv9SnMP+n/G/k27d9UDj1
RLBDwM+5e2fL36z7TXs/K/lsq/s+2oO/5e7fwam7gV+RdXwJ+9/F16HnwZFP
q1ci+u0cofg3+MC+Q95O+ABOnRT6AafOCPEeyG02yT/x2+DkYWPewYvqvoBz
q9m3sp+5J7K8s9T703hsXxM9yCc4eb3IE8q6oP7CsiQ4/k/kh3xx+J/BqVux
0MXBkrcNPuO3J58z5ybL36N3HJyb7N2r8oTwXcsPHarncs5w6lxgt4CTnw27
BZz8bKwvcOpccK6xfHJ6t8K5Bpy8anY/q3XxhN7hku/A3o0q7xz+JXDyztl9
hHDqB7G+0PPt3Pt08PK6LzY/v9YXeTI5H7Eu3nT+HHDqp9A/OPn8/f24u3+M
+/tH/D/+3E18Mjj1WfCv2nlZ8k8+BfBmemdE/kHLy6t1R/4C1gX569iX/Tup
MQ539l7c23vUMwOnrlmqw6lrdtTh1DWjPhk4dcqw63KH7KyjEeo3gFPHoanD
qeNA/LnlqVLecuxqy9eivFXcR4BTH433feDUR+Ocbu9ihLMeLb5RfhvOL+Dk
kWa+/Psa7B9/vqb+ireTsUstf4/iSPGbgVPPjnmx/Vr3qvi9wTs6v7eP00N/
Wj0o5c3jfEd76hHAf9qTL3Gci5fDPsfPhv4hvz3x9uDkt2cdgVPnhTyn4NR5
Ib4FnDov5CUEpw4LeQzBSytvEvfp4NRh4T0UOHVY8G94+5k6KLSn3gr3UODU
W8GPB069lavFX3DqrYTrCAbnhXAdQX/uuPL9/vAk8WwNk5xfwnX4AvznJOea
kUnOL/8t/o3xUueLdw3g5M1jHSXp5wocfe7fM/JeAJw6SvhvwakzQlw9OHVG
yKcMTt0Q/Lp2Hy05JK4VnDod2Ffg1OngvRI4dTqIz/f0JzuvsY7Yf6l3SR1H
80fpnM4+BU4dGfY18KyST/ZxcPJwcj6195LSG6wj9mXqMXEesbwKLh7A4qmE
40cCp64K8gxOvUjsMXDqs4x093p1Xb4+cOqe+LimPc4fAk69LebF+6+49wGn
7gl8AydfJXrV8onpnTh6FZw8kOxr2BXUTeA9Jjh1E6jDxL5MPaaf3Xkw3X+5
72a8fj1yb5tkX4j6fcH8QpJn8n7w/hr+UJcE/xg4dUnQD4yXenDoB//unvez
3h7jXoD9/RblwWAfh2/k++XcB049EfLzsp+Sp9fHmZNvM5y3N9C34Xy7AR7O
Pxvg4XyvAW55V918Yc943PJcaV4yKU+R+eGFkyfZ4+RJRp/79XK1w4knxD/J
/Fo+WMmf3a/JX52ge8kCcMb7pYurJO8u7+utzpXyanL/Al5Q70qIW2DdkT+W
OAer66X8saxrywei/LHYD+av1jrFfgCvoHWKX8LyvyqPMXlRwcmPir8F/Gbl
UyWuA5z8xug3q+em9cL6TaJ/ol7/oB9YR+T/J58DOHn48SeYXa24U+wHOwcp
rz51HWgf0fs4/F3g8/XOCL8fOHk1yacJTl5N3u+DU3+B+1xw6i9YPXXhlaUf
yKdp/ej9HfIMTl5N7A30w18uLhp9a/UahNOeeg1TFY9h+cQUD0+9CvCvdI5j
nwXnPI5+AL85Y9FszYb8YPNr+dOUB5j8gP69BnIITr0A3mliz1B3mPfslodV
9g/1VNAn1FWx+Ha1p64KdXzBqecbrmtyZZ4u2teQn4Q4ZHDyxPL+EXqoe/Ki
zrngvHOxfH3CZ+o9AnHIls9K77vXOH8j+y/vv8DTQnkkThleUvZPM4eTF5d8
Aui3Inr/CP/By8xO1OOw/M6yj6iPA//BqTtDnlx7J1vt4N7Rny+yPAPg1H9h
X0OfPF+zx4UOTXfb+kIPfKP8UcghOPUL8D+zvsi7xTnI3pG5uHrwm8Uf3mki
59SDQH8hz7fIz0OcHjj1iImXAKceBPESds6VXDEucOovEC9hefB0viBeApz6
C7zzRW6pS2vvPoSzHs0/IDnEv8q52N6VKJ+J+eGFU0+Ee3zLjyv9hh8bOaFO
CnE4zDv1l3mPD079ZauXwD6l/YXzDjh1UvAbgFMnBXuG+cylex/8UXYfJHp4
LwxOXTn8JODUlbM63MKpd0adM3DqneGnBd+oPF3sI+DUzWFdgFNXAvsZnPoX
6E+7t1LdursdTj077F7weQ0i+4svT7E4B/DT8s9jr7LuqFuBPIBTF495BKf+
BXGS4NS/Qz7tvbbqjcI3y5es/HXYe+DkVyceyfKmu/7RA+E6sBnMD0adROhH
P5APHz1p72eVDx870PKW6FyM3evzVZJ32O9T4bp0AR6uMxfgrDdvz/PdJLjp
DfJhWn5X6YfzzRP2P/c44CPC9r/h1H1b6nDqvrGO0Cfwx96JqD31StCT4NSV
wG6x92viP3wAp86pvX8UPkN5btG34NTp83k2yOcDbu+k9P7Ct6deAHIF3kJ+
BuwxO+dKzhmv1evWemHewanfwfyi96gHQf1gcOoIsy/YvZ7OC9SPtHcBOl+w
b5pecvkMLQ5N65G6AlaXTPxc4t4vU08QfyD9kxea+bI4Z+VnOODy1FEPhXOE
6QHNS7g+TbBewvVpAtzelUge5ktO8DODUzcHvzQ4dXPQk8w79SLHyV5lHi98
+tC400PS7F0V7amjAW7yJv1GXQ1w6mvgHwAvrTz5+1y+PuqdLXf+H+q7NdM5
iHk8q3zsdZOcLzhvot+eU90E4quhZ7P8YOTTMz+Y8qJTzwB5GOLiRc3fpXhR
f5/4ru4T0TN2/57n0xmtau+K4Ve3c5z4Y3pG471LdQo4LzNe6hHwbsXkVnUH
uG+1+DqNi30KvIryvXOeYp1+rDyW5BGye/85iXzvrBerM6D6AtghZid3S9QX
uNud7yrqfGf5yaVXh+j9MvrBr4s1SdaRxWNI/lP3PHff0OO/WD+Wd8jlnYAP
1+g9LHU4wNuVmb/s9i5zLZ7Z4mH0PpS8oFbvVPn/oQe8sfhM/kmL11X+fPSq
5Q1TPYKlTl99I32VGPfqK/Iz23sx7afX/LK3b6FtaZFc4i/ffXrO4+cK705h
Hk1vU6cGP7zlL9W5Y2mSd1gNXTwS+Rh5FwYfHiyV8Ldgl4IPUH6h+i6/R069
Xx7hzlNrpJeG6n7B5wn3/sDR4ls90QlOPU1/j8+7bOixuuuOHvDpoien9n2L
u1b+IuqgWP0T5X2izivze753Iu/lfTqfWp1P5RPr6t5lHNe7DPQt+PqUHiUm
RlKU5/O84VmU3wy71O5Dd7y7qdM7hyJNpG/BaytPGnoeuTqs9rwTgZ/r9F3e
iVi8n/LFUbcD/Evl+eR9gdUrVj69CUn2KeqVguM3Yx+0dwcLhlVvVG+D0cO8
LNO7ab7LvPTWfoo/x+qULkn4x/B/Wv465U1dnOQ+FHlgvL31XfYRxvumvptH
37M8XcIba14s3kPvsnmHzjrNqncZ/r1Sde1H1Ivy75V8/DDvAjaRt5Zzt96n
UMcOPGftxLsk6vFYXiDRQ/5biwdQP301HvCMag+dV9wXJLGXqCft29O/5Q93
+7Vv798Z0f+IJPfa1PG198WKC6JuqNUHkf6En/bORXFu1DFFDu+UX2Wty6f0
uuvf4px1TwofaE99bb6L3JbU/a+P+2VcyJXl7Vf/jBe91030PCj/m+Xllp9h
j+QE/BPZ8+gB2y+Ud5r7bsa1X/VkqStm/mHpjVNaj9BJvWMfJ0l+P+SB9tU1
L/DT7n3Ef+qiMS/URxvt4sSov1ZRfLA83uID37XzjurRsI6YF+p/kSfQ4kvD
9WfNjm0ieW6RxF5i3dE+onpSa5P4peGD5e1RvR7mA/pZp/mdPdxC9NCe+X1V
598CTg/PkT6kH/BH5i/MXCj9t3aOBj+r/TS/209Paz9lPN4egB7GdUPn0eU6
1gvqrNi9wLYidaZWDvynng/07+tfhOtcH4i0eahRuSd7r7fvgk/Mu/W+sTN2
2nfBr9b+aHaG8NfUD+O1fD4zH7g52nlUUFdA+ADx8yq3nz6p/TS/23c6Sp6N
fv2/tfKvGj3C8bvCd8ZRZnqCHvqxOFjRz/fAx4sP9G91bdSe/n08Ff2Dn1C8
q9W1F77greH1ir6XFuQDEl5E8853wU+qn2TvL8Ly9L/295Ac+PxdB67Ak73L
sHOF5rPi0DvX3fnXTOMz+nPrM12rPPXULqMTfLPin+kf/KBw1g//r4n8P5bP
V3hT5kvjAj8v/jAui89Xe5NnyUnZb3648aeCQf1lcOLNmBfwJySfJs/4Mz9Y
nX/EkCM2Tm8nMC76y6720An+oOihPXxq6fgA/qzjQ1CPPswHiwtSe8bLOrvL
1Q23PLHSk9CH/szsxsX8d5qX0If0z99zFHhh35AMu4J6i5qXZZp35Mznt+S7
4F2lB+zcLn7Mlj7hu+BvSk+G31kF8hyOh7hyXXh9a3ak8CzIiX7n/9Gefn39
HfjAvOxzfPB5xmgHPl36zfKU6e/ThDOP4IfVP3LLuFdr/4I+/j7Q6WfmC31r
+RPFb/gMH+jnWjfv/n6Qfvn7T6KT3+18qveAjNfyvmod0Q9ywjtNW78aH+vL
6l/o78gzdNNfBr3PsnydGndZt06ZN+xz+Av/ocf0hb6D3uD/M2/0w3igh376
Jzm/hN9hBvSE6+IEOPT59630y//zdpS9D5V+oF++T//wB5x5tHURWpfBPmXx
eJITcPorJLmCDvAmW/J1ylIjkEP6x46yc77wr7S/W55EzW9e2Tm+Tsqjosf0
ufCCoof5gk+nZO/ZfarmvZnoZD3Y+yP1Tztw2jNf4Afcuqa/XKLH7EbJOfaM
2Y3CsTfA+Q72BuOF357PVr/SrWubF1cP3e4pJCd8F/5hR4FbPl7Rw/fA1zv7
gf/HvsN8+3hy06saB/aD3Ythr6kffje9oX6Yb8u7oveJjMf4p/3R7llF1/va
1+wcrnkblXNn2oSeKbHwvuj9Nsev2L9MP0iuB6ofq9vxr/GB866ID6R/i1cR
ndBn92jqn+9ZvXGHmx91RsIOt/UjvILmnXnx7z2ZF/AbtX9Bv69fCd3gX8v+
5//7c6v5c4XzjtLsQ43D2xWWH8ntj3z/3UUVrirf4gtbR4zjjM6JVj9MdGE/
w3/o+pF9X/RZfOyEh7ftaBfco0Cvt+t8vScbr76zUP2bHmEdSP6hn3G/ovOy
2b2c75zcGq5553fovVnnRHsHK/kdoX7A6a+85tHqzOnvtAenH+rqMk+MI5v2
d5MH8aGrqy+fbB+H/u5qz7gsbkHzAh20b6Z9Myyv/8v+dP7e953dSz8v6PzF
dy2/lu5N/g844LCP
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNnQXYFcX7/s97ztlzzvarggomGICBWJioqBjYXaiArSiKrVjYIrYiNioY
iK3YLbYYWFiIgorYjfW/P9zzvX7/63r3nTmzs7Ozs7MzT9zP83QZPHT7w6qV
SuXnvFKpKb01qVTejiqV8Uq/V8HstkrlKx3D0krlCJ3ft1mpHK784cqfVVYq
h6ne5ap/qNIN4krlTDV2a6tSuSirVM5VncFFpXKU6g+jvsouU73zVOdO1Xmx
Xqm8oOMLtb+P6uyjOheoftyoVB5Wm4ur/B/VPUPHLar/oOqOUH4JlT+j/NM6
piv/vNLndMxQfkelO+hYVvnxumZJpU+oz/Pp3iPVfhf1+Umdf0LHxzr3m+67
kco3UzpXx+2q+7Pq/KL8hirfVOnfOiao/BeVX63rNtVxl67tG+o8rnRd9Xd/
9e1elT+o/IJtfp7tdU1fpZuozrPqw5Hq0zsqK5U/UeVfKS10nKD8l0oH6Ois
OmV7pTJR6TI8q+59ssZtnNo9SelVKt9Z5d+pvF31h+var5Uup34tpPJ99Xs3
3W8XpcfpXpeq/ssqX0Pp3qqzuo7N9PseXXOX6pyuuqN1bgn1/0ClS6v8TpXf
qbSjrr9A76OD0uv0flfUda/ovmvrPe2udr7UvFlS9W5T/WeUP1pHB82bDZWO
VX9v0PGgzk1Wvxtqfze1P1vXZqrTV3Ve0vlN1eYk1ZlP7ceqs4fqTGAslL6t
+37Jc6n+4jrXV9d+pt8bKL1d17XpWE3XXss80z26aty66tqP1MeK8veqzVdU
Zy21tYie80nleym/V9Pzuab0VZUtrGM//V5V5zowNipfTfmOyt+n/HNKF9Cx
l+r8pzZL9WUvnV9Vbe6q8ZmlezeV3qG+vaV6Ryi/n55tTdXrp3orqOwltdNS
+T2qM1W/L1Gfz1N7JzHHVO80HZ1V3lCdW1XnDeXHKf1Mzz5F+a3UzspK31A7
76jsDuWrOpZRnabSddTWhcrPUjs36PeJaudu5oyOq/T7D51fRseOKt9Bxzkq
20PtzFD9K3mvyl+j9E/mhK75W+nyOi7W8/6ldIzuu5D6cJ3qLKh0kurvoWtn
6dwHSs9T+ffKH8846PoTdFyga3+gDV37t8boVJXtrvQBHacov5vSZfT8o3Rt
qTa/0e+fVP9S1d9B7X+kdi/QuQl6rtvD2A5WvQVUPkjpxyr7S/U66vc/ule7
0r1VvofK11fda9XWKTq/gI6FdO53pYsozXQsqHwn3o/qvaBrF9I15yn9s+b3
uwFjrrItdSym/GJKf1Z7i7Fe6h6XqKxd6XDNt0EqG6TnuEhlvyi/uI4V9Swr
6RmXV3o3a0Z479+obDUdVyg/Utd/qbrn6XnX1fnDVMbUfVX3313HTOWrqdeU
UXxDutf2vEOVfaHfZ6t8b6XTNJd+U/1e+qZW1+/1VL6q0pXV/vxq8041eojO
/aE6Kys9Ue3soHZ2UjsXJp57N6luS+X3q+6v+u5GaywiXXuTfp+nOveqzXOV
fhl7bq6j+hfoqCh/ner0K73msPYMUzu7Kb+H8mu3vC49oDqX69qa8mOVj1Rn
O9XZQXUGa8y/Vh/G69y5Os5mjuncbap/LPNcbTR1fKuyUbp2sMqPVnlFZefq
+ELZs1X+l44DmetKd1Od/VjjlV+l5e/3LuUP0DjvrXt9p2saKj+IOa/yIap/
s/KdVLawjkuVn0/p53ruN1X/RM7p2q91nYa70oM5rLK66nytY4TykdJjmKeq
f7J+j2DvUN1pSnfS+FzGfFS+g579EuVHK7275Xn6rvrQSd/OyKrXhT1L5+dk
nguXh/nA/Dxf+euUv0/XPqr0c13bVeUXqvwx/b6fNV/pHJU/xLMwtrrvCTqO
ZR9X2w+o/BXll9Bzt6nPo1Rnon73Yk1kPVf5pDC2jPHDLY8tY7y/6l+i+p/r
3D0qv6PiNXcpjckF7IMtrycjVX9ZnRuoOfe5yrspXVD3/oEx1SD+rd9n8A0r
/Ux9u1JtrKx1+73Ya1EH9iydm65rl1W6vcZiDbX3tq79RvmzlH9Z152k372V
P1lpU8dlarOhdH+1M413rXZO1O9d1L9F1X6b8ufX/SJn6vprdN9lVH5J7HXv
av3eU+0vquveVX/30b1nq50eSg9T/cNUZx3l90u9b0xT/nadP13H0fq9lp5v
LGtIxWvkFWGdTHW/G5Wvqf4BGp+blG+xzuh+W+n893r/j7LuqzxV+rCOm5VP
lD4S8nwza0duZ3Plh6id8crPp/Ovt0w33ax0E9W5TeVHqc5joU3WjheVv6Xq
fe6NlumpcUr7Rm5nd+ieyM/Ds8zRM/ZjTqnPm6l8gsqP0e9foeegzXR+fw6V
3avnO03PcKrKd9XvA1R+gNKPde1Kucu3St2vEaFvEwKNR5sDdG4A46S2f8s8
529V2WzlT2JOKn8oB2Os9g5U/kDlf4xNP0FHPZmaHoIuelr5g3Ucovxqqj9E
+SHKr6H8HVXTq8cGOgx67CloW51raUzXV3p+4vexvManm+ZLAY2pen1Uf2HW
J9XpFfsdn6c6t8Zex8crret4QvV7qvyNqtcr1vpjdf409gHl++s+71S9jsyK
vIawHn2sfnSHbtR9zm95PYyVvhl7fcyUH6VxPl/Hemrvh5b331zpCfp9RpvX
yo/D/sme2k9tdVM6UX2eX/fas+q1dXbide18tT2MfbPutW6c6o9V/dPUl1nQ
5errBrq2s8qvV/mNSp/WtQuoD08qnV+/L1L5ZUoX0HGx8pcrHaNrh+p8F31f
26iN9xl3tb+Izt2gOjcxlpnXv//0rT3DXgFtUvE+9lCb58Rc9e8/5XfQM26r
Pm0N/abrtoQuV/5UlS2k3++onX9VNkn3vYr9ExpYfdyu4XX076bX0XOhY+mr
8i8p/U7Xj1NZrn6uwbeje22jc9+qfFPmqdq7XmNznY772VNj0wQXKT09MW1w
ma4/SM/4g+7zoOrMSUwH7aj0dl2/iepsmJofgC8Yr/rd1Uapujvp9xbhXmex
wai//+naSTrXo+X14DbVf4w1QsfOOj6OTQcuqfM36mhXfqLqPKL7Pa78iio7
A3qXOaDyserb6jp2UP/WYd+FF1IbT+lYX2UnsM+qbF2+X/Z+5jZ0na7tqeuO
V/kA/R6uehuyJ0IPqnxz5Tfjver3GswrpaNV3l3H2vr9rNrZF55N6YF6pgN0
DFQ7W+gZjld+Z9V5MfOedY36tY36vxXrqdp5T+eX0rGP6q+t9l6uel9/PzKv
yh40oOlvvE3pwWrzDd1rFR3Pq5266u+idjbTmK6hssmaw3OV/qmjj84toDrr
KD9OffsH3oI1UO0/pvprwqOq/nGRx+Mt3eMnlS2nfqygemOUPsNY6nhS9d9U
vceVbqdreqi9OZp716rOszq/iY7FS7d1jOrslPu6yXrunaoej+lqfzOVL61r
v1Hdm3Tt8zq3o46t9VyTeRYd76iNqToG65r1a16HD2FOKv9iGJ+7lJ+q/P5t
pnmGKu2o9p8tPHbPKP1C43KAyn/XuDX5RlX/IJXdo2sPbvN+v7368hx7vcrX
VPkLVb+L5WPTAA+q/D6VvxL6MFu/hyh9U/39tWm5wq6qu0HNdO2hXKtn21bn
f1MftmEN07nd4P1i33eurtsaWlZlz2l8UvU30bGFfm+p8ouV/qzyR3Xd62Ft
naj+f6I6dzD3mattXt9WVZtXqs7jLcs5WH9/Yo1veTymq35P5lJYhz/X7+10
fW9d97z697HOPaf0I6WH6NojVWezmmm8k9pMDw5vM004gD2NtVr5L1T/6Lrp
wCFKH6r52tuhv1XvM/X/S+hFlbUpXU/lHyl/JjShxuQuHd+rjV907iyV76dG
t1Ibe/FdhPWddZ71a2ONVy/oQF3TV9d3hS5LzU8cHniKWS3Pgf+gh5l/yEx0
z40y84X3q/7TNb8L9qGnlH6qe52q/Mmqe1Lde8xvufeYX9l/6+YDj1D5M0rf
C2v7nRrDMco/0fI+x36nZbWytepcFeosr2d7oua9Zmn1Z5rSM9SX2xO3842u
XV3Ps5qOpXlm1e2sYxnl11LZGjq6Kb+20t3U1oa6bhGNUQ/mmK69TWU36ZgM
z6DruujoqXPvJl6Tjledq3X0hvZAVqRrV1Z+GO9E6SpV08EPqf1JOlbS8bue
d1WV76S+Xql6Kyl/uNLL1XaPmvn9ZZWuVrWMprfqb6v0efhBlW2j/HPK/63y
5RlrlX2ceD3cXGmptIi8Pq8Y+5uayfuHDoa31Ls7qeU1+Ee+LdVdu+61+BqV
92MOK31c1+7QZvofOor3vq7SHWPzAvAET7Fv6ximYyMdK9S8B7wb+Rtnbemk
77Qr+5fezy+Z15K1lPYJ6wxrx75tXoP1s3Kw+nJQ3fPhd+gxFU5X2i98p8z1
F9TWiWrz+MLvf3j4hl5R3w7XtS8rPUHnOit/B2tkzd8m96YvzCfm0lF8i3V/
gz+o3obKT4HHzTxn11d6mMoO1XEce43aHKh2XodOaZq/vFbj8Gfmb+pVpb/n
5lk2Rgam/HCVz8jMQ/DNIssYEr49vru5OveU2qipQ6uo36NV5zH9Pk33PLXu
tjaqu2/IBc5h7VLZ5qxpGtuT9TzD1a8t9IyfhG9tjN7FlTpW1bkpqvcr80Xp
tqrzWdVrwbaZ5TmP6pudGHmsoD/WVh+uU50X1IefVH62yq9V/S+qfpa5rAua
Z9cq/zy8XeayU9SHEao7U+UXqn5f9sG66cbRGquloSUbpgWhCY9U2Qy1/1nk
7/el2OttTW0erjZ+U/5s1ctV/gf9VfldyMvYF3TtD+rD38pv1zI/DF/8dmpa
clZb4Ot0/2/1zF/Sbs1y4x7Kz6c6s2uWG0epZcUXJeZ54H0eVfs769rVlB9V
MW8Dj/MYtF1mfgG+IcvMm8CjrKd+nqX2b2uZjoSefFfplvrdC75K127B9678
a8oXLa+Zb+i6sbr35m3mwU9GnkK50q5qbwuVP86+oD7uRZ90RKr/sM59qDae
yy3/XE592Ru5Bu9az7e5zn2n8k2VnqnfV0WWvfbX755KX1XdRXWPS1R+EHKm
umWMJ1csT0R+cCAyjYZp5t7MaV27PN8fdG9iuf6GQRY6SPX/Ut1FmEs6UAq0
9GxnK72dfV/9e0R1LlbbT2WWOVzC/qJz2/H9QpfGXu9ujC2LYC1lDRquZ1xM
vzdRmiReW8fAn2rO/aD6/ZS+mnitPlHp8mr/M7X3h76PJdSnxXU0dc17qvtu
3TLiNVTnK+alvrsT1HahI4WW070LpXuq/T5qazfVfxhZETIx9eUDXfN95ve1
otJxhWUX5+pZduY5Vf4etG5p+TB6j32DrLiO/Kqw7gMdyATVX0r1n1T5/brH
J8qvBw2u/n5dsz6iVP6rmvUUO+jaJfSM2yvdV+VXRJbv74JMXukFancV9ekL
tbeSnquaeA4djHxFx9LsyTp3gsaxk9rcmLVE6dJhv7km8SK8o+om6v/e0Cu6
16Y1y69O0PU9dd8bVb6Yfj9StbyIsbghcx/e13M9p/OvIZNhndP160L/sx4j
N9a5+aBnde8+Kj9B91m69Lf2Ht+N6q0Mna/zn7Z5rp6mbkWsXW3+fl7V+Tlt
Xgve0vOcr/PXa/xeYK+O/J4iXf+j0ivUrxeb5v2vhY5T+710/VM6v2Ld8xk+
/yPVW4e1QeXTVP8alW2vcXg+d3vHJl6zWLsWU5qqPz+zl+lIar4X7/57tbkM
fIvG5Ryl3XQsp/yPLe8h72oMTtf1U9TOqkqP0vm7qx6rmzO3kemeb+t+T0Hj
6bpcdX5vc/+OU/5+lSc63kZOqKMNeh56SufXZswzf6+J2nlG4/F05N87woOo
3hqsNW1el05XPz5U/VWg8VS/gRy1zb831HjNr98dlC6qfs+t+V6nKX1I6cI6
7s68Rq2MvIU+6Oil8imR58aPKj9Z9RfWsSA8jo6Lwnf9cWbZ+Ud675HKNmrz
+H6jNmbrWEpls9WnTVTeXXXrGpNJKvsAurvmMeD6mtIN2yxTOK5pndTSSj9U
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
T/n/eN35dK9l2817rFna9wc+QKiDvTP2z+OVLtZu2fG5yh+Rmj9Ajop+emaQ
T3TJ7AeZOCpdM9sPEY+FuFaD2UMT+1jGHh5fBcSdGsS3ovdyael4S+y/F5aO
ibWW0oFKh6lOFM6xR0NfE3Oda4lhNSs3RrqD6k/I/s9POfFI4O9P0n0Xabd8
HPoZ22fWheMK73PI2Nn3OrXbPrw3/FNhmhle6rnE6z/+pccU/8dvEccWXzLE
FyKOLbF6iOFzaeYYXjNzx6WFTyTOErFR0E3i4wS8N7jetZFrlbZvWU3pUurD
8MT8frd2x4AvVN5L+c9UforyPZU/SPVf1bnlwL43HbNshXb7wBqIHKY07Ub8
5fegs1u270B/TCwu6N+zS79H3ue6uran0jNVtpbyifKnK99b+SMSx3taXPl9
lT9O+fnbbYcGPYw9FTQ7viHna7f9HrT9Kzr2bxqr3N7u+PR76LmidmPChiBj
aLfMa2WVF+2mX4lf2Ww3Zmuo6jTajbs6VPk3dRzV9P77nfJrN+3P5K/ScofX
csd3Yc2GX8GHNXQjenL08vjSJf4YMk/kpssVxhWAN+hbWE6LbHSFwjhw8MzE
vcQeEJk4/vCwR8OWDZ0gNj/Y+GxZWE6IDBF/7z+Utn1apTQWAhwD/u3BDYJF
JFY5OPjHAi7+N+UHNx3D+u/S/AM2CL8rv0/T8anB44HPw7/99NI+BfDn8GVp
v7R7l8bdgY0kzjmYRuIfEGt9ls693LIN+NfMgdix4PFtOLdqf/KDU8c745sa
kHmNJ67OOw3LdpZmjQnffu/U/q7we0V8X74JZBGnVjyvVtf5S5SuxPej8udT
6/Gx50SXv1agPycltgOgHXxnYRfwGrRE6vjs6BXB6YCj6ltxXHb4aHBf4L+I
/44fBb5Z5FTEl18WfVzD/aNv25aOoT2y9P3pB7GP+Z6IDb1Sahw49wXfTbxm
5DOsh/ieBSMNVpo48viawOcEMeuRJxCP8cjwXMRUvqdh+ht6+OVwL/T+yEau
jywLIY41PuE3UP4R7Gh03fWJ1xHWE3xxs5Z+iO6xtF/u93TNI0oPbjr2GTH9
rolti1RL7dvzr6pxVne2HDMxjR1DDV19v5bHlzHBZpBYcSiY/4odWxB8xlst
8+4vBb53ycC/r5g6ZjTPg81LVx0TKu7fpNhx7K5S//dk31IbD5eOsYX/x630
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
9NvcfB+0F/zlmZntC69X+f8DE9Fulw==
          "]], Polygon3DBox[CompressedData["
1:eJxFnXncFfP7/+ec+5wzc5aZuVVIJS2KFkpUEiL7EopS9jVFZMu+lySVnWxJ
sku20OZjjaxZS8mSrUJF9iXf17PX/B6/P+a+3/u8Z87M+31dr+t1XdPyuOH9
TssHQfBCGAQF/b8gCoL/lDhexwvlILhPx640KAZBw0oQHFINglOU3zAXBKVa
EJyXBsGhqh6suub1QXCO+v+hvueqzR1KL9HRQunlKiuqzfc6Tz/1/U35VPlV
yg9QfrXyNeWP1HGFztVDY35bCoKxOv+Zqj9F9a8pPVTj7av8CuVDtT1Kx0i1
76D2A5RuFwfBSp3vqLogGKj5baCyXsqvU/sGSr+h+guUv0vj/KW5f6wxx6ju
EpVNVtlp6tNHYw1R/mOlH1Z9b9XvpuMRpedpvq8o/aqOP5SvT4LgZc3nD801
0vXfqzE2Uf45zelane8F3a8LNV6kfr/rfB/pOEttnlfZTVWPwVgzGVNttlWf
ndX3CNUfovw7mu+5Gm8npf9R34fVZ+PA1/C75veW8tco30D1W+v8A5R/Rv3z
+r+F8puo/xtqe5/uxxtq/4nOvZHyX+h8BZ3rPOXfDfyb1Su/j8ZZoWs5QW3e
V/tlGudq1X2ieRY1XqI2a7kXOscV3H+12SVw+w+UzqnsU9VvoHxrjXWj7s+N
Rd+DVPVHKr+78qcpf4vmdrzaX6N8omu8Q+fYUfN5Wv2f0PGD8pM0RqC60cp/
pPzp6nOWrqWLyjbUeEdovN3U/1Q1u1l1Dyn/uPKjNW4bzfc29f9bdVeo/4fq
f43KZ6h+b86hfE3nW636S5V/T/k3dFygsc9Q/k2lF+mel9VnrtrcqHtxgsY/
UP1XqM3xSl+vshF5P9Pbaz6TaKO+L6tvXuc/Vm32U/vz1H+S5jdD9W2Vvkbt
f1e+g85fy3lO43Se7XW+J5Ueq3Rb9f9RbbbXeFvrOnLKH6fxrlb/k5RvqPwN
+v+T8qepzes6Z0/1O0D9l2vMHXj+NN4mKm+me3ahxvpDxyVq+67KCup/lMbb
U+3P1hgTVXeajtPV9lP131npT9R/QsXP4xGa+6Wab0Htz9c136n0jzp/f7Vd
pTGranebyg5R/gflK8rnlR+u9M46HtI599Q9Gp/znJdqvHllv9ufasxH1L5U
8bvdWuOfor69VT9C89ldfT4P/Vv8kNW3V36h5neT2g1TfpHGPkbXs7fGOkfj
36H591bZRWr/jsap0/Uerfq9VD9C9bep/irlxyi/l/I/aj6/aczBaj9N5xyk
Pn9q7Ed17o+VP035i9XnHbU9T+e7ROkmms8nLI8aoylrl9ofydqo/Casd+rz
uMb7Vv3P5vrVZ1OlSyp7UOk+Ot5W/64a7wClZ2sO2zF3jXGQ5h5ofuPU9neN
d7DyX6vNoco/q7H+07XnNN8vNN6D6n+E0uerfqTybZTfTemXVbZc+VTv9FzN
ZwuVfaW6gSrro/HOVf5SpTdW2cZKD+VQ/hmdv4PSz+k8A3W+Q3T+Xuq/icZb
q/rH1X640l0037kae7barOG3VJ9hqt9A/fMa/39q843yY9T+Ed2bLdRmH6UT
tb9S6fPUfxnreZ1/j3vUvpsuu5Xqb6Ze13+ezv2+ys5VOq/6r9R2mY4jlW6t
NjtovKraj1L6Ax2XKf0na6LOt5fyl6ttY/YspV8Jfa56zfn5ive975S/WvWP
qv1XmsMA9X9Gbdel3p8K2X52u+obqPw21kv1OV/pS3SwcW6mfDOeF41Z0Xzf
1vg76dp+1f992Ot0jf001j5qM1pt91f+M403Q/n+qv9N+QOV76P8tarfRudr
wXw1h8Yqv0f1hykdaIwD1b6x8ocrPU9lG6v+buU/0v25SPMfq/4HKN9N97+t
8l9orNdUNlbpLzWf9hpmD40xXeP/rvx+Ss/Ieb/5T/kDlN+Y8ynfg/dX7fdX
2ZNq/xnrqcZaqnwde77yUwKXXcT7oeNfpTfRsRHPO/eoznsO+d11XKh8TfkT
NPahukftNdadKv9V13KdruE63b/jNO5vyp/Nfq32VbVvEHs9Z+7NdVzPfqE5
TNT5Bym/k9LXsyar//HZfru/2kxQ/yN0PWtUVlL9TWr7l9ocpvtzvs7/tepW
1nm92Id9U/W3q99a9T9T7U9T2zd0jtfVfoLqu6l+Dr+16k9lzVTf9zRGV6Xv
UvnWqu+o/Os63ynqf7T6H6NjmNL/qP5D1ed0PU1V/5LKFqluMTKPxv8h9LmO
VZu5nEPHe1n7/rpfH+uczfR/V7V5T+2PJp3zmP+q7XCNN1Rjvaf6U5Vep7JP
sv34GLU9S2Xz+T11rzbWenhSxff7HY3xkOpf0phd1PacvPe7zXU8pmfiNR0f
8c5ofs9pvJGqv1/td4/9W9ep7AGlh1R8/1tpvIdVv1xlh6tuFu9Jvfcx9rOH
1eZSpS9J/L7voXQT1Z+p9udovJ7qvynrh85/AY999jzcrXE6q/92qn9fZXNV
/6DS26rNrkrPVv0xqt9U82ur+mEa79Q6X98nGu9NHYeprq+u5ffE8stDquuu
+eyh/vOVH6j6IeyfSg9R/5PUP2LPUv1UHQNUf37R61FPXeMDOt/9Or7Tua/T
8Yvmsrvyjyl9k46WvDvq30Ztf9F52xUs8/TV/PbVeFsWLPv8ouvrwvtOvfJr
lB6t+q7K36P8H6n3S27lxpk8fIbmMAz5SmM/pvrp7C/ZuX9WfjueF+WvVf4n
pZ/iN1X/Y3QN+/GuaA6NlW+qNhPUZoDKWmu8WzXPQ5R+Tfegt9ruoPrb1Hcr
te/O3qU2lyh9b2hZfXOV3Vq2HoA+MFv9O6v9QcqPUNs+GuNApaeozYE5/0a8
QztWvVa+yKH8+Jrfx9dU31nn76Trul7HUPVfqLqbdFyn8U/Red/W9dyiMf/H
XJD/Kv5N+W2/VLqznqd1ofM36migcz2h+tlqf5La1zTWHsgwOt/Fgd/XzpHr
pqp9U7VvoXPcp/RAlR2m/O0a9yX175bzHnw972zOMtl1Sg9V/QNqf7+OZmr/
tM43V+3bq80y/TaNVHaL6pap/f1q+6fOOZS1X2WfIzvr2F/pPjo+U3qMjifU
/9/AMu0uOv5T+2sD78fUI+92VP4q5Hcdx+Y8xlKlG+tYrLq9lF+sdKLruUzp
XKYfXKmy6UXvCaOUflHlFyld1rw2U/0XKjtI7a/SmJHuza3smWo/Xm0m87wr
P1P5s1iz1CfV+CPVfgL6D3u36u9W+mH2dMZU/RTVb8E7j67FO6GxRyn/rurv
T6xbvK786Ur/yvpfsAyHLHd5xWvHQepzmdJNNN/JJV8z1z5dbRroWXmMZ1Lp
YzV+Q3Q75TfV+Buq/W1qv63G2Frtf0a/0tjn6+il9tdofktLfkcOUvrSip91
nlmeXc7/kPLzAq9fV6vNOGQs5c/XfFsp/6D6n87zyLuUev9srvPuoPv5LnPK
e0/+TGXjVH+IxrxAYz6o9mcqfafSD6lPS417Ae+M8nvq/OcrfYv6/5TzO9Cg
5vp7VP8MOqHa12nMK3T+jXLeUyeqzVqlr1d9Q6Xfi702jdSxD/11/p1Uv1bj
dNP8/oqtCy3XmLurvqXGe1jj3cVvjH7CO8DarfG6Kz0e+RuZUPmLNP+L1eY+
1c9Wvp3K/1TZwTzvKt9G43cre+3pr7KvVPZlZNl3R+U/UP5ztY95VjWnzRPj
Cd1Uv5PKPlT9R+jHJcuE/ZQ+W/Xb5i1DXxFaf5ijdBe1eYc9rmzZr4PybyK/
aszpur7nWLs092uQt1X3ruo6aX7fqn4jng+dfyNd/6Ea/0Z+C5W9yniqf0z9
P0Df0706TPWtVdeKPVL1zVT/FLoq+4fqv2O9VF0PHe9X/KyMU3q8jrTqg/Tp
rPmqu1BtxirfScdbSm/Jfhu4LFbblRq/hdI7aPxmmt8K5TdTPkSm1vmKqZ+f
M7Lfc6nm11Z13dRmgcr25v0NPKf3lP5O/RuDs6jsBqXr1H+o8j+rrqv6942M
LwxR2RqVfa02jUqWV+9gf1ZZQ+VHB5Zfr9b97qfzddcxRulxOo5S/ZE6VvK+
KT9H17pE/R9U+38S4yvgLNvqfDfqepuyP6n99xXrF0OUH8hvovSdNct7p6nd
55rr+IrxjuNpo7LHEmMvYDAf6X4clFg3Gcr8lJ6i/ncrfYba1nS+u5X/h709
u94aeEfJ95x7f7nmuEfJOu9GarOhznmt8juqT3PkR9XvUvIz+bHqX1P/kaht
6vuW2q5g/1HbbVT/tuoboU8r/QD4luZ3sI4eulcLlO8X+317RPV3KN+CdGLd
dP/QeADy3DTmpjZvaLyOqn9R17eFzjGu5vcD2a+X6heCp6FzKV0vGaah+m7A
M6/8I2ozRuM3TP08jsvWMuTzTTSfqarfTenNNKePlH9Q/d/S+PvruJn1Wufc
hb26ZuwMDO0rjXeS5nOY7tWT6j+u6oP0iZrHhxr/Q+W/zfmZWYYsqvyVqv9G
ZZ2U30bj7ad0K405VnUlZGy13Qz9V/XvKL+nxlqlNjeqbS/NL9LcftYxVeld
dc0D1XYS62HZ78PJ6t8FHUP9b1afNZwr5/WwveofV31bnaun7u8w9ojQa2xR
420eWZaZo2ObquWP1arbOuf1d2TVewt7zBPK36NzPKO2W6t8R43Xmz0f3UjH
U6q/mv1c9U9lGA/PY6C+22u8JuCNKluiulUqnqB5rFP+YrXfW/lV+n+Yxt++
aMwNeXWI2mwQWgZBFtmq6vPP19EitPxzmupmsaaobpGOu9R3ncomq32q6xuX
s4zfpup9n/0fGWbTqn+vm5X/VW1uV/tPlX9K+bM056XKLyobH7wLPE5jzQqN
3UXcM9Zb1k+wNV3/MLUdoj538qwoHer+LCs7f5eOr5U+XNfXS9e3nfrWq36F
yh6hTv3PAJ+req0ZrvMv1lhzdWye9xreJPUYjPW7ynJlr/Os92AwYDEr1X+i
0p8rXdL4n+r/rcpfqvb3aK4noxPo/NMD/557aR7HF72nXAGmVzHGiXzB83mr
2vysa++so1HN8hlYSXflD9Z4vyk/vGT551fkN43/pc7XXmVPI2/UjH+AKW+t
uiQyNgiG8T76Mu9w0e/8pcrvxjOUM1b5sq73s7KvZ5rKWqK/sUaxV+h+JbQH
u+N+qs3mSv+l4xzVL9F4V4Z+37gWZKbHa64/t2QMAyzjfpUVuTdqc1/NmDBY
Lzr0cl1/rDlckj2f+yv/SdV4ALjAe6n3z4La34DOQpmucY3G7qL8ARrrCb0f
mxWMcX2tvhPU5w6wbtU/qbpvav5t+I2+V/2mKlug/J66vp1VN1VHXd5rOu9P
X54v3YuF4Ooa64eK9xL2lIOVfkRjbBJYl91Jv/+jKvsM/FN9As21Me9HyTLH
CHQB5qi6H5VfrbqNdNxR8jOyh/o+qfrHkf005/d1vrtU9mrRe2ZDMFuVncC7
xW+qthuzh5W8B7MXD1XZUzm/A7wb7XV/nld6MJiarvVN5b8tWkcYpPQrOpYW
rbPtxNoBJsvvnTNmcRQyYGj581jVPav0wwW/Q7xLg9TnPrX9TtfzLbqs8lOQ
J1W/H3uj5vQ660vOOvu9KsurbQ/lm9JXc8oV/EwO1Vwur/q35Tfm+eA357fn
meHZuU/jvcvanTOe8R0yk/q31ZwfVf3LGuMT1W+gMV5UegNsKmXvPw+pvgO/
udrO0NERLEJl9Rq7d87y/Qc63xGR16QZyj+nMeZpvNuVf1bpj6veS5toTu31
e0/WfOar/lmVXaiyd9XmB+U7K39oYpkU2XSMxq9o3BR9O+81kPfpHbX5Xu1v
Uf2/7H9qP6Bknffg0PLMelkHfSa23Htwpk/cChaKfpy9L9dp/MM1v0FKf4es
o/ltpTH30dj3oNfq2tqpfp3O9xS4ndK9E2NnTcF3lT5RxwDVH6pjcOI+9H1T
+YuUPkfpSUXLFMjv7VnTcr4HM+kP5qqx3tBcvlX7V1R/A/hjnfHoU8q+N+8r
f6rSX6rsEH4/jTFWbT+vWda7sc54+PcaY3P6qOzFmvVl8OoJGuM25COd5zb1
PVLtd1C7c2Ljg+CEK1PjLavV92+1+0751cqfWDCmvpbfXuX91f5ztVmrdHf1
OxjsjvNFxtc75I2BgoXeBaaJ7q789mBzrPFK/6k2hQzPZ+4b6ByTwVpqxk6v
yuwl76n9w3nbDHpo/mtVdh54r8b8SekNYmNVYJRglezx7PXPgjfH3v83VPpi
lY1Q+mFkRqVnZHjmGOU/U//Bmuebqd9n8MdD0D9D42tbqO0o9bmAex9bVpyo
/KWxZUhkyRE8y6nfX/A29vhJSveKLFttk7N+/QPPVNky56s691lcD3hsnfWJ
M8vea7GpdasYEwQ7A0PbWXU3xrY3YHdYrrHGgp8ji/DMqH6u2l+KLq78tuyt
sfF1cPYH1P53/d9R+fk6/9fo/uD9yvdVfrTydWo/BawYzEjPZ075yXmvWaxd
V6n916x96tMRIEz1d+e9hrGWHa8xLquzzAXev0fZ975Bne1H36j+VLXdVfmt
kF0o0zC9ld9a+bGR7c27Kd9Z+RwYp9Lv6hzfRX4+sKU1U34W6x1rUt4yALLA
fppP5zrbNr7R9fYCk62zTW3Xsu1rBaUrSq9Q/UEa8wzlQx1x2fY+bO+HgYEh
O6osytsGhi0MnQndiTF3AdPT/Dvxe/GMqe4WcG+eHZV1Vf0NVeviU/VbdsAe
qrI2Gr9nYDzyZ2w4ansgz5jyz+g4UeP3UFmHsvEGZN1pecvDRdXvr7oPlV+h
9HbgecovzFtefS+0LnmN8tNVP6Js2xc23+7sBSp7KG+b4/YV48vsx9gEkT8/
5B4qv0h9xut8P8MfQDfN+X1fpXv2rtay6dxj1Y/inaqzzf879I3YfdlT2Vsb
Rral5XTczVoQW1d5umL5YI36rMqen0NrxnvA918NjG8i0yLbjlXZYl3Lf9h0
1H6wznGSxno1tmwFXtNC/ZfGxg+fwg6i8fdizVZ+rfpsxdrGO857AoYXez2c
hH6u+9GpYh0LXes2lf2J7KE5HK0u88C4I8sHHcCrwFeUnqMxOhaMkSfIQmXv
J8/nvL7NArOlPzauzN4O3tw/MP78Ktenc73O9aj9X+AY6EbcD/AbcA90Hd6v
0DImsuZtGuOLsvfrwyNj9mD38CDgQzyno3+GR2HfOUHnGxR6Pq+q7XWq31vz
fVL51qp7WWVXqf9n7G/IZhrzDd2rzhVj80+qbEu13UDlnQLbw7CLYdcFG/xR
Zf9Tvl9k3aaXjsU6X9fE9pOXNc4CjVcrG6v9I+f3DRsMtpX3C8YEwD3AP67X
sQGyQ8VYGzranUpvFNsWjc0U22nP1LroPpHx6E0T8xfgMcxX/je1uVD5Vhri
l9h2d+zvY9VnDdhVzbZAbLbYbl8LjUWDSe+u+h01xp9Kzyx7ff9Tc/olb5n4
25r3zG9Cj8Fe+qPyncrmiFwBdqo2b6Ara6zXVddH/fcJ/Ax3Yr9S32OUf11t
tovMeYD7AJ4JHoVN8TfwxYptjd1i27qwwd4Um1MCt+QQdC1+j9BYLpju/tyT
0HgI6+N+kfGEo3TuB9RnpNJ7qezywDo19/Attb8isI6+b2ROA9yG88BolP9C
c2il/2HO8vh6+07eexJ707E88+znmvNmFef1L5itsuOVvj22/Rc78CMaa1sd
E/Peq5Yofb/GvDFvGxC2oAfQ+ZXupT6Hqu9itZkZuexX3lX047xtStiWsLNg
b1kT2J4CX+cWZOE6/x7LI6+drF+sY+M1j4+Vv1LXE/Iuqv2b6ts22z943p7L
24Z9XmzZOFX6EeajdEOVPaP68TpWsR9pzEaBx1wJd6Fse9CmgflLPP/sNXBY
6sEHal5/kMWW6nxfKP9t4DnDL1pRs+1+c82vXunTqraVs6fD37lA+bHK1ym/
o/Jv62ii843XeH+n3q/nZ/fzavbeqseDEwBf51F0aOX7ad5/6FnrrPbX580h
uVzpp9Tn2rx1CPawGepTlzM34EmwG/CLvHUW5J0nIt+Lt5Sfovy02LaGXUPb
vxap7Gm1uY7fT+dbjkyhdOuc+Ulvg38V1tMugreUXqY+Iet+3s87Nk1sm+Qj
5IOasQb2m5OV7oF+lPEduNY48rOwJO/3vbvqgzqfcxhYIfpFwdd7JteqeS7K
e09lb2U/X6b84cr3KJvjANfhJQ3Tquz1Hln2ZHRs9f8rsvy8QO2/0z39hz1e
+Q+UX16yPLxC+eP4vdS3p+aTz/gP/LZf8QyElp9GZPsvsvYLyi8u+R7w7sPD
4N58DO6iuXya9/u5m8r+QlZAV1D6jMi2nJbq07xs/h/p8Tr2Yy2s+d5zT8DT
OSfyGnIbc4FvAXYJ5wTuyaU1P4vcY/B1+E+cGx0AXeBC9rA628SPioy/ws3Y
mutjf8AmGXiOXcBfle+r/N+sAZy75t93Xd72/CYar7n6X6Nj37I5H3A/krzx
1O1itx3Nb1C1PPm20qdojH9C23Gx5yJTwmVkv7td9QdojMNjyzA38P6Flm3Y
g9mL+Y1+j8x/e4O1C/kKPCkyvvGWyoaq7UassXXmf8ADoYy6tqzxyt/NnlBn
++OVuraB5fW3OnhMfw4rW0eDHwFPAt3t1Mi6D9fctOxr5trb1/l54zfjt2uB
zBVafjwqZ53xQNVtVvb6BYcFLgvng0t1gtr8Cmav8bfMmwMDF+YLPT/tAl/D
yWB36JDsrYHXk3/Ac/K2mWE7Y79sXGedkf0OzAbshjX/OPAKlf2k9O8qm6L0
Bxp/pvLP6Tia305zeLLOv8/f3PPIe/ErKhvMsxOup7qub3O48vcgs9WZT3dt
zfowWCYY+Fclv2O8a+gge6nvnbG5JFuyp6v9iWXLNrzDv0Re/xuAdXBPysbA
wMJYg/+rWUZDVrte/ccovXfZut+cvPlCByh/PfoUe15kjASs5Gnl69V+uOo/
Rd5W2X+RdXZ096k546+sMaw1revMLyrH5nKdrfwZSsfIBHnrHA/WrN+iq56p
41P2Qx33Bm6Dvami44m81+AfVfdQbGyqZ2j+AvohutOROq5Bv6haV++n8x2h
tp+m1tsp+xs8Rwtvd/XfU/02wR6jNk/mjfGB9cHBg4vXFRkOrFT1C+ss0yDb
pLHvBTotuu1lvC911pHa8Gwqf1zeOsOAsvdk9ub+ZctO7KnsrXCUsH+gI9+i
9EFl686f6fggss5Xiq2/Hq37ea/aHKw2V6luSp112vasYcofpLaTle/H3qs+
05U/Q8eSmm1Y2LIoi9CVa15LWIOQ53mf+K3YE2dorI5q+z9d6+Yqa5npf3Cb
7lK+b9l8TOp4RnhW+E35bct1tmdyfriz6JzDY8s0yDasWU1i2wywHbTRcY7S
B1bNR+6a4fFd9L9H0TaIbSq2RyCfI6enqu+o/52p07FEY/SOrJv0KZqPumnZ
a8dM3rHIGCVY5Zua00Xsn8q/XrKNZAu4MRVjg1vDUajYLoB9YBcdq0s+SN+r
+fcJzS9E/wYvgosJPxhZ4yx0lYzvCh/yXOUb1Hv8reArwYHSWB2UH5nzNWzF
taTGh3cM/z9ePEL1n4PJK12HTFo0x3V+2ZyOZZrvh9jzlX5e9VeAtyr/WMV4
G3vv/SrLx9ZxVpfN/0b34f61VP9O2fm/V//hOduEsA2BEcWsozljRzcrvV3R
mOTjFWPEYMW7qDypt06JbskeMoS1oWRdZLuM/7BO+WuL5gygnz1Q8dw/goOg
dAH8qOh71E75T8Bh4QIULB8tUL6hxqtXWXPuXWI+Prz8Zjr/KTVzC19C31Ld
3xXLY5epzT8V6zXoN32L5u/tkJq/DI8ZfnM3OBjKz6h4PRii+TQHr9fvfavS
A1V+ifIXF83/76/jwqL5FOD94+HPKn1Cxf4J6OMzwXZ1/KL09rrmc5CFdT2j
sfcm9j/AD6FpvfEEuFuD88Yjdon9LmGDxhYNf4drH6U2pcjPNM82c2ytMdro
aAHWqv6LI/OFQ+X3xgYDHppaT0ZfHs67XzZXqqY2m3I9muNxgXW4C9EVE3Ot
JqpdrPltjE0/7zHhH8OxwdaEvRR7D/IktsRGyrdQftfYWB9rOGv53uBDGruq
47eq/R+YC+887/77vIdg/TrnKzzfOtryW8EBU/oY9H+df0uVta0Y0wbb3lD5
lspP17GiaA4T/CTWSNbKQ/JeH3nelAw+yN4X+COzlL9f+Ut4VnR/pmkOFynd
Wtf7vOa0G7qM5ngMuktifBucu5Xqe6n+8pw5PeCzfyu/B/KOyk7g/saWZS9T
/o+abfTY6r9E/k6tI6Ir8o4jT8Cfgstd1tEM215k297LReMBE3W8WDQnDHwb
DhtcNjBrfACO4h7mbINpCBcUjCtnm2TjxPZH9uq/1f851gv2KGz7Onrye6js
Ft5F5YdVbPNboDZtAtsC0T83DLxG/IYtL7KsB+fspor5Z/CL4Rm30/3ZWe2P
z5nj1x+sompuFzZFxtu15mcZzhV4BTIisiKYIHz4a6vmP8G92rzeMgyyDGsc
eCDPA7LWenlX+dsT84VOZ12rt7yL7juY90/nejHTIdDvBym9ZWrbCzaTdkov
TKy//MveV2/MG+y7p8r6K/1sxfgEewZ7B5hLuWydBiwGfOtWjbeKZxB7nY7V
RXNGm0a2UWOrflLXOzM0JgE2AebYHN0ReV7tJxdtL0JOQF7gmQcf7gTmyf7D
PVH6q9B4K/YX7DBX6xq/yJmj0UHzObfqPHsQ/hbYq7AXnp7Zp7qBj2k+80rm
VyEzIDsgYy+LjLOAt4CBPwt2ojEm1XkN+Llm3Az8DI7uqrJlAmSDPfOWf7h+
5E1ssE9hD4pt2zyB37hmvItnG85/I81pEHgh+GW2Bn/LM1oy5x8+Dv5TyGI/
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
8Srgb8LjJD43+DbrAd+n/T/NWCBf
          "]], Polygon3DBox[CompressedData["
1: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
3//5em4AfXD/B7WAym8=
          "]], Polygon3DBox[{{2929, 2928, 3974, 2868, 2869, 3975}}]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl01toiGEcx/H/bOawA1aUaEspxbhyutiGhS0bjdiK5WKEbTlNDmPEhYar
JVEoYuR04YJF1ISSC61s2GYHK1EuXMghc8HnTW17/t/v83v+z7Pnfd9pNTvX
7EiJiD9+76RGJPVC4yZFUUbEeHxMvUidp640dwafyop4oZ7D/R4ZcZVbLFOI
t/HbMyPauF51OZeWHrGXe8ptwO+zI0ZyHbjY+jruA5fN9XPlXL1+jfwXXIGb
8AncoOcw1+oM39TnuKwREVusr5K7jj+lRTyyXy7/V+Y+145n4+fq77LF9irC
mbKd3Hm5Qlynx9xREV3cYjxP/UZ9wfwSvGKss8m85ZbqsZSbL/MOX5Q5Ojpi
OZelbze3TOYYV8L1JP+79aXcCrxbn15uKjdGXcY1GBfo955fhffhhbgPX9K/
gmseE5Gjfz+3Bq+2fr/cAL4i02y/tfxEmUHuBF6HP6gHZFfavwpPMj/EtVpT
iVvd8WtcoD6rfqY+aW4WvuG+0+XvcfnWP3CfU/hruFHmFs7AP9VnudXueKoz
7UrOi4dwjnWfPbuvMof0P8BPltmR3KuxlqvlXsmctt+g3Hpcb3zCtXD96jKu
y35brCu0rgAfN67lLst1yMzmSnELzlW/tP9HmSO43fy4ZN54GOfzPc4mEk24
W22rKDF/EM9wZzNlMpP31JjqPhv5jOQdSL4bvA8/VotGnj8T5Kqdz6OK27gP
75F5KNOp/+jkW3Gfu5P+5l5zHnPswhstapNLT97B5Hviqrl7atEYFqzjpoO0
5Hnxv7it3F21n/iBN2NHiJv2fyNbk/L/O/8H6iV6WQ==
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzzszQ1EUxfGtYsZzaMSjUGsMVZD0lBlC2pQKahrGjBk+iGfiUSrFW7x6
FR+ASUEYUvjd4j9r7bX2OefeoeJSbrEpIorItkbMdkTkMYNUZ0S6OeKMr+AC
50i3RXxioz3iw862c3m+FylUdactETvyO34cE3ix+0V35XP2+tCPTfmkvI49
3T399s5IV8Sqrs4P0/3kPvsL/C+q/GuyiwPduvldPk8LeEtyOiqrJef5jOzS
fVfJ/bKMN0rOXpsH9IPI2inoKijrfnRTmMaTviE/TL6T7+Z7sIVl/Q2OdLf0
Qf8nf6RlrMiOdSV+TT7m7Ybs2VzDSfJ/5n+DuT+D
       "]], Line3DBox[CompressedData["
1:eJwV0LsyQwEUheFtmFGE8AQiwhNInxH30RhV3AoegE6lM+PuOWgw7pdWhxhq
NDxBXJMYxpfin7XW3uvsc+akZ+fH5uoiYga5RESpOeIdb8g1RZSxzHe3RDxi
gm/DElK4ta+gkNRvlOk1bjCOZGvEgbs9Oh/6X/hEXq63q9IV+VBnkrYjjXXv
urMbcePIrsiPmm3gWO6Vr/iKbhV98jc9sSvTBrc7aAYvdns0q1/CLt9vluLz
vnmAf/bcK30y+6Gn8pReJ6bRhUHzrLt/vunM/pcu6G9ihz832679B3kLi3yC
Xpjv1/4pf0+L5g902L1VuoZLnSH5H2f/PSw=
       "]], Line3DBox[CompressedData["
1:eJwNzUsug2EUxvFT2n6qLbZgItgAQ8wEEwmpIqTNFzqgm5CYsBEm7pcBIxuo
SGcSE1X3FUj8Bv88l3PO+w7Xmou7mYioYqoYkR2ImCtFLCPKEQ+DZliSR+WO
nRU+w+fsnpitoqIb09XxZmePruk7SPkeVO3k3STo2nmUZ5OIFm3bW6d3+mmc
yu90U3dPN+iOLj8U8SG3vdGHAmpmz4WIT/0rf+mvM7sNXPBf+rp+Qj7HjHzk
bpIf8d4x/63bp3/9ESX9lbt5uWz+Y7bA9+qKNEtT743TF7u/5lvyjXyLazT1
idttfQMHukM88f+cQDDn
       "]], Line3DBox[CompressedData["
1:eJwVzUkyA1AUheFjRCrSaEszMqAsgQ0wpGJKEP0EI02ViQ2wB91MvxaSCPZg
Aap8Bn+dd/9z676JxkFtvytJDXvFZKGcLGISU/gpJLt8qTf5LCXf+K0kX3KH
7+Wf7U1Xk1f5gm1+3s4d2vY6+MAWP8fdomV+svuITf6cm3GjIi+5C2zwN+bZ
f4eGud6drMsz/7bQ5Jewxr272cQpX3Br3I0xrOpG5Ciu7Z7oh72HUNcNyEFc
6Y51/d59WNEdcj1uVc1HuiKW+TZ/zz3gzZ8VWUYHf8oVKoM=
       "]], Line3DBox[CompressedData["
1:eJwVzzlOgnEQhvGxMooCNxBK3FBPYa03MLEikQixMHY07gbE6EWkcsN9wRPY
KDRuPbT8KJ7MO89M5v992ZXi0tpQRCyjkIjIJSMmcTEeUVW7qYgb/nssIolL
vsb3+Cb/w6VQ5yrcRDrilv/l0riyn+FOzO/4P27RXhXXZmf8PX+qbnI1NOQH
bh3b+mPk8agvoy6vDkdsDObu7aDFPek/3fxCG3t8iX/Hs9mufsrtaRzIo75r
Rn4x29fPDv5rJOJIzsuv/KE8Jyfszqsf+jf+X91yN8ef8x3vLagts7baBwkf
NHE=
       "]], Line3DBox[CompressedData["
1:eJwVz8cuxHEUxfE7KwvdxkYbI2FlpbdHsBBLnSDCKBE1enkBvS+1J+ENJFqs
eAuf/+Kbc88953f/M+mR2Z5sKiKmsJ4bcZsfMVwQcUcP8iK6aBZ/hRFjWNPp
4G/QiX2dGv0vZLAqv7IfMl/TPfm8d6/4tKvGis6FbNB8SZ9lu3pp/gNVWNY5
lw2YS4oiJnV2dCr5d1RgSafX/gmHskX+MfmdOREL5nrzQ5Jhjj9Jvm/eR5ub
GTprHzSFbTdG6QvKdduT/y4/pf38Gb2Xbem1mcvsWulMcpv28cXuTuhs6rTY
ldo102mdEfsfHPNN2NBpTN6jAVM64/JfHCVv8KZT50Y3avGNf69NNUI=
       "]], Line3DBox[CompressedData["
1:eJwVzjlSAmEQhuE2UAM3FC8wB8DETE8AJmoVFwADA0su4HIEFwaYgcTlDqZo
rrinBgIlx/AheKu/pf+eSWqN/eOZiNjFyULEzVLE5nLErXmxGFGnD7C1ElEs
RNToS/kVDucjTr25lv1hQ//MJ3ZX9an5Mu3pMt3Co7uZ3YG8T1dkbTzRPfmr
vGsmbuXmA95kZxjYa7o1trs9vY2UX0Mbs/Ij/9Sii8jwY2dO/u59h19HR/bB
5/QOnWHiO5+yc1T5HF39F/+rK/mfoTnGCD3dnbv3+LazJ/sHImYxqA==
       "]], 
      Line3DBox[{2966, 1031, 1266, 810, 2436, 1035, 808, 904, 807, 1382, 1381,
        1693, 2840, 1692, 2965, 1028, 2572, 1263, 805, 1034, 804, 2571, 1262, 
       1261, 2964, 4053, 3267, 3266, 2963, 4056, 1260, 1587, 1033, 2631, 1379,
        802, 3313, 1487, 4139, 2962, 3264, 2159, 2961, 3128, 3312, 4068, 800, 
       1032, 799, 2765, 1585, 1584, 2960, 1674, 4012, 3747, 3746, 2959, 4132, 
       3127, 3770, 1486, 2958, 4089, 1120, 1253, 1252, 3263}], 
      Line3DBox[CompressedData["
1:eJwVzrkuhHEUhvEzOrsOCRKdVusGZqzDIFEptGLGTmO7CvsuOlyALRLGXIJO
pbIljN7vK56cc97nnP/3tU8UcvlURIzjrDpiqS5iGYtoq49olp1iylxAHsWa
iNHaiDWM4ITPqcN44j7cDekHccyNma/wyq3KVnAkz6odlRGP8gF9Pw7lC3ab
GlTfmkeruQUHXIX8y943ft31qb144/f5df0Gfrg/ty9VEXvyknk2ec9eozfm
9Lvybrs9eODfuYw+jR1u2s45ZnDJleTP9raTfzdf4Ja7xx225JOylPc/k13c
yK+xyXWhky/KM7I0yvgHfnI4Dw==
       "]], Line3DBox[CompressedData["
1:eJwVzjkvhHEUxeE7ZBKJtZJYGoW1U9BophaDGRIdY2rhA4idRuF76Cwlla00
1tI+vgMxi2eKX8655577f9+e/Ep2OREROcw2RfwkI+pbIupw2hzx3RjR2xZx
aD7nq3QV3bIduoddnOgetEakcMRvy7bQpXdsLrpNmAMzvvNMb3TX8MRnZY+0
Q3+0lvPr6DRv0g0Udb5q/+C9a52MucKX8WD/aZfUX7KbsjszT9MPOiz/1Rm0
G8AQxmQZ2o57u0ndKha9V6Ev8jz/7j5H+5GWl3Grf9UQcUff7At0DhduRjCh
k0LJzR/G+Uv9eb7EF/DqbsHch338AxmjOzw=
       "]], Line3DBox[CompressedData["
1:eJwVz8kug2EUxvFTG0KrdtZiqaZrMI+LbiRIDZGiopbuQCQSdQFsXYHpMiQW
wgWwNLSmovy+xT/PcM77fu/XtbqTL6ciooDtdERPJmITz20Rc/IL3ZAfsxFL
GJJzcro94pVf46v0Vs51RCzbGZaL+jvdgjuusYis+bxuxLwg3+DYfh6jutPm
iBodQ6/zZ/o3fsXeOx1HWXeOD77VXZ/00G4FT/o++qV7cKZOq7oJ+p28VfdD
a7pJ+osGLuQpuue+fZzIu8hgWl9P/o3vbonopEX3HPjOjFk/vdT98et8mN3b
H+Bnk7ebXaEkp8xKaMKWPIgj/AOSzzcX
       "]], Line3DBox[CompressedData["
1:eJwV0LkuhHEYxeEjlhnLjCk1hEolEq7AVmPsdFoyY02EK7AVXICln2pKN0Bt
b12ESuOZ4pfznnPevP9838h2vVprSzKP476kVE526Ad2scVXKvrepMZ/oo7n
/mRB1m7+tnPHT2FR1iG7N0+jyk+UkhnzD/Z0nViST8qbhWSf78Ky7MXOqflV
d0ZXZIPeP/fGJS5QtjMqW9U1+IK9J/tF+qtbk7/z3fwbfZDNYl3eI3s0z2GD
P6FDbl27c4VhflM+Xky+7B60/kHrG+z86cf0h7IBekRv3L/FPyFQJmE=
       "]], Line3DBox[CompressedData["
1:eJwVz0kuhFEUhuGjSUqpvxqV6BlIjIxVUSPMjQyMMLAAhbIAtoHo+w1oVsFE
ExIDIkHZAp4avDnv9517759/aLE6s9QUEXO4SCKK2Yg1dOBFHsRqI6cjznmB
V3IRebOGAd2XPMVPec78lLPmmbyVj5hFXfeNp0zEnXxid4wNuZaK6OeHWLC7
QeL+kdyHAySFiDH3yxhHr65k3jq7zzPOt+OH9+BP/y4/en9P7sav7k33oBvm
m5jGunyPEd+48uYlmvWtaEFJv+v+Dkbt6ua8/hpp762gS/dhN8m3+atdG68i
hWddJ5b5ROPf8A/+7y/R
       "]], Line3DBox[CompressedData["
1:eJwVz7kuhFEYxvFXIZaxJcbojBmGO1AwMxh3oJ1OQqGgEBlRKLgNwwXYMpaE
WAqiltCIpZJYCssd8FP88yznOefLl5man5yri4gyjlsiJtoiSjjht3DXHnFE
nxIRz3QQ487HcMh3t0ZUkMISBnQv7izyJRzIXbRgf98YMUpzuiLdp7e2RczK
NXnNdy7kAvbkfuxiQT7HiF0efbrfpogdmvR+J774LKIj4l1+9FbOnYzujK7K
D2jgq97I2m3QTVSaI67d6bW9pOu6ershm2V6pUs7G9a/8dv8iv4UP7pvfKLn
/391Sbza3dA8Pviqs2mbGfwBQK0ytA==
       "]], Line3DBox[CompressedData["
1:eJwV0LkuhWEUheFNYR6OBAWVSMzzGIkOp6M4Cr1EEEInMXTm6R5ITKWKmBUu
Qa1UHELQKD2KN2vvtdb+/uSvGp9PzWVExCRuCiLeCiMGiyLqzGlzPe1LRKwW
R6zlRyTogfwDh+iXrfPWZVf2Bv0nd430l7/Bf7c32afkpfrD/CyM2lPY1Mm1
j6FXnkNv9UvolqyWVvOPdGvMx3Sbv2J+QLPuJ1pw7FvT8jL9E3Mr78veRjPz
InbctZvP0YFWvV1ehXfu7JX0npbz88wzbmcx4K1FdMoWaFo2gqX//4VTDOFH
9zU74pt26U7SPe8/617YX3CJJH8I+7IJ2SOW3XfLrtGDFXsSZ/gDKg01Nw==

       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwNzk0rhHEUhvFbMl5DSopSs54txudgb+EDGN+DhdigkPdZmpBSskBZMkoz
Rl6y9QlY8Ftc3edczznn/xTnKzMLbUlmUS8kt93JHY5QxTF+BpKtrmSlM+mT
j9wN9yD79XX5hCF1x2DSVDcwrH+RLYyrC769q99Q1H/IT5y7VdIv9yRLqHFT
+nt+TZbx69/mvN+OKj/Rm0xiVT0ly5jGov2idypyHRvYxIWbf2af7Z+4t83t
4JKP+Ve+xu9x+7g2uyu/+FP+QF0ydyiv7HzzZ3xD38QIxjCKFv4BfBUzsg==

       "]], Line3DBox[CompressedData["
1:eJwVz00rhFEYxvFbTTNeEguKImzGSnwDlLCxIVvGhJrUTFmyoJGNjYW9l+9A
DZaysRhKUWJp6WVDRsLvWfz7X9d9znPOefrypeliXUQs4TYdMd8QkW2MyPFO
fcQQz+KlJWKQ981esCy/cjPeca2nWiPe5AN8oGD2yW24ly+dcezsO/nQ7AtF
uca9eJIr1h/5SP9DSX7zXfCAfmb9HKfIJ+9Et3sX+Cd5fyZi1/4UL2JPbuJx
31blSa44a9j+Eczo3/qNtQu9lvyv2RqP6us8l7yFr/RfzukbPKa3u3tTLphl
9CrSWNHL5hPyFq8m/8hT6MGJnuVn925zP8pmnfY/oANd+Ae24TmA
       "]], 
      Line3DBox[{1752, 958, 1138, 1087, 4091, 2445, 1453, 2691, 1940, 3981, 
       2648, 2646, 2654, 4124, 2647, 2799, 1635, 2082, 4064, 749, 869, 757, 
       4023, 2210, 1965, 2193, 2095, 2843, 2096, 2483, 4093, 1106, 2215, 765, 
       1549, 3807, 1210, 1224, 1223, 4107, 2197, 2112, 2113, 3993, 2126, 1237,
        1568, 3818, 780, 887, 789, 1250, 3649, 1249, 2198, 2149, 4052, 2626, 
       1594, 1595, 807, 917, 809, 920, 3455, 823, 1295, 1294, 2184}], 
      Line3DBox[CompressedData["
1:eJwVzz8vQ2EUB+BTRGkTrU1rQjoYGPgACAuLpIuBGERsmO2CwSB0kfQDiL+T
xKbMTIJIMCCoqXwCzx2e/N73nHPPvbdnYbW8koqIeZ5aI27aI27Z5icTUWc4
H3HofsQxO5zyl4s4kWdmNtlig5L5ajqioldqi9iXabV3+cYHKZq4sGPQTItz
M7vOX3YMmf+Wn8n7s+409H+T93JgblSOMEbdnozMJt+mV/HcHv32nKtNq126
XzGgVpPXdOjlmNXvlHlmGGeCRfU7u+fkEl1qBWpqy+7dzkWm6GWdPtb0Hux/
5J4yBf9QZNL5hWde+Qd9QzNN
       "]], Line3DBox[CompressedData["
1:eJwV0D0vQ3EYhvGniagWcYShm1gaJKbW0FY7MJgkIkaDdLHVwsDAN+A7kHj5
COJlYTAUkwGDxMImIfG6+J3hyvOc677P/7wMN1fmW5mIWEI5G7HaGfGdj2ib
57mIWndEFeOyTWzJdvlT/PRFnJhFfiNFto5KEpF3Tw5D/BpudY916/JJFLgW
nvi7rog59Mp7kPDLGHBOTbeKKXmW+9Rvpjl3xDXSM/HKZ/hFXPN72NG557fN
L9+zICvZJ5A4u2y+8bN8W7+IF/0/8zfdZTOyK/slXzD78cxP8xf2BB94xwPf
4B91S97pjOvAqOeMYQQ3OhWdQf9m3/UhDtJvwT+fCjIt
       "]], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/H3Ke6LgTvTbZQ6dXc2i1MGBpNBKdQNfgzKjzMpDCh/iNmA
SUkhCzfJYrERziKLHwPlccOz1+f1er3f7z49c9WJ1VREzGIgHbGHbFtEBptJ
xGVrxAVSnRH9um3s6nbQK6vzeWxhXzbUmGuPKKFbto6a/AZnHREVN7vc20AW
OX0V9/JT/RG94zNYxAif0G/dfCNz56CR2U3jUd4kr2CNL+te6QsSf/lpiZjU
XZvr033w4/yzPs8XzfzRX9R1Y7qyrsYf28nRZX4FS3gyM2rmSlfwlxKKeJAP
yw+9z+004w0Ldur0Vv9uZ9BMQXYi+/Ke9p7BFD75f1H7M00=
       "]], Line3DBox[CompressedData["
1:eJwVzj8oBGAcxvGfxJ2TP+VuEYVYLEohVrfIoCwGZVBKp47BvyKDnUkmfwaD
RaxY3OQmymBwstjubLpBLD43PH2f53l/7+99exdXZ/N1EbFAo4mITCoiTbvJ
iB26bouYlveplVoory+bfeK7miL26F3XIJdwAD+dp9sjqvwk9VOfbhu3aIPe
5GRzRCcOml3DU30HHnk3h1n7ipiiFWc95nJ4pS/oLs1ten+sthPX6YtunV04
q/C/jRFz8rA7N3iu/9bN8N26E7ksT8mH8hm+urdMQ/YWdRP8h7lHfpw/NjOC
VXkJC1jvb8/8A5+gAzMVfLH7Hkvu3+Gf/ofma3/Df8SeNMU=
       "]], Line3DBox[CompressedData["
1:eJwVzjEsQ3EQx/F7L0FbTRhMTGKQmGwGDAYRnaQREQbSpAsJ6dTFYrAQxEBC
LRKLdrMbkDDZDCaTzUI60TbxMXzzu/ve/e+94dJ2cSuJiCVM9ETs4TcX8YPp
3ogp3GcjHpH2RzzIcTu7OM9E5Oy99UVk5Ri3g4x6wyyVCUa4KkJ9Z3fNrONO
G0N8BXm3W/pFs0t7NQzwm3jxZp6fQ15fxg3XJddxre50RyyrD71L/fOoe4ls
8gv/31ZfuN+0W9d/8gV5xt1yp/JK/8HPykHvV91aQRstvJvNmH3bP7Z/hBP9
Kz8pv/gDbh/PeELDuz/X7y7w
       "]], Line3DBox[CompressedData["
1:eJwNzr8rBHAcxvFHOL/SWRRFUmcyyHYDBoOB8uMGdePdlUkUBouFMtuZjH5M
zmLwD1BKXTfJwmY8q7yGd8/3eT5Pn893ur5f2etKUkG5LznH5CAdSM76kw3v
TaxjbCSZNz/FkVmrmBzSWf4EbzpzOl/eJRzjWeeDTuAAbf0n2TZt86PYxTu/
ilfvYbzo7NCmfyzJb/gCX8OFO71DSQ/K7v0Vkqq8m7/S/9Vt8h35Fm3oX8o7
8lv+R75GH/hr+s2v0HG7HnWr+JQty4puz9hbQku2qLMgv9e5Q8zrdjdQw5Ts
H+h0Kp8=
       "]], Line3DBox[CompressedData["
1:eJwVzr0rBHAcx/Gv5c45nIcs8tBtRzoP5TJIZhvJHyAlKbozWmyyKiPlafIQ
09ksLBj8AUpKYuIYuM3rhk/vz/fzffj9svOrMyt1EbFAv8mI1/qIgVTEJr/F
l2lWfYWPiYiehohnquonZJPY3BLxpJeXd6QjdmQX/I3+Jd7iohu/OIa7+uP4
lom4k83x9zhidpg6+YybQ3zOvX7qo4o39uyc2x+u7WFV9m7/QF5Wf/BFKlHB
fqs7a/y13omdhDtJ6pWnZN38krmuGtV5eRtOm/2SV2hU9l27ZWbbexP8Mv5g
Qa+IJcrae6E/f9n3Ztp8I+VkTXgqXzf3QBuyQTqTfeKh+SNq1zvGKfwHYVE0
bg==
       "]], Line3DBox[CompressedData["
1:eJwV0Lsvg3EUxvHTxa0JYnhNhg4ug4XFZTcRkneUGHQUYTCIXSJq8xcY2Kxq
KENJxOAWRAwlxWDq4BYjn3f45rn8zntO00JxOV3KRcQcci0R7xhqjSg1R2zx
FQzLR7TaEfHQFPHBn+u2zYzQqlzzdkLr3hd0Cd+NM325LeIQY/mIfmzyJfR1
RkzZ0fDNPi2bTemPvMMf8ON2zNI/3Z6uwu/qrnCNUXu67Fl189TbsfzFf+PC
fLvuEpNm7/Csu6eJ7hEr6MG8rohb72tyLybsSvzexWzejV+5xt/QJzpopuBO
Xm7w03w9uyO/ZP+bbkA3g09+XfeKVH6jG/QfwHU47A==
       "]], Line3DBox[CompressedData["
1:eJwVz78rxHEcx/E3Jz8udSYGpfwNbjFYL8qC4dSRsmO5uhsYpCtGGUQZJEqG
20wyMVguVwoLKQzkNjfhPL7Dq+f7/Xq9Pp/P9zu8uDK93BYRs5TqjrjpiWjH
UxzrivjJRNx3RuyYP9MRX5Tti2jgC7+qd0d78m2c4w/K5/FdfsTf5f/a/6jB
a+GBexfwlWZ0mvxD3rm5QEEn9gs89j23VKdR/bL7zmRXskv7tz3tzSZmeDWa
1F1K3tYbwLz9WrdorvOGcFX/CVP8B3kHPuIav59y9KH7pjOedGUT+Iw53XVz
b/JP8n3eBo5Q1ZmSvUKbOls0pfcPd3Y29w==
       "]], Line3DBox[CompressedData["
1:eJwV0D0oxHEcx/GvwcPdDXe7h+48DYrF0+BWEwuzUhYmEtmU8SjOIqVko5Ti
TGRhcitll4fhUAxMitd/ePf5fj6f3+/7+/cvzCxMztdFxDTWmiK6UhET+GqM
WOU/6Tj/lo3opIuyNppNy3Rj5hp91reaK/oO3RzdxSyGcxE/sm8so51foUso
ZCLy2HP/3p47HNizw1fNo+7f0n3ZtuzGfCK7pilZVVbk382Xsis7L5LOGx+y
Qd0Z309P6aPz9fIe/og/RK0hooV/0JVpMyr2nKPbt43YlZHlzGn6JB+yYzN5
Fxvu5WVluwbkW/Q4+T+6P/MrLTnTp1vnf1FCL/+im6L/TC02sA==
       "]], Line3DBox[CompressedData["
1:eJwVz70ug3EYhvHbUi0DIWHTYGoiQWLAMRBJdwYzrQOgYmaR0BqEjow+YuoR
sBIJkeA8NH7vcOW6n4/3/7TT2816YyDJBo7KycRQcsiXaGFdPTmarPGe+gJN
1AaTA70WZs33Cw8nM/g0640kH1y3+8Z99VMleZU7drtyW+9FfSU/c1v/HKf6
u9zADqreXHVjile8d29/md/tnfGDb5eKPpfM5uRbucaPdm6K+3IVXflO75rH
i//Di97+dacjf5WSY/OK2QnK+DZbsPPD835D394Y//Gme1v4Bzo5K84=
       "]], Line3DBox[CompressedData["
1:eJwV0EsrxGEYhvHHyilmCo2VGpTjgg8gpcRGyVBYGixZkQ/gkExibCazxdoX
YMUoFg7ZU8JmYkGx9LO4uu73fp/3+U+TnlueWKqIiCy2qiK6qyMy+K6M2HT+
4nHnciKii9d0yZqIR6zKRayguTYihVH9Pd69e+A3vuGUt1lzTTyCZ/2LncPy
kzzEjZg1c2W+6G5GLsnT3Gt3Dy6cC+7uvBnT3/Ig/3hbkn/5kj/52tyAuw/5
XHcin3FnMiJvzz4WMI8W3SL3+Ua7uX5u4wZ+1e/JaW7FsR115gv2HsmnfIBd
3ys65+VD3jC7jpx+ksvIYAr19m7rc+YS8s7///T/m9Hh/g++qzdg
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1:eJysvXlcT9/XNh5CEQqZE8pMMoXIjsgQGoxJ5kwpmswhc5RShIgIGYtkKtkq
pCRpnudJIxkiDc9e78/n6r6/7sfr+f1ez+Of8+p07L32Wtda61pr73Pqu3qL
kVlzKSkpLXkpqRbi6ni0s5fyjAKG6+b5OV9ar8tgXWtkD2rPLOamP/NPR37L
53rru2fF6cWx4E9GR5bYlvCtE9K+3d2ey2+d/bk6uy6Rjd1nLj1hwCemVrNC
9mdIBtOLGDHZf3Q6008p+B5WXcY2PSvp6fstmW281aKEfYln7m8ue6jnFPLU
jLOHx0lF8v6/Y0dH7C9iFmdd5lSrVfInvYcWmbFQfnOf+t73FvHsSyP9s5ks
9c+//SWSn6vYSBu5ueJ5tj7hVi493/bUoD30vJ6d7i4xPuvpHHCJxtcJuTKX
xr/V5+AvIQ9P312lQPKsHfI4m+SZtWls9fgBn/i5SKtBJH+Ht4ErSf6NGmvO
ifWy4N4hebTebruHzqH1tvzdZ6vQDzNW/uJL+tn3YmIZ6WeW1dAUoUdetNfS
jvRZssM4iPQJPUKv0Of+N6v6jPMo5Lg6zL3lcWhEPIsZVuUWpZPFpsZEDt47
PpUNP2h3q+X4T2yku2t4ufknNkFKK92rOod5fL3QelzrePYz2sjUzbqY/ZZc
k9nSrC+xRcZ57E5QWFfd16X8/lwps9SUj7w0WLuXrFoWe9SqQ0ezdRV8yLj2
T8+dD+czbCZPfTc7mf2Q6NW8Sc/f/tWz9/uBncTzzMG9xSN6voPPEi16PvrX
nQ5ifKYed9Gaxn+xo1idxufT6y2FPDxn0lQ9ksf+lupLkmdP1zZhQn5+dnlt
BsnfpcFFluTvrev+K1Ini/vVLjKi9WqnL3hP601svKcm9MLmDbbqTPox9Zdz
Iv1M9y48JPTJprUrPUn6XLbFspj0CVwCp8An9Ai9Qp8KWi8atLcXNl2lQtLn
/NZKYC099HQtE4tYyx2Txi+Zlseqrw9Ned+Qyi62W+v3uSiGa81+v8r1eBif
1WO06qXASnYh9Kurb7My/v2HjU25ZyI/X3xGtqNfGgtZEnnBuKCM22zweDTD
4A2vbPNIr8Ywk9VJ9LqmSc+1/+o5qduyS+J5tvD00Rv0fPb7iGn0fNG5785i
fOaj9c6Oxn8ZGtOJxu9YeTWvqiiG6Rgs30jyWH0OUid5NM5lzxPy86GGy0aS
/M3Wmbwn+Q8N3fBbrJM/3h4qNUWsd7fMTiNab46Ko6f9+FQ+K+fWY9KPe7+T
YaSf0KPebe5tz2XtAlbvJH2u3LloMekTfg6/h78Dl8Ap8Ak9Qq/Q56BAxxW+
PV81XTXN05x1R1exzo79R60dU8gvzx2v5xGTzc0MF1m+rshlzTYH2Ple+sTb
rZEX11S+1cd62v5jGcw51DpYMaeE23lvfKGY85Y/nJVXOqZ/PpOotXFxk54b
/tWzccfZ4rkStqm+YxA933LPiWJ6fqW1I43PLE4YS8Y/p/RKMv6LL/kDhTws
2kZnMcnTR6OPHckz7Mc+hZs9X/FH+92NSP6K32OOkvynyr2miPXy6jGp2rRe
j7efY2m9Xb8MSxX64QNNX78i/eR3PihD+nEJUU+pCcngiqWzO5A+Wy+vnkX6
RNxEHEX8hJ/D7+HvwCVwCnxCj9Ar9GlsptumS3E+xzWh5tgPb+ss9kFdbutn
zSJ+Y6LjlDKfTL5iwvvmvhdzWU7DtuQu3fN5dHvTAZHbIvmykA/OWdkl7B/1
GjTp+Z/LZ/Zs7Y5M8Ty7WVfZl57fXr7bkZ5XfjPJWozPWvWt16Txp6VGScbv
fzNMRsjB8ppPbEvy6Kk31pA8dTm7mZCffTG6KpE/ZnKNNcm/W//dJ5fjYcz7
TY0vrVettu9gWu9Ci9l7hX6478f0JaSfNZt6R5N+tn4fMFDokyc8Df1K+nys
Y19E+kQeQl5CPkLcRBxF/ISfw+/h78AlcAp8Qo/QK/S57OLVX9KXsjiu0c8c
DE+4FrOGd3fVWrRO5LcvKWm0aP2ab3UcfX92eMW/etb+H3rOGP11onieqa86
MIaen2pbcY+eH7Y1oU6Miyt/ZmGpT+MrOfycLORhXf3dJPK8ezOuBcnTbcB2
ayE/a9gtu10i/8eaKSS/fcMaC7FeZmN6SbLeY+YpHWi93scPLRT6YXIKT7uT
fq6X2vUm/fzydpon9Ml0Phw7R/p8L/t2LOkTeR15HvkdeQh5CfkIcRNxFPET
fg6/h78Dl8Ap8Ak9Qq/Q54aqjgenFzzmuF7Qvrlr4osq9p/6/S8962joXxXP
4crV5L7tpOcrGvXHivH/vSbylL3y/jR+hEy+qpCHDd62PZXkCd6+3Ink+ZiU
zoX8bKbh/iCSv2J8YxnJfyHa8aFYL7NbukOy3ti2c+fSeu+2HR8s9MNUMr4o
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
R1WucQ31uyUbxPihilHzaPxjGm6rg82L2LZed7dftcjixaNNvPVa5TLrTZqj
otom8pmNS+PIDhayNp1I/y1/t7CaG/OGZ/ce7LBEPorPPWR11CqmkkG/0Df0
DHvAPrCLwYc+8ucn5LO6fmYu+cZ5bPav5NhDcblN+oW+oedzGTkzvro9YUp1
UrJdvtxmjxoH2L37WMXcDs53Hfo0ip+RXIN4w4yCoW+UqtjacSmzNtimMvXN
GzVcQ+NY0KA52VZxZaxKft9WUQ/yQ7OmHhD1IF/wTWE91YOyJg7S392e8GY2
N6Vp/OltWm6l8VcoHbo85GkUezt4zgUa/4bSnfE0fl/7ubxZfBxPibpVHrjj
LTM5kqq5tqaCdd5o49nrVg67GTdl0CuVYhbfT3FKqlwmk3vWz4/0+9jg23ih
b35fMeEF6Rk4A+6AN4+oni8eyGewktryAPlNaezAW4euHZ0+sW+Dc133Nc9g
c37Kz9u0OJl5R57sdW1OadPP+D3ux09c9LllWSKvCjG49eHmBx60ZVqccrMK
Fja56rhU0luePFv7gPfMCO5ecvZadUol63jnk/fyZx94vP2HDyP6RPEXa+ZZ
6c6rZGVtIn7SOlvkFi8T62aj+/nPovVCv9A39Mztozw6PUwQfHlYz5lJgrfE
+qVcyClisBPsBnthPsyPeWEn2A326nDg/r5HO97yup81S0iehGubdEieWVVz
Zbp9uc2nTZw0gvCyuCe3ITtyoxCfIU+DmPWpSjea93mPCjWaF/4G/4Pfvf5Y
70N+dd7D6pnwM3Z85G4P8i/4LfwY/mtjvWvH5l6u3DV/omSctbNUJON0v+3s
8nXANR6zRPkwxYPBFefnURyo6OSWLsbhnWPVqmmc/amu7Wgc+Dn8Hv6OfYE/
v5NzJDMjQ8IDL5yU9KlUHo4L/+/Pf5Y8t2XyZ3zf4F//RzxAHKgy25FHcWqM
lvlnGWPOL6zuqUtyIo4griCewB/gH/CLSqvB0wXO2LGvjbdb0n5Szagiwtvx
DI9rpB8/9+fvad6JKYaSeQuTg1qQvcr26LQg/2vXsNiS7FUTLR9E9voluUax
tT91NGn8Yq1pt4Vd+NYCpxCKf9/f39tHdumkWxJE+tQfEd6V5FR4/eMLyVl0
7ZhOD+d0vrDCe0GCfSm/Md6xG/Unp+0Mrr48M4Lly6Z+aUx8y4I0FB4S/vtE
PNMXOGTLPVa1FDhkBXKrDxAO8TN+j/ua3S9vFPjnj2vD3QX+uaJ+2GvCfxfV
6nzht3yJ7shq4cd8RadjdQrCf4OTV+4Vfsp3XkyLEn7Ky0vWNSc/bRFUe9Ln
RSZT8i/JnBwZx7ySH6UbBJc26RF6hT7x/zEexpE9YxpMcSlkirsN+Ye07Jkx
5BeQD/JCzr4ma91FvOKrWtn2FvGKt9U6uJXi1czhi/eKuMztq6c2nJuQz9Xm
3ftO8XnfQftoEcfY5RWGBpQ3tFvuc6M4Fhw0dJdHVixXOvLmYe7cVP520ZgT
FMd27HIcVtzmPuuSeqfGu10gW2lXbEr5WvXzLhX7e8/4vbNjttw4FcqXu089
Q3kB/gl/hZ/Cr+Bn8K+/fV8iaFur0SLucMeH9/xFHOINC1e8oPgDPAFfwBVw
CZwCn8ANcAT8mD9Yb3xhRQEvvOttpf8kl4f3fn1y0/BcBn1Bf9Ab9At9Q88+
jq0WdA2OYR7zbyQslo9lgXkZ7SlvTvLRMFsqH8USY1y66ce8YfFDtZdSnsVz
+H94vsPXXaeIJyXKmG5arpfAk7uHdaV87bfz4QDKNwv7fGvuI+z2sqjmPtkr
q1WPxxTX7l97/pT8qSTd2J38CPEI8QlxCfEF8QZxZke6WRXFC83n+x0pznV8
23E6xQ34IfwS/gh7w/6wu0aO+3XBx3hNffvI/TuT+Z6q8buJjwFPwBdw9bTO
bTKtc2KQlAzxlE4Wi9ImifUi7yIPI/8iDv5nXKxi/T0W7Bf2Y6quJhuFPRmz
899MdgQvAU8BPxEyt2CRcdy4vvC18Fe+oTHyNfkp8ivyLfJsyIqhToIXcoXU
xQMFT+TXhznkjRX8ELwWPBf8tg+bmrCwrJj3HJnV5ZxnHrewMz62+1QCO5s5
tPJ3dBGPfuaj+iA/h/uuGq0Z4pHJwMPAy8DHwDPAO8A3HmbaGOwKKGWr9dOm
Zt7KZG/SOuXc7BnP/D3ctE+eKGPL5d60X3MkjQUYfw6fWRLHDE916xy3qYwd
SlL0/ro8hX1q/sW5VjupKS8iTyI/3vqwdOk3xXI+rdg3nPV5z6vet1+xuyGN
XfsxqItfZBkPuLxaXN/x3iqr+k12zGA+0S3cd78p4pmXbz8Y3eDJE5x7Jtps
K2L9x367I+6z81FG7nTfYkN6MN1X1uvY19SlmB3ZHfuorlw8f81/8CafQpZZ
+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
4W/fAZAOupFIet9y3VHSn3hqMV3Sl4D9YE/YEfaDPWHHI5fMO9O+7YNt5gqk
jwHzjMaSHnDuAecgcP4B+9PYr8Y+NdaJdWO9WCfWjfU+fea/g9Yp773iCNl9
s+az87Ret6JXn6gPbH2tVNIH6qZ8tjX1fyLMbFLJf7UGbLhHfs/PHR9I/ps4
ZNWvr0Gl7HK/ct3nPhlsypt9cfpbExj0CL1CnwsnD14137KCVxVr9A8fEsxj
XpsGe6iLOtAg03BRaQX3PZggPfvaM243t2rjnujEv343I8E4vbvwU94zrfoU
1ZHr18s4kJ8iryDPIL/8blEjVxddxMJ+KrWjfobB23p5ihuxwdcnsm+F7O7J
dJXOnvm8JPmVzlLlVKZ9qM7vuW8BL/9aOI/6vTvlDuRTv7dWt2bG9DUFvHaM
XstRuoV86I8Hp+9/T2HX2m5/Ya9XwNq7BJ555VTE1lr6eWWaJLDJ2y7rZ68s
YMfjj86WPlLE3u3fZdxaVfjLTmuFboEF7FzjoendQwrZ7kdddvkMTmJBVhoT
aL+2i7XmQTp/4p3eIZziOcbFPBh/juqoG/E5hax1w7gu09zz2Ye27Q6HbU9l
xcqWw6abFjKzdsEHH9bnstTJXcwyJ2Yzsy2dnwiewFuOdZgleALfa+XjSzyh
V+ytNR/ksniu6vw9rE0JV/IdtD7GX8SHweHuKntF3re6Gj4qqogr7ByqOaI6
h321HjdxTGYGf6k7o1HauoBrMm8F3S/57JbG10Taj162OjiazqdIqVe+Ix6I
/IR8hTyFeIr4irj6xkhllMAT33N1UgPha6OrRhLhakLMkQlyPd/zV3uUxLWC
5+yZdtRCJ4mNL22/tyrkA792zv7BnMXl3Ccx7PVPYcfEu9IVUxNi+ewvy07f
1CvlsYb2c24Nz2HAPfwA+EefEX1H9Bv/s+77n997/LP+Ql2NOrupvv7L8/+n
+u7PevNa9bzBwn9YqH4viT9Fqs6X+NFd5xOthP+wLcopEn/qc7hM4kd/i2ND
TF5UzxL+lnozcb54niUMtllJz+vN7KtJem7102680DPb2HzvcdKzVerFk6Tn
8D0W94SeWXeDzDjS88slT3+Rnl133Tkh9MzGZRosJj0jvjfF+3/jPOI74j3i
fGqbj1Z0XsjWv9Uw2h/eHidXQn0P9KHQl0I/CvUt6l3Uud0KN16l/P2i75Mu
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
wU2e8+nvzHXJXTaZvp88yMXhAenh95HYlnQeMq3Z9vG0336jbIYF6UG/z9oA
OsdmF6nwmvaLpwWrbaD1/u19TJz/wHkQnAMBPoAX4AT4AF6AE+ADeAFO0K9E
/xJ9S/Qr0b9E3xJ6hF6hT/T70P9D3w/9PvT/0PfDeQucv8C5C+yLY58c++Po
A6IviH4g+oDoC6IfOPms60LBQ9iBfbEqgoewuan2L4iH4Gf8HvexD4R9IewH
gU+AX4BXYH8C+xXYp/hfnL15WE5f1D8cicgUUgkVaTAkpElaQgMhSpQhqVBR
hkQhY5lCRRENKEqlaBSVnSaUNM9z3c2TiMy9Z9326Xmffu/3j9/rD+e69rXb
9z7r7L3WZ81sHiabl8nmY7JxTmzcExvv9F9+LtaOz9r1WXs+a9dm7dysfZu1
27J2XNZ+m7leTRX98bvlvBehn90v0OgZ4ttB+x2157F2vI0+7Vvw/eMcNv1C
fDdh/g9zpAP79+x67DpsnCsb98rGu7J+GtZvw/prWD8N67dh/TWs3Z/1A7D2
f1bes/KflfusvGflPyv3WXk/KP+p3M+TdzFEvrfs3c1ziNeG+53di3xvpu+o
S8j3Xvw59xbx2gGVs1ycxtp5Wbsva+9l7bys3Ze197L+SNY/yfolWX8Y6x9j
/WJXf0dM+iDQRbIkeGQ6O+IIz5/G74lrGT2rXYYzq7cJFgo1NTBPUjXNTunA
6ly4dXPKW0V9Bi/83nHEzb6J7Fyf98p/VR6UhW13/8rXDAfkJ7cqLmoik710
DO5/LRjkyyyfZvkzy5dZPs3yZ5Z/sfyM5WMs/2L5GcvHWPzE4ikWR3WuTF/I
vA/c5vPhvp+KWB73vdJrrUTR72vy2tnC0K4LfndWPEe/1TyF5Gn4/oK90lOZ
+aC2cmE7zmfxK4tnWRzL4lcWz7I4VkzOuwzrF/kpyf7d+TIX3m0/eRL9KdOG
LViU+vwDuWMufNXZpwCSVnVHnUjvGsRPLJ5icdTdzxa1zDwSeVrz0ZvnH8Bc
RDQC57Pnhj1H7Plhzw17jtjz4+Uxp7zZoBl2bV+7sl63EvpbKiLlbBtgRoCF
vUJGM3mV+jplXVgj2WxpnmnF3Ovv2R1iFx60kHe7RJ4flOCApk2HWqJsLvi5
WI56MaeF5Of2Gqy/xYGE/KwEEMsD7yenT5OqZnLlnMPk1aYc+Gk0rsGFeb87
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
regrlAv9mRpjeHiMNTycvXquO3ups/lT8WdruH4fPbPRKHfgafc1e5Q7kquS
mn/ebIZt1018tevrIHfO7a2/9WpA62XDmo3Lasio9+mX3jP41K8r6JxjbjMo
Tpd7yMhH4slL6hn5SDhyZ6NRPm6xnoF+MZK8pFJ7vUoL4TO0X4p+sY54TYwv
IrZ/ll9GP3WAapou+qlZucJP5QwrX56XflqEeEa398I6Rl5D9HBDEZTXrNx3
+ZQtw8h9dZY/7KxOvcDgB+A//2k6gx9AbfHZhYgfPLZcZs6Dpca+mNAjJ1u8
1Nm8qtn0+22g33M0/Y7zJQYUGdxCIhPj5BjcQpLixY0Rt7B6x3qqd3Co3sHy
/RYqB1j+LyNSwMVvP+xSLdGevHfLcBfEbxMa61sRr57W2xvgZ2hObov2rkK8
yuKu0eNP3WZwlzqLu1g+VU/51kHKr4btcS5H3LVE2L2FwV1w+LnbScRdj90N
TPjdGX3Bsd1u+/xGkiLfp887uwicrKYgbifetf0SDG4nXrLn3BC3V7SL6SPu
nR35DfE5eXN5Bxf3Ol6xOFSv0EoOdnxdjX7tcU1PhNCvrfIrvJrBvZB6kePP
4F6Y3vo+ayKDe21pHc4EWodTi9bhvK6Vtw7xf/bw4nBcf+ZZi7+4/n+Nr3eK
r0W94Aznvk78pWzyLKxaCPWCjTTf5hvNv5GneTcDtA6nBa3DeYbW4dQuD09i
cD680g2eMnxHIbmg9L4ScX4Izc/6RfOzYmh+1pa9tQy/PaJh6LmsL2niLXU2
D0uE5kGsonkQZjQPYuZTmXH7nOtIbuoUWdynRn3kryZmn0PpmUrpWX8nMeXi
lmbyyXnD1VVd1WT9pxdFsK0evoVbHjqwOZtYy+4849pFyDC7g79R/9qm7DsX
4w/1Uh9IoB//0ftFYajHSUebFDPrgNWC2mBmHcg4WRWB67D7f6mm383sP4nd
/8oLuRNwn9OEL+ahntVjFTeA+1z9IayCOT9km7cXnh8yrXPnMTw/t6SXv4ez
HFKSte7X7ZYicvzL5R8X1ZsH7c8l9Dmb2p+T9ui0MHyD2EjH+jF8g2wc/cUA
+Ubfkd6x46MrQKi2qmHZ9kZi8WShbUlsEwTcuRWIcmS6wXpuXNwzh8U/UI7k
nb4/3dEgH6qaGuX0ndpJj+6sR5/O1sJWndkljLwjH1ceUGbkHfEPbOPKO56k
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
8OnHB13M45vae7qJgRtEu7WBg/do4hC+PZHybamVV/Qn8HUS4fOfh2EdqnE+
iqlYh4qta/99SJwt22flCO27soT2W3Gj44fouBIdZ+cfpuOKdPy/7Fd+E/bq
oP5es8tYEOtuzelbKoX6+6SuvnVe/K1kpHLePKWYBgjl+cOt47HifjrWdyJj
XK8XYX2nCPeJK7G+U9T6TTYYtzzj/HJ9rDs6TuHhBIxb5jt0f6mKBYfktlbu
y7zUDDWPQt2xDskHn6+/MV49sq95JdZxMrCvUsF4db5dHafLvDjEkSch+rpH
E1iv+muJdcmO3uXn1iep3DfArReRMqrzEdaLeJXWyo0//zXTXgTz195euseN
PzcrvMHFFXY/P+oink1+NG0fF19RO9j3Tf/bDraQ1sk0onUy22mdzCWTglrw
fBqpNnD5WMjs9A94Pof2D2XrI7H5I66K46cpKV4Y1CPebRDi5qEMHTen+n74
5mDU9wfHdwyp17SA7YPptA/rIYDQgWJuPYRnFn49mN9t1SXFzQfn+5jthHWW
NLXCuXWWzi46vch/Shnc9vjArXu5uVSaW/fy0nfX4wzuJVOyEx8yuBfCu+vn
Iu7Vo3WHDGndIU9ad8jpTxT/xJ95pHPG7FOEvwNMnmT4yyZXQyKN51xK4znH
0HjO87QuYjCtixhE6yIuonWkHYfUkU5WGhmGeU8hd8O5dYq8Oq5w6xR9Twpd
i/aZtvjnHWhvuek+gmufuep11APzqu74hE3B+kINY274Yl7VgXtl5Ri3vGa2
ozbm6bT4u3HjlrfP7svD+h6nrqksx7zsolsTjDAvOxVin2MczpKWjT8wbuGp
wXd5tBc9+Xtm+NK1zUR66pifG7cyeq+Pf32kSA0M2z2Pm1c4rj1fEuvwNMlu
F8a8QjY/3Y3aNddQe2auikUrxmlbPfh1F/M7oqzijDBOm51/lc5fS+c7Ufm+
i8r3Firfi9/tXrlMpB4udHZcdF7cQib2LGsWK66EnAjOY4xTOlDWvA/jHELP
pa7HOIePSsrG/O4tkBJidgjzEQYEPLn5CCdone3JtM62Ka2zvfNTGd4vcmRS
QzzW/0mp/hyE98tSf+vLTf3t5PWhhXdrO4ug10A1bI1ZJXzeFEgQD8xTzRw7
ibcJroQKeyAe2DX3wviPR+ph31Wy6Oz+OiIz6mrpEqUm2EPrBb2n9YJO0npB
4ymfHEX5pCDlk6tHTvqQc6SeLNz0+RizDuhde1CG61ztX1SF/Fnol9xNrN97
aWrSWuTPll8kPzA4gUzzqk9BnDA3ZHoMFyc88J3B0I1Ylrx/zNANltY9LUe6
mey1e4VxI6IWEZoY92X8MVse40YcxxTYYdyIufXeuxj3NcZZajXSs3+x/b2W
wma4bZIQv8u1jpS+eOA2anMNLJQW4ebvlI7ayY3DH/tXnZu/E52gpzsivogY
Ra7txzpsl4zPJ2Adtnh3qUUL9ctJR9QuCYGGVLJnbOKLy8O7wHvOJm5+2WTx
D0oYbz9xYMW/ePtf/+yzU6i9to/aad++l3XB+7vrpjtXbw3/dGA53t8XE1bP
Q/vk7JOWXHsmj3Ig9744JJRGYr6e6qaVeVg/dqeubxLm68kp125CvWuqvyJX
39+oHc3V94dRexxrn3tC7XLVhwxPoL5sKXSAyzd0mpvn4e/yHTXUwbyA85cL
ufVLa1OBWyd2Aa2PsYzWxxhH62Mo0zoSvrSOxAZaR+JAX8Q7tNM+/3EK7bQg
qH15Fdpp5wUu59LzeIQM0hOWC1zk0lMsNHAB0vOdRZw0Q09Y1K6egPScpOnG
rYN3oBP+4HwJnWHcOnhH/ISXM/PBPfCeFM7vfPclFucP7R/K1g1zak8LQ/vP
78Uhwycw+vISr9/JqC8/8Np7Cu0/LfknbVFfTuckG6O+vM+3vRVxb/2m/lbE
Mxt2f8pGeeG5QJebZ83bNl0K86SWhJ5VQjl1P2Al194VvXK5LurFUjFCeagX
T6bfYxb9Ppvpd/E5JcG175nsN+5CPTT+gaQ/6qGBLTO59j0Pp9e3UQ+VePlm
MeqhvVbDXzO4hWR8EhZgcAvJO2jtgLhlzq3Y7anVzeSVgcxviV0ccuoxvEY7
ZMjelBlGD5vJyJyCcrRDip7sCkY7pK2YYTXWvaw5W38I628LrFn3EutexrWn
GqMeyu9xNBrtpfEm/kWoh16+ncatb5l8c00e1hU/sNqZW9+SrT9pT+tPStL6
k0PHZ9JxNv5cmz7Lafz5/m8uBSMrM0nG7dhkrPvttXV7MsZdPPUtGef0kAMV
V+sT+CZyYPeKpVMv/qmEER8+5BtGN8BK78fRY1c3gnfzqC0zberhsqLxsmLT
FrLueH+f+dUaUhyt+UNBtxa8nixpYPAkybU7VsLgSaKSs/IN4sn/sluqRUkh
n4RZe1TuMXySZCxX4vLJY/w5GzDfLXj20x7MUz9e8SkA891Gj2mvRbxabGNY
jusfS9yUgev/lx2SxdUTrk13Ei069f97XPl6bea7xKfkl+aK+8M5BeSynLPP
GdduWMgjVcuMw1dxoVhmHPrmLPDGcT1q1xKgdi2gdq3/p7W7jqoqf/s+7hij
iGIrdmM76tiiX7u7a8DB7u7WsbsdHAO7ULGwt4VdKCACBiIhgt357Gv7fXP/
Zt8363nutZ7fP67fmbPOOexz9t7fuK7Pq2WRNr7mvEOlrdXfmnekf1nUmneM
ST9S5kfqt1RZe0quYNpu69fJ/Ghliy0yP1Jerj16ynxkysZ0PjIfmT5/8eWR
HfxV//hplyWveG1sn52SV5zYetekft6S460K/bHZyitudHeXlVdMLl8DWz9p
hk8Oe835oFo+d0lOcz6ofEu79pD54LXNA7ab80G15PAfWcz5oLoaXuCzzAeb
6Ly+3jqvL0Tn9TW35fhd1Y8ntj62OLDPPfP3Zrys+OSo+XszjmwLrie/t4p9
Z0pfkmrY/a7Vl/TbkHKzpC+pmfbphmqfrpH26RJbv1JvvxyR31v4WbVG7ssV
h6W1fm+FPDs2OnQySp1ZeDx2vZM5Tzh75M7kg4/VgLoZrsj9cff06HPm/dEI
nvD3Prk//vlpagbzfDEmdow5YZ4vxuYuwT9mmOfL4cc558o+iPuRzq9lfWmM
a4dwOa/fZnNvf71IjBHc6vxGB/fHxq4WP95PampeZ/8O3in7fT8m5sgtOYGB
Ln+XknWDrTEuD2W/b2q+bJ8zmOOEd6PaDpNxQo8S5Z0XzHuiYjMtHdkiIlJ5
zXA6KusGrM+yXss6bfsZLa19ySPdjlaS/aDjnQ89kv2gxNaFynRbZrkG+Tbd
DpN83RHz6luugcfLDR1k/2XZ7mOfzeueelZ0VbBc9/I3qZFL9l/q1R0YbF73
1Gdj0yG57o350y9Q3IFfavUaIHm/YR9yPpXrXrUXazuYx0G9mX9sk3kc1ODq
K+PlODRNOrW5zO/Sj9grOcOG58XyZ2R+h79WyZajsiugtjW+yrjhoIyvjLkV
C1nf45hjN1uZ36PhHdrqlfk9GqWbVrko36N93oFTfzag1hr5PS8oUSW/rG/4
n230Wn7PQ8ctbtZjxTWVvshFx7Ql4g1nrzJ9ruUIUl+2p7os52m5Tk79ZB1j
x6niS+Q8DUrfdqqcp0t2DOwt6xitjofskPM0ecE907/7RapOQXEjJX94xKxQ
J8kfzlk7qt+AblHq+/GU+cImRxrZ/Et+WlDrpnLR+YHNbfmBt593kDwWo9HE
xlYey3vX9tbv38WWN/heP/+Z3uddo/d5w/U+78O/0rWWvkLPnDkcxUf4dnFV
X+krXBX992FZ/xkcOzSHnO/LGnzuJud7wvVXX49H6etwVOiyU7Iu9CL5zPRy
HWjYce0HOW57JtycKXWS3SPVMqkn7LEqNl7qCUvrdYlkel3CWa9LdNs+V8l9
5Py1DFGSv/0wX+0vch/J+ulilNxH6vyS6pKsS9w419C6j0wrdio8pVu0ipn4
2NurfKjyCm+SY3rucNXlzcDCLtejjNDpTz/92GN+f2c3FY0f7a+8JjXqNvJh
vMrrsWZYoV8M9bzp9HSDVwcm5F6WsuVeFnCeauV8Lnm08B/Z1/vY+IOV81nx
i4u1vn3X9dfXsq/3/pckMbK+zTyEeQnzEfyF4dpfOKP9hSM2l+GkftzHLUtN
GV95pz2cS8a3Oz+ss8ZXh8tPqO/345bqEL6ool+m00ayDs2WDVr5XJ2+1qZ/
AY/L6kfybzF1fY8bnRpUyViy5Av1Xuf9+tpcsDvaBVtvc8HO6seX68en68fD
07ZzlZy9LoeCikr+25MDPV0k/22AXhdw1+sEp/X6wHmdJz/Dlid/711onORR
Tzp756XUpV/K4tFb6tJDr+SdKH1q/V6krSD10fPn7HoqddE/phZeJXmY7bIe
bCX5WvFr1sdJvtZKn6d+sp7psKXVRbkOB0bdOSjX4QKbFx6bkCFajW5yeGOY
T4Sx2nlc3XU9AlRf/bph+n0W6Ndv2WrvnrjgKKPEkJVfNu99oJoHtv10r80j
5XohY4z5uzICvxbZZ/6ujL3lTqeX31XfgtdXyDpnyNarSSUnIcmnbCdknXOV
dr7qaOcrVDtfH7LuvnCsV5jy+NznUc4l5rivWCPHPT7hKu/e+f3N891osHhw
Xjnfi/xe76Oc7yEvV3wtcS9SpT3Zon67vE/UlfZfZ626eVc93rlx9PaF0epc
rvodWjndV+P6dRrzLN0jVXJr1Anz7zVudl28Qf7ekPUlasvfu39p+SFhnaKN
hrW9m/82IsJIXjjduRwpA9TIYnUnyvWHf2tvq5xarj/pHHrI51GO0xvI51E9
1tz8Ip+n1eSJnzo3vaX6V95yZ/CYOGPr4TcDy9YMVmp3kS6SA7MsU/+ykrOR
0SHvMsnZ6HT63LnDs68as6o7l5u1I1bleFAwY+Vmj2x5Kb8lrLs66nWMvrZ1
jDa7B4fNTBJp5E1VaN2Dto/V9cuTWywb8FCFtg1yOz440jDcykUPSPJYuf44
lfxyUnOc6f3Yylk6/7b7bsnzX5/ezcrzH2fzsLrZPKzk2sNKpz0sHk+hH3fS
jxf3ihhjHn8jw/InXczjbyyN6z9Cjn/Y1HtFinaMVqf6npvz3Ouhkf9x5jmp
az9Qa66Pk/wNI+rd9/WSL/Tq7zWrJX+jw7nvS9NWumc0d4wtXuPVU+P4aJdJ
zXxDVfdZ6/aedw0xXuwb1jB84lNj08fpo8sMClMNB/WU56v5JdLJ81XcoMip
8vzS+TPK89WgLM8bmM9XIwqFj5Xnn9BOVhbtZA3WTtYp2+P4WVts99ON+n5a
s6bLEnnff4bVKSGfM/3aGdbn3FRySa1F/qFq3eQpTce1jjEWOG9Y4Bv7QM3Z
6nnn3TY/1alU6zVtZsQblbJl+1r+9yBVJe+D/QX6XlGX0jR+fNY93ni6rUem
ZXsDVZtND75FV+5tpJoQ+S2qcm9Vz/Ny4RdS35v2Wp6asT5G5LvLWc1/VZ2v
u9wu3X2hGv4zvuk/mQ4a9ycvcz25Yb/qsbqR+9dbL1SmYeUK1gw/YqSvvDXv
qakH1Pm/5xRvfOaFGlKnp+ezWueMjNOKp9pw8Yja98eGZMHjXyj3jhGpU4yI
Vred0z86ceqBsW/1+DlbAx6ojvp+zP15lL4vL753Vu7LRnjOUnJfVk8yFbHu
yzhTn7Qz9Y92pnj8o358jX58l3s3l4W1zevRznllfHNHGZX/Wvx+6Jp7ipw7
cu/Iu6Pemvpr6q7xdfB2cHbwRfBGEpwRnStHzhz5cuQjkJdATgLzN+ZzzONw
iXCK8InIqyK/itwq8pvIcyLHibpA6gSpD6T+j3pA6gAvNVrbUxyRrq/eWe/r
HdPS8kQYHzBeYJxA/zn96PShk1dCfgm5JYwvGW8yzsSvwrPCsSLHjVw38tzI
LyPPjBwz8rnI6yKni9wHciDIf/g5D66Ep5yE6yTrQawPsS5EfST1ktRJkkNE
LhF5RBtKF/pwY1SQWhlXcPSNVU+NCb5ulm+1wTVF7sf176j933tkH7v+mVE9
YOtDcbjYX2G/hX0W8h3IeyDngXw98vbI2SPPjnw7cu3IcSPXjTw36gupN6TO
8H/rCMzROf5zbB4T62Ksk7E+Rt4B+QfkHpB3QP4BuQfkGpBzQL4BuQbkHJBv
wDyKeRXzKXIxyD+gv4B1H9aBWP8hL4P8DOaz5GWQn8E8mrwM8jOoM2G/hP0T
jhuuVSI+gmH3ERI7/ok9/r/1F6jj7GX7nORk5bT9XeRG2Y8DOUr240behP34
U99AvQN1DtQrUL9A3cKPRces68aaxl7zxe15/G34L+L7/NvN+q/jgOuD84Pv
g9+G54bjhquEs4SvhIuGk4aPhguFE4UPxf4i+43sM7IfwP4A+wLUr1PPTh07
+Tjk5ZCTwz4Z+2bsl7Fuzjo66+fk35GHRw4e61OsV7FOxb4y+8zsL5P3RP4T
uU/0A9AfQF8A+6Psl7JPynyY+THzYnJ/yAEi/4f6ZuqdqXMmx4dcH/J8yKEj
l448OvJ9yPsh54ccJXKVyFOiXpz6cerGC24uVHD3gVvKqcqgkilrXzfOb983
Qrwq+g3oP6DvgDpI6iKph9w55/UtcQFL5ql4QtYXf3detlrWFakLpE6Q+kD6
Ev893n+RUM9NfTd13axXsn7JuiX9bPS30ddG/hp5bOSw0TdIHyH9g+zHsz/P
vnz6oGY5zfGYqt+2WX5zPKZaLZzTdJg5HluvfabUlX56Tb7aacJPwlPCUUpw
j7SDhH+EP4RHhEMU+eJPa3w8IzjdbXO8bHjNK2iNk3F0cHXwdJR2ZXBmgrUv
g+OC64LngpuCo4KfgmuCc4JvgkeCT4JLEv2jUKys6w0YNqav7G/4+4+7LOt7
UYNXpG5XOVo1v+v3sNOVx+rLcSNH0NugBOcJ9wnvCW8Jfwl3Cd8I7wjnCDcI
Rwg/CJ8mwavR+SesI+PD4MLgteC34LbgrOCu4K1Qt4eLgoeCt4S/hLuEy4LT
gs+CI4UrhSeFz4TXRD7qNO0WVbW5RfheeF84X7hcOF34XLhZOFr4WfhVeFY4
VrhQOFH4UPn0vOzO+H/Py4Z9eZql0+vTKnu/f17/OslfqTmzLmWZ+DzBAcIF
wgPC48HnweXBy8HPwc3Bs8G3wbW5P/1EUalHLLtsv9V/4Nexp9V3UD131KKe
nwON7Q73C/ZcEKvm165cw6NoWIIThhuGF0b9B34XbhcOFi4WHha+FN5UgjOl
c3bwjnCOcIZwh/CGcIBwgfCAcHpwe/B68HXwdnB2nLVzhnsWr70zvDH8Mdwx
HC9cLzwv3CMcpF3aP8InY12cOhy8DRww/C9y4siNwxXCRcBJwEfAB8ILwgnC
ucG9wbvBj8GTwZGp1HjmiCKfY43jaXJlzZAvwHjQKtvsmvGhCv8DDwQHBFcD
ZwNfY98vJXOLN9Aqx+TskjtV/Mi24ZI3dftbyu4LZzwwpvRpF7ikYZS6tWR9
xD/FwhPyzfGFcIXwePB5cHkCE3HuyEfGXcFbIW8OtwRPBP8DDwQHhNxe/A3c
Depmxuj1Z+pnFul61vfaSaCuFYeAfFA8AtwmHCf8JtwmHCf8JlwlnCV8JVwl
nCV8Jbwc/BzcnLHam8GfwZ3Bm8GfwZ3BccF1wXPBccF1wXPBTcFRwU9Ze7Pm
3VvRQSo899xbAfN9jUCPEh9czNfBL8EzwTHp+dS3ZffhESpZhQJfXmUNNs78
4/XA1z1K4X/ggeCA2L2eQtoBwXvAf8B9wHvAf8B9wGPAZ8BlwGPAZ8BlwIXC
icKHwlvCX8JdwiXCKcInwu/B88HxwWvBb8Ft2a69lpzab8FtwTvBP8E9wR3B
IcEfwd/C48LhwvPA98D1wMPAx8DFwOvC78LtapBz2CDzdYzFhYbuN19HpR4Q
mlReB18KbwpnCl8KbwpnCocGlwaPBpcFpwWfBR8FLwUnBf8MDw0HDVcMZwxf
LMOr6U3N36GR1fdt8tdZg1Wbkpsfyu+w/uqZV8zfs1F2SMxt8/esVOdVn+T3
jAOEC4QHhJeDn4Obgx+DJ4Mjgy+CN4Izgv+BB4IDwv4lHtobvS+JQ4ZLhkeG
14XfhdvF/QgPCgdqm75+4jJx/cQ3wjvCOcIBwgUiP7yOrV8GpwYPBh+GPJNJ
tvsgrgpeHX4dbh1eHX4dbh3uGg4b/tp07d3gsOGv4ZbhmOGX4U7hUOFP4U7h
UOFP4TzhPuE94TzhPuE94SThJuEl1an2j9yX1Xivqc7mfVlV+SPVTLkv4/rg
/OD74OXg5+Dm4MTgxuDF4MTgxuDFjNLOTkbt7ODo4Z/hoeGg4Z3gn+Ce4Hng
e+B64GfgaeBo4EDgQuBBkL9PHj85/OTIkytPnjyeDb4Nrg0+DV4NTs39xYWd
ZF3idZtbTdtleKyeFhg3UNYH8DzwPXA9Qg+cs9YlGmc65i4eu0+zmeVk/QHP
AN8A1wAnADcALwDvHP8c93x0Pad+ra9EGut9mldo/zZM9T3R95W4G/jNeM44
zuRrk7dNzvaIx2/ry3rU+NlOw8Wjnt0yU3JZtyGnldxWHB8cGlwaPBpyWMhl
IY/l9LgJD2Sdyiv79yJO+0OMYvv8+sg61cfD2fxlParWyr92ikvvVvrIcVl3
wrfAu8C5oP+E9Q3q1vAA8AFwAdgnZt+Y/WL6HOh7oN+B/NmSOg8ymc6BtB8H
cmvxh/CIcIjIryHPhhwbxrG4PXg99P/QD0QfEB4PPg8uzz7txXTSXgwuD+4L
Dgz+C34MngyOzHnd7xqq+18b675Xxsm4IsyXcURwRfBEfn4bLf/b+irjZLwL
nAt8C7wLnAvyWchrIaeFHH9y/cnzb2YbP5OrT18ffX7kwyf2OHnx5MeTG48j
hSuFJ4Ujxf4tdVDkMZHPlJDLpB0mXCY8JhwmXCY8JnwavBqcGrwW/BbcFpwA
3AC8APLuyb+nH4e8e/oa6WckH4q8KHKicJ5wn/Ce8Jbwl3CXcIbIdSDPAUcH
VwdPJ8+lHTt2mO97bv3JoClrjxpLN3o2m5bxhcKJwY3Bi8GbwZ/BncGdwkOg
HwrnCf+B6wa+Ed4R+xf4Pfgh/J5xROyP42p42V4HZ8L+vjgN9s+JH0AeP3WA
OC44MLwv7gsODP4LvgveC85L5ySzU8r+2rwjHlufDjfHk/k2jpL9NRwUXBQ8
lGZnhlSSfbcJ5ZzHXJ9g3vdWLRkv+254IfghuCHVvevXlv243N6d8778Eqs+
FF+eTPbjcDVwNvA18NXw1nDWVvWsPkLOF0e/lFGyPlPkYumF8nvGCcMNwwvL
MzWXk+z/fg5uuP26eZ6cc93xUvZba2rvB/8H96fe9xnWfu7NNzXaZ44+qx4v
ODxK9nPDPeuMkv3cotvr+JWucV/90T5kkOzn4uLg5ODjVApMb+3zBhYfuk3e
13vd+xfyvjgxuDF4MQMXlpH9azWjsiH71+p4khpWnQwOBy4HHseAeyf3S77/
telXdsnxSZIyWQo5PqmMCm0ntvFQ4+cHVLxXaJOa1rtKfdlPx58j5waHDrcM
xwy/DLcMxwy/DIcJlwmP6d/9nP91nb9S5JaX1BW07ZY3quWgS2rnS7dAqSvw
b1b3ttQV+I+eJ/UJ6qxHAWepK8ATwhfCFcKVwZnBl8GVwZnBl9m1vNozqTfo
cdHnuDLHT5sGXHOY5RqlbvvUcxWPYcD5Ytvl7xq7slNK+bsG5fyW++82HkaT
U8XaynHL+iybddzIzyJPixwtHA7ytMjR8tR1nLG6rjNC13P+u6/1P/ZbdW7C
B52jUELnJ+AnlbPNg/CT8JRwlHCGcIeoD1+ic9DIRXPReWjkoJGLRh4afaT0
ldJP+uHdlufSvxS260hOc/xjfEq/YoWMf4YMuzNuSqoI49f7KzLe7B5tXHVa
nrx6v0CFB4MPgwtDfyb9mvRp2o8nvgmuCc4Jvgl93fR509+NG4cjhx+Ht4S/
hLtUWHs9TbTXg7v0qdidLFL/0/zCzLKyr/fereM+y0nR7hoOG/4afhueG44b
ThhuGF5YrPZ3Hmh/Z6D2d/Cc8J1wnXCDcITwg/By8HNwc3DycPPw8pwK1JR5
kHFm97gb4mtdezFws8yD2r5MOkf2H30bnZL9O7XhumMd2b/DWcRdxFt8We1j
EfFUshWeXnJMa3/jtFuIl7gq+JR4lTiVd04Vt/ZnPSJey76qsfRl+FuZp+Dz
4fUlOH3aocGlwaMJH9BVyXVpeJn2e8RXCZmW63uIef6W6nh+qNTpVu/xtpbU
t67s6WfV6wbZ1nvxZXBlcGbwZch3IO+BnIf8k50Oyv3IrVkxH/FVLnTP+FJc
FZwb3Bu8mwTfRXsvOC94M/gzuDP4Ovb7Ox4MPgwuDO4ODg/+Dm4QjhB+kH1f
AEcGPwZPBkcGfwuPC4cLrwW/BbcFNwVHBT8FNwVHBT8F1wTnBN8ETwVfBVcF
TwVfBVcFTwVfBVelpfdvTaQO6mTdOnu/h8Wpcm3qVJc6n4m7RlaVOqgbRY5Y
45CD3+Zb45CsyyZUljqosbtaj5bxTL/wrhNkPJPpafIUUgeVP/bYFhkXJXUs
N1rGRUHR+ZtKHdGPobms1w/3umC9fovhZVOsig4whj/Le0TuO9OTfPtV7jt4
Nvg2uDbsL+Db4Nrg2eDb4NokODra1cHTwbnBvcG7wbnBvcG7wZvBn8GdwUfB
S8FJwQvBDymg3RCcD9wPvA+cD9wPvA+cGNwYvBj8lQY2hwWPBJ8El6SN3nfu
p/ed8+t9Z7wZ/BncGdwUHBX8lD7aNamsnZM52jfBNcE5wTdJbL6PE4MbgxeD
v4LHgsOC54HvgeuB54HvgeuBX7LW5piw74k3gjOCi4OTg4/zWjsmV7Vjgo+D
W4Njg1+Dy4LTgs+Cy4LTgs+Cp4KvgquCR4JPgkuCR4JPgkuCL4I3gjOCL4I3
gjOCL4I3gjOCL5LgjWhnBD8GTwZHBj8GT4b5Gi4LTgs+C27KS9v6M24Kjgp+
Cg4HLgceBw4HLgceB+4FDgb+RWHtXvTSDgb+Be4CDgP+Au4CDgP+Ag4KLgoe
Cg4KLgoeCq4Gzga+Bq4Gzga+Bv4EHgUOBf4EHgUOBU4DbgNeA04DbgNeA04M
bgxeDO4IDgn+CI4LrgueC94J/gnuCY4CrgKeAg4NLg0eDR4MPgwuDG4Hjgd+
R7D2Nty1v4G7gdOA24DXgNOA24DXgIuAk4CPgGuCc4JvghdS2+aGkKNNrjb1
lvg0eDWsS5DPSF4jj5OjTa72Z9vjuDGse5B/Tb8pdaF4MPa8aHKx6aNlPkW+
fHXb58erqG37/OQp4yow7sINwhHCD8LXwdvB2cG9wMHAv8AFwQnBB8EXwRvB
GcEXwRvBGcERwRXBE8GlwKnAp8ChwaXBo4nQvsZR7WtU1L4GDg0uDR4NDg0u
DR7NJu3B+GsfZrl2YfBg8GFwYfBd8F5wXvBd8F5wXvBd8F5wXnBTcFTwU3BT
cFR6ar8DNwVHBT8FNwVHBT8FpwS3BK8EpwS3BK+kcrNMC6Q//+3I511ShV5Q
Luq8t9Q3dnwys73UbR5f4Vg65MtdNbRO7qJSJ3lf+xPx2qO4ph0K/Ak8ChwK
43Oyoc1uXDDm5Sk2tWP6K0a7v4bOGnrjuaoa9qjBm6W+au+XJA5ZX+1Uh3+4
jLzq/0Lt7jw1+bulvsbyYduTy+MNUqcYIo+Tq07OOvnqOAcJ7oH2DvBL8Exw
THA7cDzwO/AP8BBwEHA4cDnwOHBEcEXwRHBHcEjwR/A/8EBwQHBHcEjwR3Ap
cCrwKXBWcFfwVnBZcFrwWXAscC3wLHAmcCfwJvAh7NeTxK6rXH/IdyfXHa8F
vwW3Bd8F7wXnBWcFdwVvBT8DTwNHA28DfwN3AycDNwMvA18EbwRnBI8EnwSX
BEcEVwRPBHckyDZewkfBS8FJwS/BM8Exwf/AA8EBwfPA98D1wFnBXcFbwVnB
XcFbIX+fPH5y+PFg8GFwYfBg8GFwYd4kUneNb4F3gXOBf4OHg4OD04Pbg9eD
P4RHhEOEi4OTg49DPiZ5meRkUmdLXiY5mW2XnF85K95QGZadyS77oV3adw+T
dTZyG8lxJL/Rvo9GfmZi6yrk5JKbS17uz+PU4L+tl+Iu4zDjL3sksm+Fx4zP
jMvMeWo/7xIbz5CHQt4z45NmifgXiT1O3od93EK+hn388yMRL4O8DPIzPtse
T2YbXyU2LiKHlFxS+mjImyB/gusYvgveC84LvgveC84LLgVOBT4FOaTkkpJH
2qtn2ijZJz1aoNhNWW93WvDXNfl+yUdOyEvWOckHdD5yYZ2X7KlzknHlcebx
5fGw8bFxsdP+nuSA9EHcTvf3jtVNzhnObeZafRDkx5EnR47c3uK3s0v/Qs2n
eas3HBVpnG4ZaPV34BzgHuAd5M9qWP0mSSMOtpF6j6cNTlv9JuTQkUtHHl2T
eRmS/rnjuDoYGLO4foPDxqy6nsmlL6b5zoAjZ50fGavKO2aZEROmDkRXzC39
PgN8T3T+o9FuFVflnvuykF1G6z2eliuBx4DPgMuAu4DDgL+wTefZzdL5dht1
rh35d+ThkYPXRee4jdK5bjE6z41cSPJ9M+ncM/J/yQMmB9j+fHKAcSlwKvAp
klcOfireg0eq7lbu/qbd3ay8fRwRXBE8EdwOHA/8DlwNnA18jR4nNwyV/tDp
G/Kfl/2+r7W6WP2beBv4G7gbeBv4G7gbnXXeYiWdvxilcxdxSnBLyGnEKcEt
wSvBEcEVwRNZtrdnesm9yuk59ojkd15p6TZG8q/wUfBScFLwRfBGcEb6tf9m
9Q057fDeLb//PuUKWH1D5K+Rx0YOW2RM1pnS79OplcNY2S9omDVbA9kvwGPA
Z8BlwGPAZ8BlwHvAf8B92NO6R0rJIa1x5ttpyfd6mqa49Xd11e5Cee0wdNP+
Ah4DPgMuA+4FDgb+BV4FfgVuBXlt5LeR2xYx5JOf+DcL8gdZuc7VM1y38pzJ
vyMPjxw88u/IwyMHDw8DHwMXA9/CXhdBLhs5beSzkctGThv5bPgWeBc4F+Sp
ka9Grhp5auSrkauW9Ihnd+nDDQhPdqep923VqOfyWtKHS94c+XPkzpE3R/4c
uXOPZi45LfnXJ7w3WI7QhMVulh90MvjZdelP39g1bqfs/2a7kCqX7P9eLnzR
6k9/s/9wjOwXlzlQ2epPxyPBJ8El+Rx6P1zWc9q4vc8j+5IlssStkusGbgqO
Cn7KBV3XFP6zrkk11HVNNW374/gvXjN9bsk+1Kxpx/bL/uNv73tekuskHgY+
Bi4GLgtOCz4LvgveC84L+YPkEZJDSP4geYTkEL7J2f2W5DeNiqtTWHLsons1
8pYcJzw5fDlcOTw5fDlcOTw5fDlcOXwyfDNcMzwzfDNcM56Pb4Zrhk+GV4ZT
9t4aR/ROGNd9pA9ROw14DjgO+A14DjgO5JWTX05uOXlV5FeRW4WLhpOGj4aL
hpOGj3ZLjyuqaycNH+2QY9eWsm4TUK77TdkXcJjpUEXWbciPJk+aHGkcI1wj
PCNy58mhJ38+sXwJfBS8FJwUHDtcOzw7nBLcErwSXDecN3w3XDecN8al5OiR
q0eeHg4BLgEeATmJ5CaSl4g7iEOIP4hzg3uDd4Nzg3uDd4PvgveC84LvgveC
84LvgveC84K/gseCw4K/gseyTfsg+Ct4LDgs+Ct4LDgsia1/4qzgruCt4Kzg
ruCt4KzgruCt4KzgruCtJLaOmth6KTnm5Cn+3x4n39w+r0nscXLM7fMmPDx8
PI4PeeU5bfOv0OVX34urlDf6luV9eVcdYTlf5OWRn0duHm6lfV6DE2Cf1+An
4SnhKOEn4SnhKOGL4I3gjOCL4I3gjOCF4Ie4azcELwQ/BDcEnwOvA6cDnwOv
A6cDnwOvA6ejWks/T/Eh+joWtj5/xgwjrc+Pu4nDib+Jc4l7iXeJ43hWu454
jvgxeDI4MiW0z4InM1L7LORvksdJDic5jOQykseIw4TLhMeEQ4NLg0dDjie5
nuR54qngq+CqLLbVR+FFJuazUB+F94jziHeCf4J7UiCROrHE6qDwtPC1cLXw
TvBPcE/IqSS3krxK/C08Lhwu/C08LhwuvAT8BNwEvAT8BNwEHCZcJjwm3A4c
D/wO3A4cD/ocEzsf8U7wT3BP8E7wT3BPZqzrn1nWefaO6p9Bcj/KNG9dQdZ5
8EjwSXBJ8EjwSXBJ/hyeb4i4lf0jwj6JC/fP0G7R4sGRI0yuMHnC5AiTK0ye
sPOrFiskr+Op07DgbluiVMbFD5tLDkZ9W50Deb84IrgieCLk85LXS04vuWCb
bXXmrFOR48v6z/+v9ajE1p0SWy9avu9pBslxcq6xoHG6FHFq0p4V1yWniBxk
cpHJSbY/Tk4yLh1OHT5dYo+TA0suLHmw71yD0sl+xImR5RvKerXz9oNxsl6d
WP8IebvH7XWVOleXnF3ydZMtXZ5K+kouN/Qafz8mRGV/lMKQvhJyY8mRJT+W
3FhyZMmPJTeWHFnyY3HUcNXw1HDU1mtXDU/NKDbC8l3K5zq/X/KMRzQtbTkv
5KKSk0o+atmir1KnLRGvirsMbCW5qqtmdu4vearkGpNzTL7x+c4P5HxRd5s+
+yDua/yP0e/kfCF/ljxacmjJnyWPlhxacv9xAMj/J3+fPH5y+BvPSzFR6k6z
7rmc/mb3aLW78gar7pRcfnL6yecv/qml1R/ncHFTc8mLqFDSp6n0x71fUsXK
t9m6et1m6TPK3neilW9Dnib5muRquuk8zX46X9PQuZpTtbvQTTsM+Au4CzgM
+At+Z6uskpyc9kd/uyvXB+euLs3k+kCeJvma5GqSp0m+JrmaV4dW9JS66PmX
vqWp3STKaH84r5U/MM+Wd0q/OU4DbgNew5rUea16+M9VPax+ig1ufax6+LHB
sQ4Xj19Wj6e8mr3T6bBx+sIkK3cUrwK/Arfi4AM1p5ZrgMp9s9PLjqOeGfMe
rq0/JfyewlfAW8BZGKr7FPr87FMw6FPAt8C7wLnAG8Yfxh3GCcYNxgvGU8FX
wVXBU8FXwVXB8cX1xfPFNcE54Tq5dvnpjpKH1u3mAH9ZJ/n2tUJtWSchH5a8
WHJiybvAP8E9eZZt8BHpc5mc76PflLVH1fmV35tKn0uBdpu6Sh7dJt9lLaQf
ocGoZ1a+HLmx5MiSH4vvgveC8+Joy5HYq3MkyLclB9fQObfDbY+Ti1sjsJqL
9D/GZ100TOq6Z3fzmS113SnSFB3apWSEmvPpQodUi6KNFU+2NhePAxcHJwcf
B28GfwZ3pub4QoeMpM+MNI3a7ljlHKB6/vrbiE7+oQnuCw4M/suEj7GzPjrF
qrLOlVM+2hZqZJu3vOnka8HK9eZkrwWLI42xbvGLg5c/Uak75e4p+VG4BTgG
+AW1K22uKvlU3162GSd9jkeKtnCUPke8BPwE3ISZOj/3nM7TJUcXBwIXAg/i
2+d/Oxd4xDjEuMR4xDgQuBB4EDgQuBB4ELgLOAz4C7gLOAz4C/m1u4DDgL+A
R4tPi0uL24Hjgd+Bw4HLgcfR51MmF+krfP549I9w8zoakK9IdukrxBHBFcET
wTXBOcE3wUfBS8FJwV3GYcZfxl3GYcZfxkfBS8FJwUfBS8FJwUfBS8FJKZzN
O53ker1Mfaye7PuUfpa6vOz74Mnhy+HK4cnhy+HK4cnhy+HK4ZzhnuGd4Zzh
nuGdzd5z44LkdO3/fPvuyA7+xowBe3ZJThdeDn4Obs7O8jXPSx5Xt7JJlkm9
yvzj485LvcrB7nPaSv776JGlXomDMXle6HXJgcexw7XDrcOxq2F7fPWPv+pl
PxmpZowdlsH54BM19lDWcZuKBakhen2+ll6fb6bX5/Eq8CtwK/Dw8PFw8XAv
cDDwL3DvcPDw7/Bc8V1xXZf+2sHKr2vY1KPC2szBxg6jrZVfR646Oevkq5Of
Tp46Oer4r3iwOLD4iHiJOInk4JOLTx4+Ofjk4pOHj3+Jh4mDOeHi/fuSP+m8
dJGVV7mpW10rr/J/u27D+ox9vpDYOkzeXC6F8r1bcMKeu9jd926w5Gf6vdts
5WHOLNPHysNc8e6y5LiqglPfNpHx//QGv1yT8T/eG54b7hveG/4b7ttQ2/Nx
33Csca3xrHFKcEvwSvAk8CVwJfAk8CVwJfBN8U5xTrMt+SNecm4/eI+oGugW
rY72bpesbMOHCT4fXh9OHzkbOAB4ATgBuAF4AS1sz8cLKOIwYIGsA7cJzXJF
1hkGtt30p6wz4Oni6+Lq4l7gYOBf4HbgeOB3jK6Weq74N1lD3p4WFyJjxcA7
ch3AD8YTxhFOteWY5S4UcxvZ0pwvGMUKTu8t8wX8SDxJHMluX5v0lPzA/H9V
ySl1cQeP1MgudXHNHctYuZT501+UPEnDZ/JEK5cSVwBnAF8AR7CFrX+ZPGjy
ocmFTvnpSGbJbzzwqn19yWdouulGL8lnwEHBRcFDwS/BM8ExwZuxn1+JPR6f
evwbyW3uUCaf9TuZNqPTd8lD3qa9Bvwc3By8HPwc3JwUxVYES/3b9IpFv/9x
9Ka61mX8eKm/Wvu6+8OJq28bPpNqbT6z75r60zm797jz8f9tvIej0b7Xrfzi
hlYs3n2LuDFVKnTuJNc3XA2cDXyNvpeHBOdcEqWK1rx9U/Lyt7S7mEFy8nHO
cM/wznDdcN7w3doOmDvpuddDdeFev5JFO0YbJU/5zpQ89sl6fvFczy8MPb8o
uGxYqnq+x1Wp6im6FvC4bEy8vdhyE9wWpr0r+z75CrxwlHWwPxu7HpV1MPLQ
yUcnFx3PAN8A1wDPAN9gnnYH7PuJJfV+4tk0+X5rcPKBqhh87Uaamk+Niv3C
wsKnBaviPmH3xQ/4lLlegHl8jFGVMzvI8fHpnWezuBd/PvZ6Kl5BxfDemcQp
KO++eNKPQTfUYn+f1eISlPP5x1s8ArwB/AHcAfLlyZsnZ35zux4NxrWOUeHB
kxtJ7nvsoCUrJe/d62Gmf9rMiFcF7xW/Jbnvm92iP0qOZd+DqSTnXe09OPSg
5L5nvNMks+S94wrgDOALnAiZJ66AGjfRX5wBw9Gj3CDxBQ7Y5ndz9fzOiHq2
S/K3m438YPUve3wYYvUvJzZv+j1ydZfw2aNO1HkVn/w/z5e9y32Cy/wVYXx5
8nlYtQ2P1S9vQ4IuVghPyBeqYssXOhrSycoDmdI26A/ph430GWDlgXTpWvzZ
o8WxRp1PaX6ddCpIpT9UNcnEiaGK3H8cAPL/yf3HASD/P3rHlkaSp1/vW5qm
5nE25icrZeXqj1lW0srNL/fsvBxPo3GBIVZ+vke64BbiQLz8bkwQlyCiWQXL
I/iQyPUqYlr1FAWC+p4Yt2V4TL6gvgnHJ1/soaOP72w0im3NWWFcg+Wqs+us
lCEfX6jKn+OOtukYp1Y4fn1Vofwto6DRZdbWJ8EJPg1eDU5NFZ1fOV7nWX7U
OZZRum4wRtcNphnys26wg65H6q3rkWbreqQBXXwnTEkVoU44Dcwg6y3r+8Ql
lfWW1zGZRkq+kKe/RxbJ/eu6cqyVL0S+h6vO9yij8z2YT32zzaeS/I//e6lG
2NYDc+v1QN94J8OcL6vuy3MEyHz5eNmh1nzZvo9Pn3sbWz/1Qd1PbV/f26/X
97Lp3KLxOsdovM4v2qPznqbq/KdcOvfpfqv6iyX3cvPvsyX30khbvJSS3Msz
FzsWk9zLzClSSZ6YUbdpmJUnFq77Mn48/dmXUVH3ZVxZ86fLw9QhKnv8oIYr
Rj4xbi3ZutHz0RMVtNOvnORYxjwcaeXCZR3sYuXCRaWslC5tDj917J8DPq0O
PzK+jC9XqO6FWNV365CTo8r7qQIfGvSb/yDK8DoxPYvkpDWKPJ3GfL7Rct/4
w+bz1Z6x7fLL8+u2GJnHfF9j9oxrTcz3VRdP3/aS9y2oc+L26dy4iTov7syp
u0vMv1dtm2b9vWrI7tfV5e8lR2+FztUroPP0pur71Bx9n+qj71OF3fO5yLpZ
uzU1nSUv63Sdca1k3cxx1dQaDRbHqMVHnafmnf7IKO3Ws3b9tsHqic5D6avz
UVbpXJT2Ou/moM6/2a1zb8J9tq6x8jkzfrXWx3Lduz1I1sfWZsievtPr04bj
yDNRv07yN+4tHXRFclN7LZy/p2q16a6pc65J9p/XpUe6T/up7tserPu1W+i+
8UK6j9xB949Hd8/QUT6Pg2eve/Lf3X9UWCOPz7wZN0NygPuf7iB5VsbfuWYe
k77strofb57uzzup+/LIHSql+5WS6H6lwrpfqZbuV9qu+5WK6/rhv3X9cC9d
PxzfJKCjd8gdw3vdhbrSn9Kmfqda0p9S6vnVD60zP1HLPYKdfz0Spr4/eOcp
fUkxjj/7yhaX+dlnFqT7y5I1dWgurxM56kBn6Uv6NVm7svI6U3U/iZfuL6mm
+0om63raPLZ93jaZm32LnDH1RGqnNGn+8zh/KzsgLtPHRa7noyek+c861V66
r6Ot7vPoo/s7ovuWz5L546IT9ue3NVZO2XdkzokIp8B/zWs6/HxfV/v74vji
+uL5sl6TTDulb/S6ze3hqzNIHvXkTWHPaiY9oG6vfPFF6tw267qBu7qOYKuu
Hzin646CdJ5SE113NFjv3z/X+/nT9D5+gqut6yHxtXfOCXom+cOeTSOsOq5J
pTd7yv5vh59/r6v97+2t919L6/3Y4Xof1k3nTrzRuROlde4ELtpd7aTho+Ed
4h86avew0KBZadtVjjaqD/oWJrnTL7xeZZPc6amXj+53n2GOZ7ffWxt9J8p4
kc15rniyEemnSz6wqvXJqZBcJ/NVumxdNybVe+4k52PfQf5WjnFLh1NWjjGO
9QhbnWRKm9+6RddN4bzivrbQ61q4aFsYd+vxNu4aDhv+Gs497v0J7d3bnbgx
2qMZ+Cqohl+m06rayybK78ctI7xPyuXifw3R+wR43af0fgHeFf4V7hXjovmX
Cpfx892UMB4ID9orjpQq+Mt1y5Vqlt7F8qRqbpx4t7E5fniYdP+xRv8xfojS
Xs8r7fXU1V7PDX0+59B9o7f1ed1Hf44Q/blW6s9TTa9f3NXrGZn1OgbXYXKq
Vuvr8O6u3T/nLhxt1L8/bc+wJhHq6e7mnu/nBqqstvvpRH0/3afvp+QpZtP3
08TGA/vcHpeu1fC84Zp968fjxe6rGznc029IGada/z67wdZDhvFr4K4z6Q/d
UJncvCP9bj5Xj/RxiLEdh8Sci31OC4f7dws2psz7LU9AnRj1OXeyqaWeP1LH
el4t3r1ViPE19I8lD83voeoZ16m//xWp8uv74y59f5ys748vM20cab6O+vNw
ttzyOrd3BFivU9vpyYGY4YHm69WNCz8bqzpfH732wflQ9TCR+8shfT8lp7ag
vp+SV1JQ33fS6PuOPdeihc61sO/77Nf7PmlztN9vfh6jY8U+8nkMz1L518nn
CYn6e5Qch25OK3OZn9+o26DCNPn8F+rHlDOPg3I/eWeBeRyMqpl+WMfBr329
MfL39mh7M6c8/3TVI9bzE6unsueALdb1rke/Zb/qUc6Hf43l7q9KvAl5oXJ7
biprfu9qyuzXseb3bnxdcDOTfO/Uzba01c22TmS/O7Hzxe/JrklhE+e48i+P
Mx7IXbFiyv9yQl6qZPn/576M6SvyltnSMlrNLHy23qDBEcbAsc3mutQNUEWq
Pt5zfUe0eljmtx4uMY+MlXeGJnm6PyShHnu4rsd+ruux7fkbETp/Y5yuA3yr
6wBX6zpAhzlZRoeZxz3f5rFrRrsHGxF5+iRfZx7/Drrenfp3H133nqrW3jHm
81VAv8Gr5fnzk1VIJs/PODFX3NBHEcaZVQ45g+eHGMs3hozzqx+p+ur7VJS+
T83Q96ll+nfJ75Tf56ymG/f37Htb9Rv7edrtWY+NP++ULJ65b4zapMcJV/Q4
obIeJ1Ts2O6x+Xzj298hPcznq36z0lSW5x+feyTe/DyqQViUfB7VeEfmsfJ5
Cut1sJZ6HWy4Xgc7Ed18lByHJOkKrzX/LtXmfax1HHx1Hhn5ZKd0LlnmXKvk
uKmUg6Z5yvPde6S0np+YT01/aRs9DhmkxyEr9Pjtih6/HdHjt6qxtSLczetg
jl5L8hYoHK3ada+Rp+i8QLVq6YWLUaHPjOKfzuSouumsMTpu+6LHmR4k5Jk6
63zT5jrXNDGXeZTtvjZW39e4LnOd5vq82bXKwNbHbxhte40udf6EYSQdVf1i
XfM6yXjsTVoZFzVM+J0nNq4Y3iOynXm9Vc3GtrOutwfWjraut330eKOcHm8M
0+ONci0KTzPfVwWVqFDVfF+1Pu1xP3nfRst/t84rcux439u6H4D+gCDdF7Aj
Jon1+exucidbDpi/zgEroP8/OWE8XkGfV5xnnF/vbi0LN78vY8esovnN78uo
tmpgbvm+uC4zD+D6zHW2v77ukiMUdLJ6I7kfRXoM320eH+PEoY9RcnxOnK18
xfze1akex7Ka37tqeLLyLPne2R/MpMebH/Q4k5zbrfp30Uz/HobrPsC6ui+w
le4H7NaqxKuR5vmzd+GnjAv73TZanZk2t4B5HpXp9rMP11334U7SfbjZnB+5
NTbPqwp1mqcPN8+z+pU/hs4xz68H+ne8V/+uffXveXvI7YHt34YZNfxrtGp9
JVJdjpj/UXJlR51LKq9jeHTb72S+jjE5x6n78jqT9Pg/q20fIdb9Z7/os6Cf
/aO+um/0aPEm6UaZ14tLKetGLOh3W21YvnmCfP6No3wckyQZVIN+WfooW+q/
J5/+++gvdtTjm2N6vBOgxznMFwxrvjCoBq/DvOOM7fHkur/1u/u/+1vn6+vX
AH09Y77D/IT5CtcHPj99h7x+a/39TdLfZxP9PS7Vv3Pqdvmd45FM1es57/R6
jndYZ+t3VXt38YxyPWneeLD1uyrs8GPgLycClP+h+LYeW+8aS/4YcHjag2fq
Yuo6RV7+fl9Fuf+VzKP1eaOyo5fntORx6nOT/fsm7I9Qr1ftuePQJsRY5zCv
e4HpkWqnHt8w3pmixzl2J4XPs8DnWr1h5uco6T+6tHyu08NzZQ4zP880Pc5j
3Md4r1nB35YmORFgbNxysWT3rXdVX2O6j3zOjPp8+KrPj0/6vNh4acvLTuPv
qry70q2ZHB9g7Epx9GUX8/mR+nrB9SNQXzcCFo1saX4eNW9prhJy3fUsEplH
Pk+mgsW8zb/XaPX5cqj596oOz5r2kL83/uyK7ObxMco3b/SreXzU/FoZ1snx
YZzBuGOhHm+kufTd2fw8xs2ci0dNiQ9QpeJevpXPU0nPT5ivME/h/s39nPs4
5wl9qJwvjJ8YT23X46jm+vMwnmIcxXiC8UW8Hlfkv9ajuXwvb2ZHWMfhYFy7
XHIcuK/31vd57u+X9f3S15bn6VXsj8ZyPOsebmd9vwOuRGaS1ymrr/vcB7j+
f3kV93ZxyC41YcmYTt0a7TZaVktn9SfGeSX9ZM4XVKmwZPtkvtBG3bXmC/tt
OcY79XrOnmodR/dMd8s4NrHgHs/SccbfE32/zjl87/9xvv9f97XXr5wny+uk
fphvp/k6atqWEQ5zzddpUP1nfeAXXR+YVdcHcv9lv5TXZ/zdVI/HHfU4fNug
/SHy+cIHtIrslu6WanqrSOb55utn9Kh/V95v7f0dcfL4/S9L8sjjFV06rL5u
zgeqzXzdsOGIQCNJnVX5I8xxOH7zID2PZP7YQPd73rD1ew4plfOJ3L+8lx7L
I+ONAeqmNd6ope+zrMdzHFw6+/jIfMTl6UFr/N/p6hhrPpLYvDWxPsofRWNG
y7jCy6F/Sbm/726w6oLc35lv9NbzD+Ydbdv8cBh/NdZ4U2dYpwcDAtWB1Dve
ZNkRqibo+SHrrxP0PDG4y2nPP58+MpzyL7iqdkWrP2ZnjNm+M0RRRxKs60qo
Jyl9Z/M949B1Fev3m0eXtyeNqf6xaftGPU+07oXzk/N1sz5Pg231Ko769Qev
/XFBzp+LP27nkvv4Q+fKS+V6yzyZeXMWPV8uU6Oz/G5V3NVDu+T7L3OtS0r5
vfW/08uafzmumGbNB8uv2WMd/4uZs1u/h+pJBzc2fw9qyaJu1u+hdeaD9+R3
9eHUNvn9GPtPxmeS349blKs833DvEW79fpLtdSggzy+QN+kQed/TAfn3WufL
pFfW+ZLMto6Bq0tuvJfOje+jc+O32vYrGWdO1o58Se3I99SOfIxt/dNNr3+u
7Zc9ZfH3J9WinWumTTl03Uixv3BIT/N7CbWthyyxrYfMfhxqXhfLJJy/HfV1
4YC+TnB9KOXtf8ycd6njv3ftbM7DjKQ/nvxayJx/VdL7Jqv0vomL3jf5PwGL
ovY=
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{358.61603945548205`, 249.84759294500884`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-3.14579, 3.14579}, {-3.14579, 3.14579}, {-0.9999017633610756, 
   1.}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.5544396032659424`, -1.5057470157461725`, 1.630203741204772},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.623583920912327*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "visualize sin(x+y)", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "3DPlot", "3D plot", 1, 1, "Input", 
        "Plot3D[Sin[x + y], {x, -2 Pi, 2 Pi}, {y, -2 Pi, 2 Pi}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{"sin", "(", 
                    RowBox[{"x", "+", "y"}], ")"}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Sin[x + y], {x, -2 Pi, 2 Pi}, {y, -2 Pi, 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`density$$ = 15, 
                 CalculateUtilities`GraphicsUtilities`Private`max16$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max18$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min15$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min17$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`xmesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = False,
                  Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$], 
                    True, "x"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$], 
                    True, "y"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$], 
                    False, "z"}, {True, False}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$], 
                    15, "mesh density"}, 1, 30, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$300374$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min15$\
300379$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max16$300380$$ = 0,
                  CalculateUtilities`GraphicsUtilities`Private`min17$300381$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max18$300382$\
$ = 0, CalculateUtilities`GraphicsUtilities`Private`xmesh$300383$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`ymesh$300384$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`zmesh$\
300385$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`density$300386$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`density$$ = 
                    15, CalculateUtilities`GraphicsUtilities`Private`max16$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max18$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min15$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min17$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateUtilities`GraphicsUtilities`Private`xmesh$\
$ = True, CalculateUtilities`GraphicsUtilities`Private`ymesh$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$300374$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15$300379$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max16$300380$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17$300381$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max18$300382$\
$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$300383$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$300384$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$300385$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    CalculateUtilities`GraphicsUtilities`Private`density$\
300386$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Function[Null, 
                    
                    Plot3D[#, #2, #3, Mesh -> 
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    MeshFunctions :> Flatten[{
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, #& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, #2& \
, {}], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, #3& \
, {}]}], 
                    SlotSequence[4]], HoldAll][
                    Sin[Global`x + Global`y], {Global`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$], \
(-2) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max16$$]], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min15$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max16$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min15$$ + 
                    Rational[1, 250] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max16$$]], 2 
                    Pi]}, {Global`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], \
(-2) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$]], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17$$ + 
                    Rational[1, 250] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max18$$]], 2 
                    Pi]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, ImageSize -> {300.}, 
                    ClippingStyle -> Opacity[0.25], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, MeshStyle -> 
                    Opacity[0.45], Mesh -> 20, ColorFunction :> (Blend[{
                    RGBColor[0.628962, 0.149248, 0.135592], 
                    RGBColor[1., 0.634379, 0.186801], 
                    RGBColor[1., 0.895537, 0.582162], 
                    RGBColor[1., 0.995346, 0.826535]}, #3]& ), AxesStyle :> 
                    Directive[
                    GrayLevel[0.65], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BoxStyle :> GrayLevel[0, 0.35]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min15$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max16$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min17$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, {{
                    CalculateUtilities`GraphicsUtilities`Private`xmesh$$, 
                    True, "x"}, {True, False}, ControlPlacement -> 5}, {{
                    CalculateUtilities`GraphicsUtilities`Private`ymesh$$, 
                    True, "y"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateUtilities`GraphicsUtilities`Private`zmesh$$, 
                    False, "z"}, {True, False}, ControlPlacement -> 7}, {{
                    CalculateUtilities`GraphicsUtilities`Private`density$$, 
                    15, "mesh density"}, 1, 30, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 8}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Grid[{{"mesh:", 
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[8], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7/\
APkPiMBkXwBQntBcakASUp33uLncbCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z05klHa7/\
V6+qo1HyQn6Q08PbZmV85yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Bt8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJnw63toavXnsUDGUExlAl9LAtYp4p0DTtIdA1a3Y4iG/++\
Kg8fio4j+n3goqE6gfWO1ZALIwUwDGd4FsvNVF3MS8DgoAiF86SE+\
dO2wu0UUxMx3SW4xvncvW8LS6oqfbU3CupWacfH/1NfCBjF5L3uJzd2fEXFsblYu+\
sqP45dQM8v20Lr+TJSt4wvW2OtIFhx1Qvs/\
msdZU8IVXLuuDnVF3QbNlojOdPmPof6ZBpsxzGi7Zh0NmRrfBq5S3Dv2wLL3Ns+\
bm071vz2TtKwFWToZLbR0kKPo+imfLAC7R9ujq3Do9xp+\
I7RmdIBSucyMZZdovrjocVeL0jxFi7yQakI+oJENGcWhdx3O6xKTO7GShILPD8un7ZY2NZhxJwZ/\
vaM0GYHV+ekHVrE5qDdKHuYJLsyx8Vt5LLmSZD3g+EoVOq1or+\
FtZHWXIFGcvASGK8oKnXYA6rpEaggmU/KEHiHARDSPbLftw3/3CxEkjVvkJ1Kc/\
iwJXmNDyJflngQyqmJmtu14GjK7htMZtIntSqi1iaLk6bzTHdbzLduKE50ENJCC1J+EDv9oRuT/\
iLe8LSDtwtCd2S0C0J3ZLQLQn/75LgIsZ/pd9m3rau"]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Sin[x + y], {x, -2 Pi, 2 Pi}, {y, -2 Pi, 2 Pi}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max189$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max191$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min188$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min190$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max189$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max191$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$298787$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min188$\
298792$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max189$298793$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min190$\
298794$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max191$298795$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max189$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max191$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min188$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min190$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$298787$$\
, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min188$\
298792$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max189$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max189$\
298793$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min190$\
298794$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max191$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max191$\
298795$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Sin[$CellContext`x + $CellContext`y], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$], \
(-2) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max189$$]], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min188$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max189$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min188$$ + 
                    Rational[1, 250] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max189$$]], 
                    2 Pi]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$], \
(-2) Pi], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max191$$]], 
                    (
                    Piecewise[{{
                    0. + 6.717007633450854 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.717007633450854 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min190$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max191$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min190$$ + 
                    Rational[1, 250] Pi, 
                    CalculateUtilities`GraphicsUtilities`Private`max191$$]], 
                    2 Pi]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, ImageSize -> {300.}, 
                    ClippingStyle -> Automatic, FrameLabel -> Automatic, 
                    RotateLabel -> False, PlotRangePadding -> 0, 
                    ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min188$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max189$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min190$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max191$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbinv7+MfIPEZwUBiSEiIvTAmDShJ+\
V4vviQWrh1sdxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5TW/\
g6ZE1O3JSyKmge6eFAq2ZFOkVfHbbmhjMLnDyA6j3XbfmvVQTYvz5Db5PeDLlxMBXwzgzDPR4X5EiZ\
4muPUPFju1PxlwmhLOf8GTz9darrWceBUMZEmNACf2iLWKRK6Ih7SHQNWu2ORHf/\
HGjPH6ach7D9ymIBPQD6x0pQi2MFIRjOsG3Xmqi7mJehghKFL1wlpw4t9teoI1iIhvBpMA3zuXqeVt\
cojLtqblXUrNKPz76m/hAxi4k73E5u7PjLyyMy8XeWVH9c+\
oGeH7bFl7Jk6W8YXrvONJGDDsGvcjm09ZV8oRULeuCn1F1QbNlrTGeP2Hqf6RDps1iGJttw4DJka3w\
cuUtwr9sCy8LbPmZtO9b89k7SsBlk6GS20dJp3wWRTPlgRdo+3R1YR0e407Fd4zOkApWOJGNs+\
wW1x0PK/B6R4ixduM1SEfUEyCCAqyLOm53WcbMTk4USSzw7Lp+\
2WMjWYcScGf72jNBmR1fnpBVaxOag3Su7sQk+Zc/\
Km4llzNNhrwfCAMZqJWiv4X1UZZcQUcyMJIYL2jqNZjDKqkhUcGyH5QgcUEEQ0j2y37cN/\
9wvhJI1b5CdSnP4sCV5jQ8iX5Z4EMQmcmb23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJL\
Ej7Quz2h2xP+4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3ihi3Jg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {Background -> None}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "0.882", 
    "parsetiming" -> "0.488", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa1141g99730cb70g6284000044e28190h2fdi37h", "host" -> 
    "http://www2.wolframalpha.com", "server" -> "9", "related" -> 
    "http://www2.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa1151g99730cb70g6284000026h01i215g0111hd&s=9", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2014, 10, 29, 16, 6, 17.0099269`8.983277390032097}, "Line" -> 
    43, "SessionID" -> 7615279968583788175}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "3DPlot", "3D plot", 1, 1, "Input", 
    "Plot3D[Sin[x + y], {x, -2 Pi, 2 Pi}, {y, -2 Pi, 2 Pi}]"}, 
   Typeset`open$$ = False, Typeset`newq$$ = "visualize sin(x+y)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{431., {48., 18.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyFnXmcXlWR/rvTedM0tJBO0oQgKIvsIKCDCtNyr4qAG844OIrLyGAAFRkR
UAQVQSOLOIAwiMqMyyiLuIG4gEDuTQgQJCJqQNFWAW22X0totJXAq/w6fev7
vF3Pa3+Gf/LJQ+W859apU1WnTp2qbY94z+uOnNPT03Pg/J6evqk/bz2vf4un
tl1S8+fH9vvyFYc8a/n+Zzxjt31//olh4Xc+p+/LN899uHj5OYe86Zo/Dglf
/O6Pv+aS560rNlrw+z8/67pB4ccd++ATP1j1q6IZpyX8mc9Zt8PNq35VNfTt
Cnyr173wvP9+3rrAx4Ufvu4rW6+c+3DVE/+B//KgDfP85v5BX4B/6NRz379q
ap4xvvAj19bXbphnzKcEP/fY4q3Lp+YZ8xe+7esvXrFiap7xvcKHtm1vv2Ge
wR/hfSuXvPKmqXnG34X7vOEr/OTv/Ak/4TM4/ITP4PATPoNnfraZr/gJn8Hh
J/MFz/wc13zhJ3wGh5/wGRx+wmdw+AmfweEnfAY3fjq91hv+wU/owOEnf+fP
LJ+DwuEnfAbP/GzzHS6fwuEn3wGe+TmueWX5bAuHn/AZHH7CZ3D4CZ/Bbb2d
Hn76+OIzfMr7fVg4/OTfg2f5HBQOP+EzeOZnW//O5FM4/OT7wDM/x7Wfsny2
hef93irB4Sd8Brd1dXr4U9r44rPNp8h6o2X7fVg4/Mx6o2XyOSgcfma90XL9
qXUw+RQOP7MctYyf47IDWT7bwvN+R2+0alu/0uiLrDc0fpH1Rsv5Wdr8qyzP
7Srv92Hh8DPLc7vK8jkoHH5meW5Xpj+lP0w+hcPPzI92lfk5rvGyfLaF2zqV
Rl9kedb4RZZnzcfkWfOvsjzre43P41Xe78PC4Wfm83iV5XNQuNl34aY/ZfdM
PvUn/Mx8Hjd+jmt9bD0Koy8ynzW+8VnzMT5r/lXm87jzszT+VO5/5P3esaPw
0+1Bls+OXjP7Ltz0p/hi8ikcfvbM8h98NnrZQRtffLb5iM82f9lB+17x2fgj
Phs/l5s8F3m/S54L+GnyXJj/Kdzsu3DTn5JHk8/K+ed8zfyUPBdZPiXPRd7v
kmfmb3ZQ31uZPMMfl+fC+Ck89IP5G+0i73fpZ/HT9HNh/qdws+/CTX9WLnem
n8XP/P/bxk/p5yLLp/Rzkfe79LP4afpZ/DT9LH6afnZ+Cg975/5Gmfe7/I3S
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
pyu/0egtbtauwPP9uOZj8TTNx+7N9b2mx9oVeibfm4ufFp8UP+3efLJCHixu
WaE38v37ZJX9/CHhyEO2j+PVlUmfDIoeechyNV5lO9USPfKQ5Wq8Mn2ic0a2
O9i7ceF5PSdNHkZFn/FxyQNyYvHVrrxNo7e467jh3PtPmjwgV5qP5QPoe02u
9L2WRyR+Wpx2vAr/0PIEtF4mV1ovyy8alTz4OSHbnSWiz37ykHDkxM8VWZ8M
ih55cD/S/Batcyv7t6I3fSJ6sztab/C8/qMuJ5KXTDdeGH3hdBlvFzYfyZXN
x/Iq9b2SK/tey48SP+WfGz8t31LrJbmy9bK8YsmJ36cUoX+Wm1wVrHvWV+PF
JsnuSK6K7CdLrgrkwfRVcXI+B4m+lc/dojf/ROubzzu9ojd9InqzO5Wvp8lV
YXIi/ZRxyVWR9cZoYfNxuSqy3pC+Eo7+MX5Wpn+Em1yxjnZ/pHV0uWIdq+wv
TRbht1h+72gR+sT88/EizlmWdzopeTD/qsh2R3awcP0DbnEYjZPPR7Jrkgfz
l0xO2pIH82Nr38dmBwuzO/J3wM0OupxUNh/JgX2vyVXb5Ed2zeRB/pJws2tF
1hvyl4Tn/LdJyYnlA5SmT0SPnGQ72BZudrAI/8fkqi3c/PAy+7fyw0vkxM53
5ZwcVxE98pDvQ1vlnvm8I/pj8nm5c/+V/ZPK6P18V5o+qWw+fr4Tzu/Y91o8
tmW4/PAy2xed7wyXH15meeB+tiXc/PASObF4Qlc+NvTIg53vStMnokce7HxX
XpPlRPRxXrP4Z6uM+IDHEyQ/WV8Nlv3Jn1E8QfJj8aty7xxvEf0xOS5Xu/23
eEJp52WNb35LZfPx+FVpeqay7/X4lcmP4gll1iejslcZVzxBcmLxK8MVT5D8
WD6b9IzFE8qsT9Bjg8ItniD5sfiVcIsnSH4sfiUc+WE81t3i59InFhct7R5B
OPFby880PaO4aLk0x+X0u8fnc5Doc5xW8XaTE8VFkX/LTxuSnDAv6E1OZE8y
Pq512CTpE8XPTc8oLio5Qa7gD36LxUWlTyzeLjlhXaHPdkfxduEWF5U+yfZx
SLjFOcuIh1cWPxdu9zKsr+SKfwff7V6mzHHgIeHIg91vSn6QK+iJ02b7OCzc
7nGQZ4t/Drs+kb95crZH8k+RE74P+iwPun80XPcyZcRJJFfwLeuTtugvTHZH
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
kXq17jmvryV6/B/Gdxy+1lk/VEZv7457y2wXxiqbp+UBtox+UuOvNJz5ZDls
6d6fdczvmnvL7Ff0C4c+5/W1RA8d4znOeGZfRM/65nfTvaXLDzj0OZ+qVcb5
2vrv9HXhzIdx8JfYT6yjxQe07hYfKImbZTs4WGZ9tVDjO85+XZX9k8roPT5Q
5nOH4gOl+b2aj/mxms9Kw5lP1j9tnZ+yHlB8oMx2QfEB0Wc7OCh69IXe/xrO
fPI4nfe5rKPFByQ/Fh8QfbZ3g6LHrjG+4/w7xsFf4vdZx1xXYb7WPb87mC/6
nAc4JHr8IsZ3nO8jPo89NXrFB/hd5CG/R9A8LW9wqLTzr8avDGc+WX50zig/
nvTAmPia9caEcOhzHuCQ6PFj9J7acOZzehpnUPkJrGPO15qvdc/vEeaL3uLt
ore4ehfOfMyuiT7i3vKjjJ+V3bNo3bGD6FGLg4meeGnO01so+mwHh0WPvWN8
x9HTjIMfBX3mv+5ZbL10z2L2Ykx2w9ZX5yTHmU8ep6X8Afif6xgslL3IeXoL
RZ/t4LDWF/vE+I4zH1936OMerbJ7ljLu0SxffVg4/hLjOM6/Y3zsHb9j8XbV
YeO+Juf1LRY9eozvyPpE99Rd40Af96GKD0Cf4xgT+o5sF8aE53PHevmnZkc0
fpaTtvzWvC7r5Ydm/U/+3mLzHya0ntDbvXDXONDHfb3iANCzXjlPb3GXPIBD
n+3dEtHbfa5w9IneuVt/PXDueXO9l2Hd85o8iN7W3e712vr9fO/Wo/GJf9r6
ih77wjh276bvsHs6nSc4n9q6EKeVvWF88wN1/74q+40ax/S2xvH6nOw/vzeH
r/leoF/34H6vDb3dX2vf+70z9HY+8vvcyvSV7k1yvnrnPhd7xPoz/1zXaLDr
XhV6y+uQffN7T7tH1rkG+nwfMSx67FeOs+ne0+0y+Rt+XtB35Xdkra77PuhN
3kTv93F2j2nvsFp1jqN23vPWWd/q/svvs/D7mH+O77WrvO907lZ+EeMyzukp
jtevcfyeyO7X7H1Qu+seB/o6+y26l/H8AeTF703QH8wzy+F4172G3ePIb4He
7x3sHsrqa4133QvYPZr0g93LaN/qPVrMH3mzeK/sqd1HyJ5avFp20O5TZAct
3i47ZfdBslN2X6B4ssWZLZ483hXvtTi5xXvHC4u3KA5ncRXJncdL7Z7C4qXj
XfFMi49pH1o8tjL51zztvszjh1oHj/tZPLwy+S88Lgc9/kaWq7bidewLizdW
+T6x1RXXgj7HEya0DzzupHc36d6hT3EbjwtBz/zzu85Wl/8MPX6U5Xvou/L9
12BXvMXieFZnb7ArHqJ3Iileul7r5vEK6PmuLG+DXfEEi8NYvoHO45JPxiPP
EPlknJyX1e9xBu0TvV/I/rb2jZ+joee7zH/oit+ynrWdW/GbsMtZDoe7zpXQ
2/lRcuTnPuXhp3hgn85TLlfQm58sejuv6byT93knzxz+W37vLPG9JcS3te+U
Z57jJNr3eV3aipvm+IPyV2eJmy1R/IHvZBz4YPmiXedW1VWL+s+sO3z6t4ve
fsgXPrhGeon//+8X/P4L539wjfjJ+IFr3vy7GMfpNb7R1zaO1st+V9/F+Hf8
z7zvXv/XYZ1H3vjFlZe95rPriruSvzdc77flutPPO+F3xbUnDPzm5HdtJnyv
753yzrWrrq9uSfdQS6bs9onHbvam7ywHh/4dUf9k7fT4c0S/9mOH/sfuIw9U
K6b/rvru9ae3/fxuu0zhjdStHgFfsrhnup/gjxp66ZV9jjp8dMP8f5j8yeF6
ydnFxPlT8/9587s611y714Z1vL66Ld0TbZj/F19cbXfJcnDZ+Xj/dX3DB9Gv
m3v8NrtNzfPHDT+Fb7z8tJN3ncLhM/vmlHfs/ZE/X3mv+Az+gaePH/nhqtsr
+Kx84BOW/mG/8x+p+F7wR7+wbrMnpsbhe8HnvmJD/efbK74X/Jzt9p/Yd2oc
5oN+Gv/nRdtd9LO11V3ZjtQvW9hzx1XPHNf6gp+T+qSvHgH/6LHFW5dPna+Z
J/gvPnTDjZ+aGp95gm+63c5zNowPn8HfEnWts3y26qu/fck3d7z8D9Vddh7B
H87y2aqf9ey3nPfJqd/Nctiqq+jjhryB737R0sPO/dnaIstVqz5/2wULN/xu
lqtWvTz0fJarVv2yc87f5Pyp383y06pPiv4CyInGafhT5HVpV4+0T39o+fgj
ti7t6j2XvOLBa2fICfiynw++88kpeViV8gTa1TdO3rBet9u6tKvfHn/Qg9XU
+Hld2tWh0/PsyA/4c793yC82yFu+Z29XPzt4Wt5s/uPVwRPffdvVU/srz3+8
2n2zF21x4dR+zHI1Xr033nejH8A3uuD6A69bdb3Nf7wamZ7n9Tb/8WrbHzx4
xaemxs9yNV49vV3zjon9C/6iRg9o/ti5tQe+/dapfa19Cj4v/GT4D/6K48/7
6ZS+0nf16L/50/qE+YMuavSD9i/4VmE34T/4/Y2e0Xd1xj//H6fG39/4X7wg
9KHxv9g69GGWn/HiM6EPbV1UH9j4X2w+/29Dh8zQt+C3PHDe4RfM0Lfg727W
0fb7eHFSvCMz+S8eD/1m8l/8qZE3l//iE6HfTM6Lr67+xhfXz9CT4L9p9oXL
eXHNdYsnXzRDT+Jn3RF6zPRPuUnoMdMz5dtDj6EnwYdff/GKFTP0pPL7Gv3j
eqZct/ifXvCtGXoSnL4Gps/Lc0NfmT6XX5r5Nli+KvSV6fnyvaGv0JPgVegr
0/Plbu8/66QdZuhJ8FPDf8t8HiznjK0688IZehL8C9FPBD0JPtrYqcLsaXl/
6DGzp+URocfMnpa7hx5DT4Kjx8zOlk/dOfhAPUNPgn9v0X++8NZuO1suOuP8
g/4yQ0+CH9bY98L8rujjcL3J1XD5rNBj5kfpHS56EvzQ0GPmF5Wrl29T3TFD
T4Lf8y8X73v+DD0Jfni8Z0RPgq/97rS/p/njT84PPXaX+f/oMfgP/kDoMfMb
p/TZNiMb9BjzB/9C4wdq/4L/8uGsJ8F/2PiThfl1U+Mv2uCXSk/y5+477jGw
4V0n8x+O8+j3ol4o8/+35Td+fdnvNq8f+9Tb7//uDDn5UYxz7cHNOMyTcY4J
u8Y83xrjLAu7zDzOfeaud1981IL6xeFvM5+O/fnMtF/N7/5n0G8e+pzf7dDf
OW13GP8zz7vk0Qc//4z6tPAzodsxzqPHhn/OunD/eVjUkeN3Px3jbBl+Jr+7
U4wzGPYC/m8f4zwe79mZT3P+mlcfGH4m8/lKnOO/HvXu4P8Lp88xG9UPfGDl
1p+66X7Nkz//9+YF6VywKMYfCv3MPC+N8XeN9/isyz4x/vv/+cKTLpgan/nf
HOO/95k7//r43/5qhPk35/i/VWcNLL3zmzPmz3l39dz6H+u592j+350+j/bW
z9//xVv9cO5tkp8dYpxF24z897dmzHP7GGfdNN/u0TyvYZzp9/63SX6a332s
qvf880k3zL1N83lZnKcH33nCG2+Ze49+d7ugH50e/zb97kuDfvH0+PeYX3dD
9dElS39y4U33S84eGmriE9T7kv8T99UfsXPBL4aacT7Z8Fly+1iMQx0k+P/E
UDPOnLCbWf9M7c+D8/49N+I6x8a+y/r/vuIH5g/z55dem/fvJ2OcdviN8P/V
Mc53zO9t4kNPFs+K/ch8bpN/d3jyAx8J+hXhL/G7HX9wm+TXNfGJueWj4f8w
/jvoUxD7Dv4fGPfz7dh3/O5fYpzHw//h946OcU4Nfwz+HxTj/Ee8u2c+H5jY
/enX/2yTcjD2F/N5JOJk7C/4/4arlm+2qn/j8rTYX8xzdfxOs79uH2Gep8T4
fwr/h3k+HOPPjboBrMthMf6JjXxq/vz54levunxD/zvm337y+N/ccdpQuWXs
O+b/3YgbPRn7jvm/+5fXP9C6ZH7UXens37/GOMu3XvSOmXqGcR5/x/S+0zyP
jXHuafap5Gf/D7/2xscXD5c9zfiaj+pyxH7kd4ugf+zF0/pEv/uXoH+80T8a
/yNP7/bfm39ri/Kjse8Y/4XWX4B1uTzu37c0f/W0GOfRRg9LXhmHugrwnXHa
26/b4eapceDno7858SuvuW1x/eZjH3ziB1O4/W79zOdM0yte9Iegf1XYC/C3
hT2lXi5+3T4RH8OOgC+2Ovz457dE3OaMZa+ctiOs17r43bNDj9l31bs0/FFc
iHluHvsCnHlSF8jWtz4u+AB/vvmWz9y8y/MWiQ/whzwU6k7Dh28E/bKwR+DP
HrnvR4e/emF9RHwv/vyLG/mpXx72yOSnviC+Fz58K8bfKr4XPhwd85kf38X3
Mp8Fsb/AmQ91jfDzmc8LzK7F/qrfGfyxfSr+2D6VPLg/w7ojD9yDbxn2EXwX
q7uO/P8t5vPJ4A/yMxDxq3MDNz1Q7xB8Mz2gOurwc4eYZ8/K3B9B9V3MLoce
7uLDGxt9qO9FHv418LPCjoO/KPwfvhc+PGD1w8GvsDrhyNUW4Xeda/yZF/w5
yfyBk2P+2wZ/oD8r4mPbGt9Cz6vuN3J1aOAXhX4D3ze+qzfqIyFvzHP70G9m
N8UH+MOf3w9/g79/L/wx+AB/llL3O/wQ8B3Dr4M/8O1PjV2uLwr/BHz38A+3
tX0Xdln1qPnen8W88GfAvx/zpF4ccsV8tg4+wB/mc1X4OeB7xHxC/iVvzf3b
X1RPGH6eFXlq8Ae+fSXoOb+AN/7MHyv4A9/4s6dn/v4b/Cj+fnD4qy4nV8b4
1F2Eb5+I+VDvCP58KeivD38M/N0xn52CP/DtZs3nn6b9NPCDYj4XGH/C/1Sd
ZPgzP/xkvhc+lEG/KM5Z4OdPz/8ufS98OC3yFjYOPxB8m7g/xO7An1fF+PAB
/mwR84nxO/so6Dc/pfEbwT8f8znbvreJG9xVYDftXFAwf77rgqDfLOwmeBH+
NvO37yp2Cz/T+KA6vegT/rxo0W92+PSDa0fgwwfid/leO3cUsS7+vcWfwy81
/qi+rp2/Cuwp/Gns+B+LkCvZqWWRX8n32r4oOCfaPtL3ojd2bs53xR5hT+18
p++FD0fE+HwvfPhozIe6XnzvMUF/Xfi9to9U9xW9sUvMZ735vXGOLrCndo4u
nxX8gW+NHeyl7qX4dkCcU+CD6duS86zpZ9VlxR7tGPOBP8jNsoi7gts5vYRv
dk5XPTT4+bKYp9dPZp6/N7894iTl9saH5l53I+rNVmbHy3PCDprdV91Is+Oq
D2l2X3XhkKv3x7nM+RP2utzYzgvDMX/4Y/5AF98iDiP+IFf7Bf5UnDvAXx/f
Rf035I15hl9UmB8Y56yOff8B8vvabN+PifMadtP8w/JvER8wf7IMf098+1wT
NyursKfgnEM/afsu4mb6Lr6XPx/cL9t35ul1KZkPfIA/zKeMuDQ48wl/W/L2
rMZvV51JO4+U4f8Xdu4ol4c9tXNKGecI8a3zzvve/TbYU/DJOM9eYHKydYz/
9uAPfDsy5kP9Rjt3lDs9/94fXzjDvn895gN/mEdnPk3cmL9zHj/O+BPxYe0X
+EMee5wTCzu3lvdHHAY8zsUl9tTOraq3aedc1Ve0OLPkAf5cGvPhe+HD4UF/
yAXT8W0/z5ZxTq8s/l8/cv3Lh/cYeUD6ivdbf/vTD973jb5Hpc/B/9+fTnrX
1PnU7wXqnjVfX7bzjHsB6Le1OAD4NZEPYPcg9c1nfGrFaz67Tnbw1CZeUd8T
cWPwkPf6lwfddMWG877JW/3DiN+afE7Rv32aHj3GfFb+3byC4XrHavr+pbB7
jfoXcb8MzjivPO6Cn399im/YF/BHGn/D7zvql8W9M+sL/T4WlwD/r7gftPud
+rL99/zLBr6hB+DbiRGvA4dv3D7bvqgnI25m+0j0Of9huP7f5v5L8kN84w37
TjzxwvMfMX9pYf2V+4/Z+6kr79W6gH8g8iKQB+IAZ0U8HPy6GO+XB/VNx3lY
L8bxPAryZ8aa+z7ZO+g3jnMx6wj+7eYeWfSMc0T4/6wj9Fc199TiGzj3mKbn
66sibm92oYvPjLOb5W8wn48245vfNb9+aaMnu+Inb7V4AvhjjzX5HhbXneLz
l9P+gn7vyAPJ+R6D9ZLmXlj7CPpP/HLN7hvyDXJ+y2D9sci7hs/QvyfO3XZ/
Xe/Y3FNrf0H/08ZOyf6CP7kixxnAN4p7W4szd+0L6J8T97k5/2SwPqK5f5f9
hf6KZj/6PXh9TrN/7R5koL4z8ujyPewU/+MdRNa3A/XnIr8O/K5YB/ZFvp8d
qA/b6b7pdcz5ewPSY1kPt+qDQo/lvL4pPz30FesIPfot68mBejzy6yyPot41
9Fu+Fx6o4965ynpyQPl44PGn1ivfFw/UP7147qJ63R0jOd9voF4c991Zf7bq
p+58574bvjfnAQ7Uv4v7bnvXX2/UnHMtn6G3viXsV85n6K1/2tzXV3avVGGP
cpyht94p7E7WY73Kh8z7rl198+/qq17lPeZ91K6+Hfoq50v0yo7kfIneeotG
/iu759L7gZxH0Vt/KexC1ldT/LH4jPLfmvwf2y/t6okmj8jyeSarzZo8DfNn
Hq7wB3I+xmR1R+j/nI8xWb3d4lrg5Gdmf2CyIg8z67Hx6sehf7KcT1bPjfhG
zuuYrJ7T6HPRz4lx1tt9X/wpPls85AaQnB8yWWEXcn7IZLWpxc3AL488q2zf
J6vvRD5Vzhscr7Zv5NDyl0arRaH/c/7SaLUs9HzOXxqtdg59nvk5Wm1qcSS+
E32S5Xm0+nOzf2fEGZv/0CfwDfq3RX4X47youR8vPhD+Enj8qfy+nDc1Wr0l
9H9el56e37y3b7M7n3/rSM6nGq1uinz7nE81WmEXrA5Stc7iVIz/ukYPV3m/
jFYvbfS28FfEd3GvCl7Fd8R+WW7rWLw89L+tYzEeej7nm40qDpb10mhB/q3l
hRboGVvH4oDIZ7P4cEEehcWTtS62vsWJfzf/bbz4XOglW8fiydD/tl4Fej7n
uY0Wn7O4IvgekUdnearFWY3/4+tVzI08Oos/F4/FvbPFq4uwF8vzOOPFsiZf
1/LTJourwi7kuO5kcXXo/2zHJwvyh+1+pLw3/FW7T5E8mp4snmt5euRnopdM
Txb0OzA9WZwRdiGvb7tAj+X87ckCe5Ht9WTxjcj3Y12uje8ajft38J/GeOFH
LTd9WAxbfiDzObc5v9i7gN5yTdgF9gt4j8X9wA8Iv9Tyo8Rn8wdK8qXNfyvf
FHqJdYH+8vBLzX8r0UvmP5Q9ka9o+fYl+sr8hHK7sAvsF/D3WzwQnPxGy9cq
49yx3PyH8heR92j+W7lP815A9gv6Wxt/zPP2y2828Qf3w8uHw76YH04+pPvh
5TPCLwW/1vS0+eFl45cuHzE/vCSf3M5TJXrJ/PASv9TOUyX6yvzw8pCwF3kf
DZYXhx4zP7yMPHn3w8sfN+cF4d+L72W/mB9e/uKsnabX0fzw8iuRF2rnqXLx
4pdc8rVuP1x5oVZ/uyyafBLLo5uPnFte3/xy6/BjLT9T68U6Qh/5vYWdf8vb
LC6qeoemr6AnTz7vx6HyL6GvWC/osRd2zi13bs7dleWLltgF1gX6V4ddsPNs
OWJxVOZzd/NeyfbRUHl68+6psjhPuUP4sZaXK37CZ+jR/x5/3tTiz6qLFn6p
xXnK74dfmvXYsPQP/Fc9n8g3szhPeUoTLxL9mTHO8aGvLE+4xF+CPvKOpK9Y
F8a/NOwC+wJ82OLb4J9r4mOFxX/KNzfxNLNrw2XZ5BtXFr/lXYDHb/XeM9/7
L+bdgeQc/NHwP+3dX/nq0CesC/QHhv/JONCjT+Ab9N+IdxD2flB6xuKr5Q6h
5xkH+s9+4MDEf+hPinem7Atw9L/1MSkfbeLb/k6wHGji2/LfoG83cXJ/P1j+
vomrO3/qTeNdm8ltfWfEB2z8eiT8YVv3enHoMdM/9WCci21f19vZeZNzHH3K
mCf7dpOwaz+2/XxHrIudfwviA3ZOLHYIfWXxigK9YXGA4oO2H5Hzkyx/lXz+
6K8kOSc/MPo3dd1H7GT5eKo7EvnzyBv5fvS9Ra4Yn36mdi9Tv9TyfEKf1PTL
Zv5xH6d52j1dvV/Eb8F5X3CM5fl7PmHOgxqq6TvPd5G/d7K9a4j7uPon4a+C
87t99i7gSMsbBOd36cPLuuxKvbeYv/lL9QPNfahw3jswf/hPXh/v2swPqb/Y
3P8Kj3vSmr6f8D/u38VP5kle3DXGN/Lr5sXvMh/offzIc9D8Lc+h/ojlWW0c
8a4Bu48gPw1+Wh5CvbHlRw3GOOThW75KtarJ9yiyn/OY+sVbHkt1hOU7DYbe
ONHkJ/JPqmc3+S3CI4+l611A5KVUG1v+0vwYnz7IrMvOC/I7BctTqohL5PjS
DZon60U+FfNhnqfEOHPDfwaPuFAV8m/x3vsK7o+Y56mRv8T+sjyxYg/LF5ob
erJl7zTJm2KezJ/8KPhjeV/F5ZaH0BPjn2jvNCPfT/3ZLQ+wuCP0ADjvI/rt
ncJZlu8EPi/0+V4W/yTfiflbvl+xa/hv4L+P3z3J3jV8wvKawOfG79KPknUh
X4g+wnzX3fE76A1w3muwr+E/43CPb/cRZeSXCo88TPXHhP+R31uiT5gneTt7
G9/I/3l//C7zgd7H570D43j+TJ/lgRwQfv5eFochL4U+j5bnXB5t+RuMwzsC
y4cvtwr9AM67ib3t/QJ+7zMsHwN/wOUn8tvL85r8eeGRl15+2941RN57OWT5
FR+P8ekHyrrsY+8s7B0E72iEx/17OTfmyXrtY+8s7J1C+ZI4z4IzTtgp6R/u
96NfpHDeZZw9Z/z5V0+NY+9E6uhT6d9Vzw8cPy3em8g+gvNeEnuNH8j4V9t7
Dd5RvsHeITL+qZafz/uL28NO2blMed3g+F1rIn/D3rPU5Osa/+u3BY7/Ge9i
6rlWJ4Tvjbyyyt77iJ/gvPsYjzwZ9zPfafyMd0B1yKdw3ofeEecC/HP8sZOD
D+D4b3vFvTz8CXmuTze+8e7D/Q3mQ743OO9BuOdlHPw96MGPtPFtf+mdKXzm
d9FX4J+M7900zhecR84LvMfeBcAH7uvZj5EXp/eqpvfqb5rc8h72dOMz49wW
8gnOexD8KMsb7Hpngb/K+0f4xnwON37yrsT9LuYzZPVYGGeX4Cf8eSrotw09
DM780cOWZ8i7J+HMn3xLez+o84jZNeGsC+9fzrJ3T7z/XR18Zl0enuU9C++C
Dzc+Rx6p5BacdygnmX/I+PgzZmdrz8Nn/EX2Tmoh71OMz9C3wl6AvynmM8/8
zPBD9B4KPPwW6WF7T1pHH233f/QeHPn/eOQz3Bz6E/4/Eb8Ln8F57/xg8BP+
H00/weBn1j+t+h/sfRDvX9zv5XfhMzi/j5/GOJvEeQd6cJ2P7LzGPCNv3P26
+qmIh7CPIm+8Xhb3iazv+pgnedfg2wV/5lh+SPjPFe+5zA+v7go9b/52V72d
eXZOhC/xHrl6v+VNhf9crQ1/Hpz3NS3LD+G8Bj/BOd/NDz0Dn1uz8P/sON+5
/888yfO3c0G1MPQ842wa50F/D/KxGH83qwPA9+5odYTm2rlY+bFBT5909uPv
Auc8Av61mCfnKXsfwTsp4f8efOMdtL1zryKu5efHCr8o3zdNnVvCXrDv4p27
1hGc9/i+jvzJPuLvvCdivSwvovL3KZyXve4B8+F8YefWivxz1ovxsCOWn8D3
ip+viXnGudvzHCp/t/L+mOcN8c7F6iHwzsXuze8qVobdsToJxdFhXywuURxu
eURRJ6HAn5T/HPIO/229dF629S2etLwgxu+z9y+8wyIOw36J/CLRgy+KuMGp
od+sngPneo+fFIOWR/TVmA/7Qu8ZY16so9W74Pxu+cN/7MozibhTsZHxM+pg
iG+mDwv0ielD8cH0YYHeMP1TbGR8C/1T+HmZ+cA3cN5/zQu7YPpT9KY/C4+b
RXys+KDx+dnxu5zTTb8VW0Yc3vRb4e9uQr8V98U9O/qHd16DVi8r4pbFHia3
1KMYMD7vFuM8K+QTnPdW2FN7V9v1jgn9gd4wf0Dyaf5AV9yA+TxudboijlrM
MT0T73mL8yPOAP7tmD/nenuHq3cc4L+I3+cdkNXPKTezOgNXGM668L5sib0r
pP4GesD85K73YtTlGDQ+xzvrsj/kFpx3XvMsvsH42EGLkwuH/4x/o71D/GDM
/0LjM/Tc+4P/Q8zH4yRxj4D8SP+Qp8G53uop8U7K7y9UjwX5j7oBJfUh4X/U
WVI8DZx6I/DTzpslfghyy/hfsvd3vC9D31p9J/EZnPdx6GE7b4rezpuKc1qd
KL3vs3uZ8oTA2Ucbx/y/HnXhWN+LYp7sF/Coz1COWF5HxD2UN2X3aCX3j3Zf
Vm5jddgOtDinxVsUr7N4S4kfaPEW8cfqcoif4MQn8QMtftLFf97BDVjeAvM8
xfITeB+3Veh5i/9ovSz+01WHh++9z+rLHWhxXYvPaN9ZfKZ8ZeQnWHymjHtP
rx9SRjxNuPgW9/JW562M+2u//y1bYXeQB/JSsBcWn9Q+snim3uXZuzPtI3De
62F/7f1aGfd9won3rrC6Q8wHu2z3zmWc62W/mA92xN55lXvsmP1n5hn35sI/
HPOMeLJw5vnRJp5s9d82r49907uOOGRGnVLetV0c/WIsn6Q+Pur9su8Yp/0/
lxy0Id8JnPdoC5p8MK0LdbO/ZfezjMM7I+ScuCv3rVaHsKYeLPLMOFs09VFl
j5jPXyLP/P+q5wP+cNQBhp73dPQ3Aac+zAmpb87qEeiZp+WP1XN+Ml3f0vOL
FD+x/KL63qi3CT3jk98Iznyuj7qjlg9WP9CMY/fI87WO2W/cVO9icnxj45o6
yYo/BD31wFl38I9YfRvG4R7W8t+0jrqPjnEujfxAcMahrjLfCz31cnM+VX99
lcWNeTfEeuV3r/1arywnffXZIbc5f6m/3sPi4eAPBf/z+vbV5Pfmc1ZPvTD2
keUh6/7F8pDF/3xv2FN/NN5x5LxW9Yspch5jT827DOSZdz0LLG+E3+23ejjg
8D+/7+upb458tpx3ur7y+qW8Z/lbUw/W6gpOVAfHe4dMP1ZRh5n5Q0/9cHtf
ULm88bvsl/xOaqIivzfTj1V8r+X5Vy9s5mP1gdcQD7H3DmtUJzzna60R/w0v
nmv33dD7vQD4k1FfN8dPxoqz/+57z9ECvuV89bECvmU5nCiQn/wuYKxAzrNc
jRfzTH6gh29ZriaKAyJf0d6FddVvAYefJv/qs2P7pcx9dshXXF8gn/YurxgL
ObF3W8VRVr9F7x2C/yb/BfmWtl/KD0c9Z3tnV6xr9LDti96Sdcl5RH0l73dy
3ki/6jnnfN2+EnnO7777yn6rZ8I4np/DfFjH/P66rzwz8qVznme/6j/nfNq+
8qnGTnXie3H+fa7FMSz/X3oSevY1OH1nkE/2kfoIW3wGfCL4D844vF/IeWVD
vAvoyuuYY3VRwBcH/83fUD6w+Sfq/8K+g5783qwPh8qjLA9H+fNW/wT8yeC/
+RvlByJf1/wT1Yu2egKl+yHU90Cv5jjJ5uID84eeOudW/2EWeVtYPhbrBc44
m8f7BXB+F3mz+gll9G2RPqffy3MtDqY+Po3/4P5wV7wF/NsWjwJ/yeKf/n7F
DL2NX31ggxeWv6136MgD9PPCn8l+xZD8IuOz3vtnuz8kP8fq28tvgQ/4pdTZ
sLr08jf4Xuj/GvJg+71eEn677VPq7Nl7hz75t/n9Y3feJvToz/x+sC17an0c
qrPt/GL+jNXhH6/QM/m981j1QctbAPf33eDzLI8CnHco+d5kTYEfld9RrpH9
Mv4U5NGZH1XcZP4b9PNCT1pfmPKJWN9cX6Kn/Pt+VKt8mb2HhZ59av48dZAq
88Ol33Lds03RJ+ZXd+fRQY8+MfnXPrU+TaX7OehDf58FPfaC70L/zLE4PLi/
MwJ/u90LgL+7Oe9LL8AP6gixD8HpT6Q+HLwTin4cjMN8iRugF8Dpr4R8gNNP
RH2hgn/0t2J89XuJOkX4i8o3j/4p0Hf6wDT9sHrivw7e9IXhvUcHb/ogMH/s
MO8y4A849VLQC+DUc2Cf6/1E9NNhPuC8i4c/yteIdxbwH5z3ocif/Nx4v6a+
EYHTn4LvBecdEPzHbvCeBT6AU4eHOhrg5OfAB3D6H8EHcOotsI7gxIHhAzjv
zng3qHNJxOHhAzj9ROADOO/L+F72E3Wi+F5wzvusu+ij7gF8UL3Y6GMFH8Cp
1wEfdD8T+gd5AOf9DvxRPlq8Z4Q/4Oht5AScd77wDZw+MvANnPeM8A0cvYf8
KJ4a74ngJ3qOOA/7UffeUa8GPkPPOwX4DE5fM3CNE/oH/kNPXRr4D44/AP/B
eT/Vk/5bPUL9B/gPjp2F/+C8f4T/4PQbAle9lug3xLpAz3te1gUc+8W6gPOu
qtNnpcF5Twf/sQ/znsj6GZy+dXwXOH2aWF/s1bWmb8GphwbfwOk/BX2nj1bT
7w/Od/Cmrxbf1cGbeoDMX3lboSeRE3DqOyEP4NSrQR7A6UfGfMCp1wF/dM8Z
791YX3Des7OO4LzPVb/PwOnvo/6XgfNuEf7jP/B+ED6AoyfZF3rPF3oSPoCj
J+EDOPVhWEdw3gPCB3DqJyDP4Nzz6n1y4PRjgg/gvIfle/FfqFPH94JzfmTd
wdF78AGcfn/wAZy6E6oHFDh6D3kA5x0l/AGnjgf80T1MnDeRE3DescI3cPpt
wTdw3nHDN3DOoXp/GzjvWMk7x3+jzxHv9MDpT0R/IHDyrum7A07eL+/QwOmD
wzsucPrXPBj5K+DPjrpYvNuR/xn+If1OwMljoV4qOP1EeJeivoLR14M+HJpP
1OmlDxN+Kf2Y6IcETj8L4tfg9Bui3w84fX/o0wPOeZP+McIjP4o+LspfiPMX
fU3A6ZNC/AKcfiXcg4Lz/oX3k/jP90Z9TvokgdMvif4x4PSR4Z0SOP1Z6D+E
X00fIvqRgKu/SawH9pE8Sd5RgC8OOaEPFvhWYb/IOwcnr568Z/WnCjmhDxM4
/ZjokwROvyTy0sBXRh0J+vqA09+HPB5w8gfIIwGnfw19ZcDpL0PfF3D6v7Cu
6ltU/WranvL+AZz3GuTZgyNX9LsCp14T/ah0jx1yRX4qOOdl8sbA6WdEfpL8
jYgPIM/g9Ouhj47wqMuNPIOTz0D/MOX1h3zSrwucvl30KwKnvhb9gcDpE0Qf
MvwQ+pHRHwucPlnIOTj9d+ingv6hrwrvKMDpJ0LeHjh12skbA6c+OXE65IK+
NvRBAWd86uODUyefOAs4deB5n8Z+p38Q76bAGZ86sOC8g6A/Cjh59eTTg5Pf
S/8GcN6FnRn5suD0OyAPFZz6ZtSvB+dcQD13cOq6k5+kOF/4/9SbBie/kb5E
6Df4wP09OPkG3HODwwf6oIDDB/p5gJN/O9/0rfq/xL0dOH0f6HMAzn0ZdfzB
yRsn7q84SfCBeLreSQcfLjM9T/1t3gcSf6CfFPUawJET3q2B01+JOgjg9Fei
vw44fXZ4hw8O33i3AL5F2Bf6oIDDT/qCgG8Wdoe+IODwmXxu0Yc94n04OPwn
z1jvqMJO8e4anHWh3wA4fQd49wtO/XzyzMCpD09dePE/1os66eC/D7vGu1lw
6qXzPpN4C/4SdTfAkXPi++D0geK9Fjj+Ev1ywFkX+tCAw3/eLYDznog6AuDw
n/x4cN6n8G4fHP7TN0J14sM+ki8LTr4u92Tg9Cng/KP6ly9ZO12Hn/r74NTh
J58MnDxG3ierz0bEDejvpfyj8OvobwQO3+hfAk4fE/xtcPom0L+N+AN93OjX
JT8q1muexXnoS0U/KuiZD31BDC/OsngL/S/oewE9fS7or4b/gL3DPoLTL4x+
LeD8Ln1HwBmffnX4D9gj+reB08eNd5vg9CPjfSM48sa7L3D6p/D+Bxx7dFLo
H3DmT78Z5Y3G/MnjB+deknxxcPJRyQcF596BPEV9b+TPYx/xi+jfx3tmvZMI
PvBuVvGf4APvD8F5D0J/KXD4QF8lcPhAnyFw+EDfHdXLCT7wDgEcPpDPDU7+
J3nAqvMRfLjU/EP6QWAflc8Y9gL7CI6+wj6C0+8P+6j6TME3+rQpjzvsBX3L
1Eco8mzpW6bxg59fpF9X4D8IO0K/LnD6du0X8qn5Rx8r+leBY0fo86T8zTg3
0ecJHP1GPyRw+iLRDwmc9aKfDTh9bbCb4MgtdlPfFfX36F8CzjrSzwOcvh70
8wCnrwd2EDtAn0HsnfI6gp/0OQPHLmCPwOlnhN0BZ57EDcDpq4K9UN5B6H/6
z4Gj/+kvBU6fKewFOH1tyCfm/EK/EuJ74Kc08S71dQCnPwXxPfCroy8JeZzg
1OcnHxGcvFbie+Br456Cuszgi9J932innlDkMxD3A3886pCT7wV+VbofHNQ5
Lur4KW8JnLqm+OHg1Mkk7gdOX3j8cHDqChJf5Xy3X8QDWRdw+sUQX1VftfDb
Ob+A07cC/oOTf0LcFfw90TeEuCs476bJvwSnDjzrAk59cuKx4FuHP896gfM+
kXgs+Cahb8lXA6cOMOsCTl4HcVpw+oYQp9U5Ot6zcG4CJ27PeoGT38W+4Lz5
q+YeQedKcPqzsF7g5OGwX1SvLuoZ0i+E8xp9Q1gv6OnPwj7S+TruT1lHncdT
PkynPusr0j3RaCffPO5V2Ufgn4i6/ewjcOpgs47g5Jmwv8BD/jknz7j3b/5j
HaHfPepgs+8Uf4j7CNYXnHwP9qPq40W9X9ZX75zSPcWw+P+OiD9fZvEE+jGB
c/6iHxNyAj15XMgD+DnNey7FZ3Rejrg9fXrA6UuC/DBOFXUnbjX5oV8JuN5V
J73a7rzDi/Md8gP+3qiHcIbFPej7AK7+XaFv0QPQU/dsI4uH7JTui0d1vqbu
PXIIPXlQyJvmE/0IqLfOOFZ3XTjyhnzqe+Md4q0mn9SdBld8IPQ8cgs98Vjk
Ezzqp3XFbbi/Bte7h6jfy72t6seHPaVfF+dN+nbxLgWcPinYC3D6EKFPwJdk
va1zOn0l6CsAbv0FhOd93atzMXXX2dfg1IVmn4JTR5e6XZx/6WtGXy5w+pjA
N/Eh7CB6G3r0KvwB5z0U+wicPj7Iv/I9Qk/CN3DyKveNugng1i9DOHxD34LT
FwB+gme9NyCcOufIFTj1n+EzOPnJ6DfO9SuTnlkiPnw6+ijBT8UBQp/AT3D6
UiFv4NQlgJ/gz815jzeA5/07qjwQ+lbAN3DyRVWXn3FiP6ovJvGQiOfAN3Dy
z6lbDU79avhG3IM8W/X5C/oli3um9Tn2QvdKoT/hJzj91ND/4Odnf1U4+Wzw
WXWgw19Fz4OPRN8E+Kp7utBvyDP4W1Jex6jiQuSRorfBvxp6jHXRe5SUBzKo
eNFu0QcEeQanDj/rBU4eJvoWnP4I+APgX4j6+cg/OPWx8QeIL6EPWV/wnHc3
KBw9ifyD/zT7scLxY7HL4PQTYb0UBwv9yX4Bz3l6o8LJE8Yug9NPinXUu6XI
V8HO6l4y9DD7CJy8PvUbCJw8W+wj+PeinwjrBX5PvJtm36kuQuS3sF7g1Cdn
HxHvQg+zj8CvSnmAg8LRz+wv5VOFv0p/u04e1Ez901bcz/SzxvlSyhscF33O
T+70Abs/9DbrqO9K+YRtxQ+vCX3O/gJ/IuUTthQPJK+bfQc+J/rp0EeE70W/
sY7QL4p+LuxHcPomsL7qgxH51exHcPpTsL7g5OewH5XnHvbiMotn0vcTnDgP
fT+RE+h5N4E8gL8l/En6TTKO9Z0Unu11S+OclP1J4fTXA2ecxUnfthUvxX4h
P+BPR/9l9AB4zoecVHyPPmXoAc0z7B16AJw+TeCMQ58m5BB63h0gb+BXRp8C
+gYxDv2D6BsETj8U5JNxvhB1MG41+aRPCjjj0CcFuYWe9wLIp+LGUYfhKIsb
028CnPHpN4F9B18X9pd8AOJ71h9WOPKDvVC/kdDz6BNw09uKQ6Kf6YMFTj+s
W0Jv6l1Y9D1Bn4PTJ4h9DU7fE/YpOH0f8M+JN1r/XOF8L/oZfLd83hd+RfZv
hePfIud6txT6EP6A099tJPxw1TmL/JMbww8Ap18JehWcPlbwTf0rkn4bEI5+
Q37A6UsCP9WHPPpiIFfgG+e8dMVFD270rfxncPo8IufgET+RfwvOewfkjTgY
/TeRB8X3Ig+WdSGuQn9V+ABOvyfPu6CvLjjnXPrqwmfLfxAO/QH5u3Tuoz8y
6wiOf4W94FxDnxH0ns594Q8gV/jz9ENkHcHpz8K66H1/8Bn+g9NPB/7j5/Au
A/6D088I/mM3kRP4r3onkTf7HLvXoz4euO6tgp/wGXr6kYFDj78N/9EPOR47
Kf1DXzn4j5yPZD5r39Hvj/4lyC19TOj/AU5/EPItwanLTZ8J3V9EvI7+BOCc
Z1XfP3DqCVOPHpy69ORnglOfmXwM9hHz3NXyYOn3QZ8McPpr0NfB81rpowBO
Xdmllu9KPf8HLN+Vee4zS/4qfGZf02+FfGbFh2Oe9M8Ap48Gecvg1H+mLwX4
eDpn3SAc/rMuqlcU5yzymcGJH1JPX3lxUeeNvGVw/C7ybcCpV099InDqX3nc
eKf/Iw+NvibK1418M/qaeJyW/iLgvN+hvwg4/KF/Bjh9NOg/4Xlonm/G/f4B
s8Q5PZ75jOR/duKf1A/kPh29x7pzbw6O3NI/Bpz9RV4ZOHUsye8yXP0zwJkP
/SHA6RPBfbTNU/sXPQyfd7G8X+Le7F9w5JA8KM/jJd8JnHmyf8HJO3rA8nup
e7bPLPm61HnHLtC36Pshx+DUWaWOOTjzp64xOPUSqYMMzndR91b5M7GPqJOr
fJv4XuqKglNHjrqQ4Hwv9c7A6WdBfTRw/H/qc4HTP4J9DU59tkvtvEm/qiNn
yZ+hjrbq+cU+GrTzHfz5qJ3j6O8z3859yMMWdl6jfw39XTx/ZgfLk6H/yAF2
PkJOjrZzEP0+Pm7nJvp94P/r3j/6a5C3DE5/DfpAgNMPgnxmvUOJe3DquYOT
p0o9d3DqulMHHJy8x57w/8HJ76V+sfyHbKeEk79KnrPmGXaKupng6NW41xNO
/UzqBub3Mp38Z3D8QPpzqG5f8G0fw+lLQl8BcOzOA7Pg1MEHpx7+UsOph089
bnDqcp9qOPWyqAcNTl1o6kGDH57yhPvlh1DH9YpZcOqQqs5T8HNXw6lHSt1A
cOoiLjacuoj0jcDu8z6LdwTgvM9CDnWvHfduvC8wv4L3X/IrqE+LnIBvk+LA
nftr+qTQxwKcPh30FQCnf8G8WfwN6kerLkXYNeoXy68Iu0DdVXDiYAfO4j/Q
z4ZzHP45fU3A6fPCOyNw+lzQ/wCc+fP+CJz+C9TTB6f+/4+jHjc4dcipTw2O
v8E7I3DsIPVkjZ53KMKpZ0t9Uvtd9ePh3IpfPWx53fQJ4v0ROH1YHp4lr5t3
ScoPj31HvwfLc1adenDq5/MuyfO6qYcODt+ozw7OOZR3TJpn7DvqI3teN++b
wKnDTL1dcOoDD1v+NvVLXzhL/jb+EnEA+gShB8Dpa0NeseoJBJ/xo8CxI/hd
4Ly/o98JOPdN5CeD04eF/g3g9K3AHwNnXfDfwOlPQT6zvjfWCz8NnLxo/Dpw
3k3gv6luQ+gr6oaDU8+c/Gdw1hd/z+ZfUM8anH1EvjQ4dbbRn+D4k+RRg+NX
4zfaesnPVJ31iLuSd23rrjq24NSzVR3bwKlne6ndv9OfCz3JeQR7St4yOP2/
6BfFOOiBo+2+Hj1w5Cw4epjxkVvyn9WfJOQTu8M46JMdLB+AcxP2CJx+N/Sn
AR8yvxqcdyXof70/DfrWLOPQHwUceaY/CjjvULAXjA89fSCgpx8EfSaMXn0m
VH865J9+CYzDezf6JYBjR86eBcdOGR/UR0Hn6Ngv1P1nHPTnyyxfgnMH9h2c
+uqcI8D93AHO/sI+mlxV1Fu398jVgbOMf6TlaXAe5JwCTv750UbPe1jsr+Kx
QU/+ud47R9wVu6w+SCHn+xhOvzzsLzhy+MAsOPZX73ZD3pYaTt8l7DI48naa
4cgVdtl+V31K9H45cOwvOPy/YhYc+wsO/3c1nLr32GVw3nEsNpw63thfvbsJ
+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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNnXm8VdP7x8+955y9zz7n7L1vhmSsDCXzmCmlyExkJkNkzCxDmVIRMk+Z
STIVKZkiSgklJSKzkrmIDBH6fd591vf1+v1x71p77WetvfZw1vA8n+fztD7+
rO5nNhYKhQ/SQqGo9KakUBjSUChsWCkU2pULhbdV+L2OZyr9UWlVf9vUCoXd
JPuU0t6Sq6vsibhQeEt1f1b+DJVtq7pzVed3HW8ruX0kP1rp0lB3R6UfST7S
xS+V/G/6O02yFdpTeT/lWyj/idr4U/km/W2uPv6tsj/zQuHprFBYoHPzVfaH
2tpVbe6g9I56oXCiZD6SzNlKP1a9o5Weqb9M+VHq50nKv6P8QUoX6Vot1Yfr
lK+obne1s5vaeU7tL1b736n9gsr3VtJR5fMlv5LkB0n+KZVfqPRTXaux7nvs
JJmj9HeG8muo7AX9XSmZ+ZJ5RvnLlf9S+YeVP4v+KT9R1yqXdB+61lK1v5na
v0PnbtZfG/VzivrcTPJHqM291PZkydclv0zyucoPV/meKh+v8r/U559UPlJ1
d1TdD1R3dclcLJk5SneV3IHKT1L597rWmrrWNZL9Wfm1lR+i/C36a6u6UyUT
6TqtVb6Bjq9WeWulE1V+mN7vv7rWajp3gvKJ5NZT/l7JtFJ6I89c5SuVfD9b
6G+TBj8XnndCPeX3U3+OVdpZz2G5+rCNyu9W3Tv1t5nk39G1/lB5W5XfqrI1
1d72tKdz/dT+OjreUccd9LeVyvqoretUvqXK91FZVC0UdlE6QnWf1N92yt+v
dF2d76j8cOV3U/445buqflvld1e+vfIHq28nqb1d1ber1OZGOrebzq2kNrsp
fVp1W+qZXiOZb5Supb8Byn+u9ISa+7K28vep7i6qe6zqPKs6u6jtz3Rfzyu/
q8oe5ZlLpr1kDtTxncrvrPxhyk/QOy0ov0TvNK773fEOB/Oc1c4raudH5a+W
7FylF0r2LuWP0bmByo9Qvpfy89Rmfx0P1/E5qj9O7byj9HvVOV7nC0o7677u
0/nvlP9Gf8ep/D+1f7bknpTIDKVltTNK732qztWUf1r56crPUb6P2h+q+geo
7jLJD1XdVdXn45TfX3XPk8yqJb/jXXK/d97/F5LvoTb+lPxkyfSSzJWS+UDl
h6n8N5UfqHbGS/5yyXdX/iXl+yvfqG+jj2RWkuyR6v9E1VvObzkqFB5TO9N1
3K3u+71Y8idKZobKYtWbonoj9be2zjVKfpjkX+f96ll/qTYWq4/X8Lz0d5tk
3lLfTpXMEB1vJJlfJbNEMqer7HqVHaG2dlD7Nyv/uc59Rp9U9of6P0/5S1T+
jtKh+ttY5W+pfG/l/1DbNyu/XO08quc5UeeWKH+P8uOUf0F/d+mvueTuV9lz
yv+q/Paq+6PSwap7i+7nRpW3o23d58oqv13pvSofpvL2lOvva54bv321f7Pa
elTnNpNca5W3V3kvnp3Khis/SXW/Uv4Evg2eh2SGqPx45SOVP6T8znpuTzL+
6+9ByY9WuovO36a2f9P9LlKdXNfamGemc3N5tzp3u/Kb6Lpr6Pw9Sqeo7AuV
lXkfes6TdPwZ9670PaXLJddM5c/q+F0dH6hr/Kuyu9SHJ1T2msqW6nim0uf1
t77yV6v8V133W+U/Udlk/W2s/Gpq52Wd+1DHd6rP9zNHqb17OG5Y8VMoHKV/
Re5J7f+lPj8o+fHMQerrhjx7lR8pmQaV3a/842rnZeX3VNl++t6ekUw/yW6q
66+sv9N0/KCuu4faOl7Hn+jcPYzrTbpP5e9Tfo6+pQ+V30yyWyr9Tn+PqfxD
lX+i9kuqd7Ha717xPe7GuKHxYRzPSN/jXMlvrrpbKP1cf+2V30rp/ZKZLpmP
JNOj4uewn9I91Z+fi56Dv5HcCF1rZfXnIcnPUvknkr9T+YlFrw/66752UZu3
Ka2ozq9q5xAd/6LzVR2voeO+are50nFqq4Pa/0rn/tLxl0qX8TvV39fK/6d0
Ff09HX6H+/PQJT8yfP9rqfxKpeupfJ+Kf6cdlX6lfu4s0a2V/qS/0brOXD2f
hco/xXij/l8hubUkP17H+6vN39RmXf17QvfyKd+Z7qWLyr9jwaPyR1T+Id+b
yq/Vve2h4oeU/qM2vqFvOt5X15jJ+kjXOUfyb6veDpJ/X9e6T+Wb6Xd/hGRe
ZO7KPU6cJ5nbde5pXesQtd+HMVp1D9G5fZUepvRClV0rmRNy55fqulHRY8Xd
Ko91D3fxvan9ZTp3j/Jvqg+xrj1c+enkix7/h+n4WV3rULV7AXOxZPoq/Vv1
XlT5ESrvp+Mdq05XV92B+v0eWbLcgMhj2fnK/6s69zLmSeZI9e1V3dddSu9X
m5czxtY93l/WaLk1mMd1vKnaPlN9HqOyVZU+KPkrWGAqvSry/NRfxxtXnc5W
ux10bpCe8+Fq81ilA5ijeSaSHaj8zcrXaEvpLqr3UOr5oaS0V26ZRuUHq/2T
wtzRRXJXKV2TOUvnHlLdacq/rudwYsnnjtD1ZjH2qnwj1X1L5T+p/G2li1kX
qS+tJXOTZH5Wum7dfekt+QMkc7pk9uEbVflQlZ+h8qmM+Y3+DtZTH05R/jXl
11b+JOUnKr+h8ucq/5by66vunap7uurO0PGJjX7WbVX+s+65jb7nUerzQboe
C/XNq37+70pmI8k8oLpnqu6X+p5OYf2gtJ3Kf1HdhYwnFc9fbyr9VecGSeZI
pTtKpsi6TzITlO4vmdFK/1H542qzSc9sc+UfUf4stf+D6lykuocq3Ybfhtr/
SXUPVn6SZAZJZivl/1L5hurzx5LrIfn9lX6jv/OUP1hppHaflvw6Sq9W2eO6
7kl6ht/pHocw/+n4J8ldrvzhSp9g7tXf86rzk2RuUvlTOr5e6Silp6ju9rpu
I89D1/1bv4VVVd6ywev0f5X2UN2DVXepzq3C/K6x5XLmGdWZqHYWqGygjs/W
s/1U+WY6f5jafEv1rtV9zQrzKfPqJqyNlB/A3K37f1P5a9jLqJ1rwry2DXsG
tfGXzh+idl7T4ZWS6av2v+Ob1LlZkh9Q9F5rFX1743T8oc5drrLrVTZfdXZS
O4lk/1Y7LSUzQTLzJTNTba3EHKW2W9U9fpymst90/oGwZhiReN3QlTV74nlt
c+Xfldzq/LZU7+7Ec95WKt9Bfwu5F93Xeonn8w4q+0Ft3h7WCbPDfM283aXi
NcmWSudJ5oai59H3dK4V/VH7IxPPmXtIZo7K26r8PL5Nyd8p+TE6d6/SsUp/
YQ8a5lbm2PfDmoS1yWOSeYX1IWtf1R+l9HyV/6nv4zq1dbTSObrGIayL1P9v
VHad6jyo45P57SvtpXo3qmy48j/we1P5Tuw39M0MZN2rcw/p+CSVPyCZ49m3
xV4LTNKzP1Xlj9Eez02yt4Y+d029xrlf/XlP171D567Tud1Tr9EeUvlpfPMq
6133Gov7mqY2f5b8rZJ/nPWd0puU/sy6LfaatBO/XdV9Q+UXq+5TRbfzN88h
9brmTrV/pvIT2Ptwj7HXiVtXvEbhec7Qte7QPbZU/V11j4OUH8y3qvyIop/P
77wz9h063kjf2Blq8yWVn8sYoLIR4fnvEHuNMVNt7pF6zfWo+rBA9/JQ0c9u
tNJnlP7D96RrPa7jJ3WtsyW/i9L2euaX1r1HOFdlPSXzFuM530vd68RVlGap
x4adlK+lXl+PoF/q5zlhLjtT6UVKj9K5NPV6+1Gln0vmBL5JnRunfO8wr72t
fA/ekfK/x17XT9Ozmq3yY1V+S6PHN+Yh9jtLY8+5syTzhmQuDXPHmqn3R08q
7aeyQSrrqeNTY4+fudJ/Y89jidIzYo97qyj9Uvd7A/tT5gd+B6p7quo2VDxP
faz0C13r9pL7v4A9keQeVr5N6v3cGOZAfncqO5FvWjInSeaxRo/tlLG/O1vl
HVW+ucpnKD+g5Hs/O/aY2gL9QGrdSxfVSyr+fTVT+XuSv6bkZ/Kt+nqy2rlU
7+hU3q/KeqvOqqnH4E7sf5U/nW9f+ZOr3ntFifdbz/Ps1e5Tam+m8n0l92xs
vc3H+pa21rUWqd3FrLlVv4XSv9T/LVVWlvxqrFljj+XfSf6+uteZv0tmC8kU
JbMqexJd9xvWw7ru3mpzK+VjnRtZ95pwueQfrXut+i/rx7rnirLSbSXbTLJr
cz+q+4eO/1Z+n9jr3K913Zdi64K+UH6srtVeMt11rQMlH+veUtV/I7ZO5lvJ
HKvyHSSzjsrH6Brrqb2kbv0Le/mvJHNX3WvhJerPsNh7lG7s71V3fdX9XOfa
Kj9P+QXML0pzvkHmPuXXUn5dxnrJLNNxA89bfdtR+UPVt+fUfjvmQ+Z2lW+u
8v1U3kHphpLdUOe6xdbHLFR/9lE7jSU/t3F1635SpSNU91fWz+zzlN9a+QOU
vzv2fmt31g/6O1vyGfsntTUi7Kn/Vpv3Kj++0Xv0kfp7XXUekcwnyk+izzr/
kdLLVL+g8gd1/Br7CuXHlzw336X0BX73vGvlJyt/nvK5ZMbo+N1G6wjQFayq
Pjyn4wf190pYo7BWWRPdlPo/R+WZ+l/U3/mMOSpPlb9Y+TWU71vyWpSx4PjU
4/qR6HZSj9U9lJ8smW8avX5dTXXfUb6q9MKq5+pVlf9B6VU6/xnfUFhrfKz8
n6o7Vs/wWR1voP5PLXl9MIc1sspvUPmJutYdSo+te53BemMf1rw6f7PKFzBH
qu61Yc3wuer3V/4D5S+rej3bMvG+hf3Lfqq7so4HSGZd3eM0XWsh37zKWqTW
G41kL6m6F+hcB6Vz9e6O0/XulNwdOtdb6WL1Zz/WdMrvpTrHxV4bl5R+pb/L
lR/DupI1Y1gn36529tZxd/ZFaudU1npq5zeVD1X5OB0fpOuNVfoH+qeS9w4H
qe4Dktk17J0PVd3dVTax5jU1a1eu11p1T1N+suqOkPyeJa+/d1faq9F1bqP/
uteOmoOuYWzUua46dwv3zjin/vSKva6ussbV3/WsAdCTlXzvB6udYur1xjD2
gLruYXo+56nd7yV/leTHM1+o/EDV2UBpC/0drbovoTNIwz0pnag+HF70Xqiz
ZPdUuqvOTZZ8Vx2vwfxZ9t6K59VF6d6N1lXeqfpn65q76F4OU35flb2uZ3KI
8p2Vf6nmdSHrwwlKX0bXqfIvYu9heF+8t91y62XRW++eW2+J/rKpan3kWNVb
RfmDlH9G+aryeyj/OPsX9aeL8tuq3XE67qT0E7XZQuXt2a/o+G0903O4ltoc
onvZNOhmu9atV7xA5cu0hrtT5Sco3ULpfjq/k+q20r38oHZ/YZ+iukeXvP95
gjWrzr+va2XooMJv/67U8/yfanui/m5A56W6DyndUvIzmfd45mHP213p2Y1+
dtMl003pj5K5tNF7Md79SMl3C/uv1yWzt2S+lszbyh+o/CLlG6rWQw9T2RjJ
H1zyfn+2+nCR2jiFNXNufTJ65UrVuuTHKt4Lsmfku7lcdVuXrLMeytwR9MAd
lB7R6Pe6GvOrZA+hndT7O/QA7Pv5hveXzPCy9/Un6Lht6jF5X9U7P/a425I1
ib67V3X+HMbPinVWzVX+p+o+obrP6tzpkpmg9CzJfKU+301/lC7SX2++W31/
P0r+/pLXHoy5jL1rqJ3F6AIkM4DxMPb8v57SR0teP2yqftX07s4pWp+yceqx
/AD182yVTVPZBTreIvV64SCVn6Hv402Vb6eyi9GNqc2NYo/pjO3rKP9Myfe1
lWTWSz1X7I2+Aj2Wyi/R8Xmx54S1sC+o/6cVfb//Sb4Fv1P2KSofrrZGs1Zk
zy6Zq3QvzdXn85Wfq/KLlM5TegVrP/VtqvLt1ca/qjtadV9ibpZ8X8l9pfxa
yl+AronfTOq57lBd64rc97u9ykaXrcc4S8cf67pHSf4C5ijJbK2yaZLfTWWd
lN9a9QdIvquOO+u4KfOcPoU1Rt12kubsj1W+hspfVv4g3fOZuvcl6kuUeW3y
Crq9otvfVHUuUZtddLwTc6Rk2jCu1q2z6qn8AazP6v693K0+H6o2z2dOU5vb
Z+7LuzrfL3c/Z7GGV/n6yr+GHkV1Dld+vvI9Y+tAIqUYIRkzGC/Ozr22mSCZ
6xnflP9I+SGpx8kPlJ/AeoZ1l9I1Mq9z36xbd3QGc4XaaqnyLZV/i71y6vH+
PeUv0D121vW2ZUxPPd48y5pT8jurbKZkVs68H3pd+Yaixzl+zx/F7uOD+u6m
1m0vaqF0k8zP7B32Yqnnxy8Yh1LPe59Rrmd0Y8nz6ajU9prVlN4Qec7FhtKr
bNsbz+vP1La1ZnoeLXKPBTvqOnupD93Uh/mR7Zlf629LHZ+TM3npvjUv9Cx7
HUh9bG7rNnqdd7Dqnqv0N/a2kklLvs+Twx6wHXNhsBE8wrtWHzZQ2R7YXKru
V858UfPamPXhTkXLMMZ9p7qrBr3BjpH3ueTvT7yP3lHP7Sb2NA0rzKuF7XSs
pgpXxd6nY7PQZQqTI+srbsLWgF5X+fXVxjORbQ+jJHeVnsUQ1XkptR2Sb/XE
oOOg7t1qeDvJDg/7050i2wzox6jEe9upKvtada8PeoOddC1Mb2/yfOrWhzyA
/Uj5NVV+L/rnku0c7N/HJN7zTpf8bRWPz2/GHvNnKX1I6StV/6Z6SHY1HW+L
vlQXubhsuybfzVC131l1u7DPqHm/w174TLW7VslzzEWqm6ut9ZpsW9ik0faF
A2t+t/zeryjbxsnvcGWVr6d8SXVWyT1nr5rZdsp3fh76hKJtqH3CN823jQ33
oJqfZZp5r4G9uCd6sYrteq+pn0eFPQ72459T24RTXecX5VdnzcI3UvZeiXN/
JR5jU5V31d/Bamcsv3HWWMq31fnDy9blIcc+BfvvKTp3ltr9U+fX0b13rlk3
z94Ne+I0dMRKj1HdhpLHNfR/zRv9HH9Tf35U3a5Ntl0zHh7Dt1d0P7FHNuVe
u1R0v78qbRH0aZ0i64jIX5tZb/W62ts6CroUxuG67TIj2Xezb1J7w9FlSWY7
vgddu29qu9PVOn9b4rX9prrvD0q2i92m4w+VbxbaHJZY1/SK2thMcgyRE5X/
rGT71lD2pzp+peh2t4lsI6Tdo9lXSv4O8BHoo5XfAP0Peo6GFeaWwur6N4G5
jPWi0jkN1hldo7o7KB2lun81GkexPXs8dWBP9hno8lPb5gYxJutvR5U/KfkH
9J21VVt76loHoFcv2o74gfIdJfOOyvfPrY+8UmmNdZz+ttW5Z3RutvKHsTdJ
3K+y2jw6d9+u0nX2joxHQe4IyW2jes8xP6a2DQ6UTEl1nmdOT4xhmaXyrQu2
493LGkr5nnXrRe+S7HF1l5F/K7IO8w7da/vIukR0m6djA6ANyVype1yJ+RJd
svIZ85bym0feu6HX3aayQg1cGMp+K7Nud1xqXR920mY6d0BuPevVSscm3gsy
EJ5V954a/SH29qdUvo6O+9VtC3tM5YuDvhE96il1n2eMujvoVNFZs57/WPfx
iNIt1LehQT/ZtrLC9FW4Ude8RGWLdDCYbyCybvla1bk483qpk/q8UWUFDKFw
OfNe3bpfvm2e390N1pNuoX+rKl1XbY6NvC9Fl31Z5rXSLqzjlH9f+Y6p9ddc
6zZ+I+z1wp73Ml3jc/a1sfe52LWVFDZVe5cq8zPrQrUzW+nOameMyn9ptL3m
srAWYv38cMVrktmx18qMyXnmNcDu/OZzr0kYV19jfGNuU70FOn+/+rZI7X2q
/Ajllyj/eep1yF6MHbnn9L0ZE3OveXZSO29mXodsiN4j8/6d33Jjbh0C30lD
7nXXaqxTlfbKvK7+J/P6YRvl38i89mDcnqJ0Zu41+v7qyxe5x8pX6x5bGbsW
q+2dlc+U/wHdcGq7bo3xUM+nGPQ5e+n5LAw6sfcT6836qa3tarbtooPC5rm8
wWMrujWeCbqq4zPrJP9WOrJq3dr+fD8V46aei70+YA2wNPVauknyLwcMC3q8
g9B5Vbz22SfoGD4oe82Drq8UZLYrW9fEWDMjt15yN+bh1LqI79XmG7n1rdui
01D57ap7SGbbKLiN7uCklL+RNjPbVrGx7pfZvsker1tm2yE2xAMyf6vT+dB5
R5ontkMfl3tfiQ23lfJrKH+P5A/L/B1OkfxypQOxAaj86ZL1Gwei95P8H/qr
6DntyHpfMm/wbZZsR35V6X+Z9w4vKP+v0q8SP3/WdSX1YVv1YSMwZspvpXy7
3OuEb9EjpbZZMBYVVX5F3RiI97E5pNYb/8I95dZBt+d7yKx/XoqNLrOO9w+l
VbV/tGS2lMwl2L/UzuzUYy5j75zU6/b90DnmthGsrnyU206xtvKV3LYS1n6l
3PMC2IsP0ZkpP0/5ucp/kHsu2ULpBnrXbwbd5i5l6ycZnL5O/e3xu/xcz+S3
Bs8705X/Q/lz9U0cquOPi8YZHoheQ1UXq2xhalvfi7rm4NTnH1P+gNRrpueV
31fyh0r+G8kfpr8lRbc7LzVmIVHfdi4bu4AeGAwTa56intURkv8zlH+ZGtsw
Ch1darzi43VjDZYq3wdbWcV7rrdZd4d9BzioZjWPA//qns4qGyvDHgbcHHuW
01XntMi/I3B0nYrG0qGv+bRuPNtzNe8HwbNdoPJV1e92kl9T/XxEv7HNdG4f
bCtV2wKOUP48ycQ6btXkfd9W7PFZO+bWv7Th96X2jyr4WS1LvE+6p2J90Xu6
j4eV7lvzGqoh874NnQ9rx/1S40OG1712+CWsHyajD2W+qliPzXiFrrxb2TgS
9Oc7sa8ouO4BYJKUXxS5vVqj9xuLE+d5dx1qxmygz/8lcRt1xjP97ceapG68
JLr9I3W8ILGOvMq6qGw8Csc/pu4P42i31Psl1qXdy7YNNOl4YMU4zJex4yTW
ww8Al5L6m63qmXyfGm9SV35/yR2tU9+rn69LfqHu4TTJD0yNp71H7R+icz8V
bfuYLZnvlH6ksu7s64rG3x6k/LdFP7srUpfdzTdcth6e6x0smTlFY3CH691u
rPzerLVSr4N5Du11b53Un9uV31J13w/X7Zl7vmPeO71ijO5I9f0TtdlV+bms
y4qWAVdUUd3JRdsmpxb9u8YueGzuPL/1V9TOdSrbJLHeEozlJeydgt4VPOQC
fp88T/XrsNxYyFuV/li37g0d70ZV67GaKz87M15zF/ZNkXWk6ITRw3ypdK7q
rB3sBV80Wg/Xo9HXODq1LaCl0nZV6zEasdGpPwcU3Q44mgcajaVBH4vOth/7
Wda4Sl9hkxob8/mD0mJsfMhipVPU9xtZ/6jtXyR/C9+75B8uey5AF314bpzF
HcwLdev9ptas1zxZ+RtU58Ki9fjo8LeuWg/UomZdOpiTgSr/r279JPichXXX
mwQGoG6bJnrgrarWgZTRx0fWRaPD/CAzfmVP8BXoKosuX61m/XxL1buaeUrt
nC6ZUZHnOGwTKwfdF1iFDXNjZfpLZmzJcx9zYL+q12YbKD+gZj0burtVVffZ
kteC2GpYB77DVJsYh7NWxTo67DLv6vizyL9rcNLgs5Y1elzAljir0frEPrq3
V3nnSpeBa2J9mxivtb7qjVbaJrKd5nt+qzq+CNuVxr00sk4PvfF5RfcfG8k6
QV+H/WaVxDrGVmrr+pqvCU4JXAj4kDNZV1St07tGsp31bU3hvSl9NPKcjt1q
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
vDro9tHxww8DtriL0gtjv/84Ma8aOIvVmszrwrObXDV3ClwoxOCCNxWuVOKW
w+GAjQBbAZw/4OSIaQ/HF/4S2AXgRoPf7LnMvGT4SKDzh7MLfEhWM5cLa7Dd
M3OUwbE2PjOHGDoi4sPCr8K7f6NqPhCwiXtn5kuBR2VuZj4x8DJrNpnLC46v
iZn5P/E1Jf4J/KvEbmefDvcO+llir8F7TJwJ1mNw8xKviHkN7l9i2rE2gHMY
W/viqnmA0R8RPw0OYey1v1fNT4jvJTixZyTzfdF7YfhI4RollgucusRsY48A
5y02yEFV8yfzOyd2BLzQxxSNEYHHFV/ogVXzteKH9kZqHldsIthG4P4lNjZ7
dnR56PQ+rpr/mTmMWBzwMPMbXlQ1fzW/YWKUwR19fNEYILiRmXuI8QVnNbb5
b6vGivwPl41dBdw8sdn5vtmDEwuU9T7xevGRgZsezryFiWNJ4lvwXWp/lqMj
+7DghwJvHbFOifWLbxf7a+Kv4xfyU2o/L3j3ukm+WW4fiz9Sx7/Ex2u/xLo3
OOjxHcOPA+57fDCIo4nvywGJ/aqI542/56NhvoNrAhtpx8j+1+i5mfvQe8Ot
QQyeNgXrAODp27Ngnlo4bfHvQ0e4S2T/OuYgeDCJUXRfkIHzlnjY+LLvlNj3
Ew5W/DHz3D4sS1LHksf3pXvi7x1OefyGiOGKrxI2KXzEDo/sO8beixiu+BBh
hyT2AOstsM3wUeI/u0kox0cJrjmwV2s3mZ9tlZL1L/D+8eyIdwwf1yYl67lK
iTm42Yfj3wQvJDFiie2xn9qelzhWKMb3+an9Pojfif8p+1HiCeHLxn4ansfO
BcdC2L1gfkXsnMS36FKwLyF5/JhYJ8Jnio/k3HAv+NTBJ7E06DPZ4xJzFH+o
t4M8/n3ExoDfFJ5McGDsHffVeLN7k9foYP6JjctzhDuTmKcrdDLKX5M7LhG/
qTXr5tufi528bt5kbPQ35sbAjUXnGfat6wZ5sJc9atZ37aDyDdXmQ6l/g+jX
R+WOW9Nb+Q9qjs1xgWT/qXsvv0rquISsQYmzMSR3HCD0S5OV7xXbXvBz+D3A
vzir7hgG2HAn1B3jAVthr5qxnS9gG8mt20HHM14yzSXzT+rYNvC/Y9Nfp+44
AvPqji+J3Qr7Ffg89KDLWX/VrffrDh4hdzy59qEu1+Kas+vW/R7EmF831gks
1ec1++/jx9+nbr97dF+T1E7P2LYPeCiISYYt64u6+bmwV35bNzcW2IAJknk2
tu0DXwVi8GCv+zaMKXB59q6b7xjMw+ya48KchA2q7lgM32NnqDtOwa/4S+nv
ENaYku9VN380GIzNlT9S+RT9R922EmwmYNjApoFZG5gbh3o7a1jJdJPMX+gk
Vf5SbDsOeHsw9WD2r8qNE71H8i/nnht+V/7e1HpI9JH3p15PE8fgz9TrXfgm
z8m9dmIN9Yf+mjPG1B0nGv89eEC7po6lhX18sOTvT6wfI54v4xe6zMVgIxs9
z96cG1fKdzJR+Tdi46WH5caydOYbzK2n3gebbO51C+uX23PH9WH9MBc9Pmtq
1e0fdM7onmfVHMvmGOXjujlCn1b6Um7eAfQGk3gf6k+SOQ49+1/2wcS8Zvwi
vspFudfhrMcxmqzFmrRujMerwW7zQd18dtiXwTqAeQDn+37NcX/OqDu+ONwT
xB8nhj37XPa74ECIQ4CtuG9qPd5QtbNt6nhSJzNW1BxTidhKz+fmp0C/Ma3u
+CXY06cqvwlr4cz2bOza/N6JMcd+htgyxD5mvCO+0G25sZsT1PbQ3PGNWM90
SB0ftk/muHLoG9HvPsBckBRWEJpsn4a4COirc+s3u/Dt59az76d0P/A86nNb
yR5Yt5/RJqmxBdhnsdMSux39MHriMeg5Y9tewS6AYeBaw3PjnHZVOgh9VGL9
bV43T+mz/IZSx40CNzKl7vgu4BwYExkbGTMPrpujZkued25+Dey2xPJm7c0a
/PzU+zriCO3K2lLyq6vs2mAPwi7UKXVMBXA+xKebGuyE/2TWM6Nv/j8YWTQu

          "]], Polygon3DBox[CompressedData["
1:eJxFnQOULEnXRbO6qrtc+ca2541t27Zt27Zt29/Ytj3zxrbt+feeU2v9a3Wu
jshQZlZkxL3nnntzoo22X2m7gaIo3qkXRY3//w4VxSH8X57MpK2i+Irza5C+
bbAoXiL/flkUpzSKYkoaDesVxTzk/6kWxcfNohh7WFE8yLlNqDsp5W3Sq7aL
Yj7SM1eKYoxOUYxG/a0Z43uOiaj/BH0tS9mqjDEl/b9OP1/S3zece5M6rzL+
dJQtSR9XU/cz8iuTv4YxnqP+3Ry7kZ6V8j9pew/53cnPTfvXrMv481A2Hm06
XM8n9dzb1dR5lrrjc24b7ndG6kxA+kjGmIS2Fep8Tn8fcb1d6k1P/lHKP+Ca
lqf+71zjh5TPwLmdyc9L+xlJf0j9M+ljZvK7kr6Ltjsx1izk/6X+neS3GcyY
K3Et95LfYzB9rEr+M9qMxLkDyL/J8/qZNl3G3pI6d3D+ZPqeqpJzv1C2Afe3
PH3PzvE09a/iGmaj7jDqfE3ZleRnJf8z+cO73D/Xvxp9D9L+O9rvSp8f0PYq
zk9B/Se4hpEom4FzpzPWxZRPR/vFaLMIZatTZyHKJqXOqPQ9P9fbIv0DfY3L
7/ksdUYnPxN1zqD9X4w5OunP6X98yufx3sg/QJ+vk16f/pYlPwNtJqO/Nckv
Rn4K8mOQf4b2V/CsB6i/O/d3Pm0mJj0/17MAY73DuZWpPx/3Ny7pz7mevxlr
Fc4dT9sH6G850ptxfEX5re082xXIv0X+Qvqbhv6+oP1D3EOV4zHKLmP8Ubj+
87iGSSlvUP4xbadkzCvofzeuaS/SfzJGh7pbcG4Uxv6E4xLazU8fe5G+kvTs
tJ2KOi3Geoj+thjMbzgK439AnUOpsw7XtBT9v0M/S5D+jv7f4Vre4viG9Kqc
f4vjr3byb3N+TJ7nG/z/ivyS9HkN/R9EX6vT/ifOvUfZZ83M5fUov4XyMRlz
K8qn4foeJT0N93At/e5F/X1JP9zLXJua8lFIv0/7XylbkzrvcYzeS9vvSE/I
+HfUM9ZytLnO9cJn6HiUf8RxGfVnoKzH/X7JtQ9SZzLKK7SZirr/cIzlwkN+
StIrUX8r8hdzqs6zva2XvjvOIfLLtDM3naP/kn+unnfbd/wi7v0R6m9P/enJ
j016Tp7vD/R9KeOOxfV+wxg12zrHSDepMzHpr7nWCShfrp25Oy3XOxrPZ4D+
jy6yBk5FH1PaJ+U/UX8S6t9FfnXGG4Nz33I9jzLeHvS7vmui10J/p9N+Lfqb
nv4Wo4/LyZ/ieL5vzlfG2IDyWSkfhfSJlG1M+21IP0L529zX8fS/KeklSP9E
+4spv5Jxru2m7Secf5zyrfi/EOXPU/4I5dfQx6ukv6fOdpRd3s212Kd9P06d
lyh/lXMvD6UP+zqb8TYn/QzXuD5l59HnDqSf5NxezVzf19zf8aT3I30UdaZw
beL4kLoHcu4kyi6mzZmU3c6xg+8f4x9UTZ11yJ/YTN2Xeb4HOH+53sNsS/1p
6OtM2p9B+myODai/MXWe4tou4FonpWzdTura5jb6ft41l7ITOLcx+afJ/0Q/
N9BmA653AdpfwNgnuB7RfmKOc0jf4BpL2dTkj6Xt/vR3E+3Xpv/jyX9Em+co
u5pz65E/k/6uIX0y138IdZkCxX30cxFjTE3mAvoalflxMffzpHOBNptwHf+j
zSakL6X9jc4X2oxD28upcw19nUL9q6vFfx2eSB/L0eZ3stdy7gbKz6D8BtJt
yk+l/KR62v7L9Z9AfhzyZ9HnVpzbifQL7ke0G6PI8zuTczdR9gzXsCJ9X0D+
PvIjyK9N/lnaTkXduzl3J+1WoM/ryJ/pfs39P8X/iYtcw/8of5Zzm3o/nNuR
9BXNzM3Zqfcgx9yMuRnlV3K/a/Ns7nd9pfxJzj1P+fyUb0H6Gsp3pv0YXM+p
nN+MOtu7vvOMfqR8R65tNNc78p+S35z8KOR3pc1djL0V5xamr0Pof3vaPs65
iWh/o3sq+YV4XldwL3vRboUi516m7g+0/4D0C6RHp7/nm8mvyDW8xjGCY0Hq
f8S5Fymb0PnIuUt43uvQ37Oce5eyDxj/Vc7fS/4R117yGzLW14y/NnX3dn8m
fz7lp1M+A3XvtD7HqPR/NucupOzNbt7dKbnes7ifG2gzD33NTB8jM97b9DcX
6VXp7xbKbuKY17XD/ZjyMfi9t6fPn30/uJ+7ud6FffYcH9HfFPwGM1K35z5K
+QPkN2asSSj/lbFv5vza5MdzPVOeonydwchELdq3abMF55fnGk+m/kL1PKPP
KD+D8tfr6f8Y2jxAX3dxbkz6+p0253Nt+7vmcb+7Ov8oW4H8bJSPSZs6Y91A
mxVp2+Xc97S5kfya5CewPvk7qLMK+VHdzxl/BONd0Mia/Az9/UR+c/o6nPyr
nL+b+msM5hr+of7y5Pcl/Rxlk3Mvg9Q/ievZRJmFsX6sJ/0QbUaQn5BjafK7
u/cORX5Q1lLmUj6bjvINKT+I/Mv0+TH3eBz/N6bPFal7PeUr0NfYXP/yXP9D
lC1RSZ8TUXZMPb/9j+SPIn8bx6bUn0yZmPr3U39x0ktSPh5ld3APR1L/NMpK
rn8vxnjQtZk6yzr/6ykfQf0Dqb8U57Zz/eX69qDuPpz7hvT1vufkj/T+qX8J
deZkrEM49zz97U1+FdquxrEf6RG0OYyyNRzD/Yb8seSPo/35tP+J8Y6m7wXo
45sic/wCrnFR8j+Sv9A9mPwRHDuTfo5zk7m3kt/d/Yf8VMrr9L8n/T9H/we5
d1J+FOXncm4W+ppJHYC6R3PuLMpu7matfpHx16Ltn9zXvpQvTH4sZVv6XJz0
BTzTJ5yP7o/0NT/nxiR/Xy+y0fiMN0T6vXrans+5x32fWqm7M/3+xrE37ces
ROZ6k/HP5jjW9d05R93ZKP+8yLlzKDuOY2/lNc5NS9/PMj/+cl4qkzLeClzz
zsqe5PdtZ79zrT7H9UP5lDpTcS2fkz+Qe+1yblXK29S/mfSn9Pe7MiP5oym/
tBP5cTH3fcqe5pouof0WlE9CejT63436K6q/tbKuur7O6R7jekv+Oepvz/3M
Sfk7HK+S3438H5SPTZ+70n4Zf3/G200Zn/bL0X4Jyj/kerel7uy0W5D5+SL5
CwcjQ82vPK88Sf25yT+tzkB/e9LfGvR3Iv2NU+ZdW4n8ceQv852m/uLUP4p0
tczecj7nNqP8MPcF6q5L+XKMvy99Xq98ypifcg1fK4+QPpBrWtg1rxfdbHv3
B9IfW4fyzfmN9qHtU+QvJr8xdaYm/Rt1jqPtIP0szP18xv83Kd+bcwtS/q+/
Oddznusf7UemfBfS31PnM8r+oP1PpG+mv41IL825M0iP4Nx7tvX34VoeJ/+W
843fZ9+h6Cjjk3+S4yLKFqXPrej/Q/p/jfyujD+35fR5OPk9i+hLrsGuxQuQ
P4D0qPS3E/0twpgN6j9OnQOpvyD5OUiPzvPclvIdiuhfozPGRO5Lznn1Bcp3
JL875XNS/hDnjlcfZIz3ed5DytCUX0P9zSkbmfG2Iz8X/VfI/8TRI78Tz/fQ
ZvZt9++Z6O8S2o/mnkr5A66x1P3Z+yG9OOmFeN6HUf6i8r57mjIV17Ml6S2L
6J9Xc4+/0d9S5AvSk9D/oeRHps4v1P/CPrneq+hzI9L7NfNb/OA7Rf53+jiZ
shVJL8J491mHsgVcD9QZyrz7i5I/yrVXncz9yvWA8mHc71akp+Pcb5Rd1Mlc
XZR7u4u2u1FnhL8ldX4nPZL6jvsIY+5A/jHxDtc26jzqWsFxOX19wjV81Moc
di4rIzk/n+d6zxwMRjMr6cvFFChbkD4rXMsynewFrjGuNVXOLTEUGfRB6u5C
mwdrWcPn4X7ep/836O/6IvqG6y1//81p5/a7YjKDmbPOt4L+FhiKDHljM3jN
opxel3NtdVP6f4v6G9H/7FzLvrR5z7Xd/ZP09+qUlF9Mfzcw/vlc5xykd6LO
KozfoY8NqNuoZf/frhd5YZD0T+pyYjCDkaHn7EQnVTedjutZvB55bD71Nc41
1Td9JkPRgZ6k7BfafzaYZ7xOLzq1uvXwavAN9RnxsOk59zfXuwN17nF/Z7w5
uN4W/a3jvVD/I+pOwDGc/DPU2Y/6g9Qflw42pI8a6QHqLzIUGfsu6i5CfiXK
PiE9DvPtFv6/4P5OnRpl43OP+zm/6eNUsRP37KHIkK5HY4pfDEXGmVn5QR3f
tZ1zf7q+NXKtE5P/Q32A8kmH8pvvSb7WytzeQbyCvv5uBpvahvxI7eBy4nPz
VYNPuf59o25PnfV6eWd8d+4pol+s7vpF2cec+7CVNc+1zzVY+fgxjrPJL8M1
fVrP+/aj+JdruvhHJ2v/6Ooy3PsErexVroGuheu2gsXcwXg/NyLXKt8uVA1e
Ni3l+1P/UM6NTf2xOA5xvaHNXJTN0gsWsxvtZya9KcfZlN1Ifs923u/F6Gt1
+lqM36Mkvwnte5QtOiwYhljGTNRZijqrlFkrxSr+Jv0NY/zN/dw1EP3xa46/
BiNz7S8OoL7v2ka+Rv4vxv+D8jupv0kv8u9Gygvc27v0tyT5KSibkvoj8WwO
aKZv+7Tvczn3lboObX6h7mP0sbd4J3WmIf1OGQxmFdcgyofIL8T130WbbbtZ
I1wrlDEuo96P3eI/4Nd79t4/6wZ7Wp98h/wb6hONrGnz0PZixv+BvhquB+Tf
9B7I70RfPZ7Xu7R/i/azqG9R92TaX96IDvIx+TptVqDvD2nzAG3eUydoRKZZ
jLI36O922q5I+eTUf417vn8wmOFw0ieKN9P+oCJ4X4383OSvoP6WjP1mGcxq
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
Em/SVm28jz2bmXPOvS3o83bm5+XM18PbiU/yrxyF4v/jf+gDK599izI6xfat
+DOqa+yqvkH6GjnW7cg4e7Tif6bso/7+X6wk74n0nWUwKP1DNnIut2M/FGMQ
a5iPazqMssdq4e+oc1zVzDuvLvJBK2uFPmgL92X+uV0zK9EF5CPrK6zMfhj1
P+fcIpXEMDCWwcJl9OFvud6Ly+CXtv1ZmZ/6m3eim8hh1r9I+5/yonx0eely
euX2igk/2g3f6LG+vCY2IOdZ7rOYouvr/BxH0P7xWvhFxmDZvZk57lyfxjV6
IJwP4yPo/3h3X3+Q+zpeJ9jHr1zv5WXWTNdOfWLEbt+nfP5KOG1y225vh8+j
z5S+U/oXiZXLSXH+yherV4LhndsLR1KupBzhL9rhZ8rtM4aUsaTG7gRb+pH+
Li3j72VsKWNOGXtKe5uyljGTjJ2kD5i+YHI8jT/lO++7bwwj149De9G1xBzv
7sbfyblgzCBjBynzKfsZk0P5TnzLWF3/2RiasWlp25IDrn+b9i593dSZj+nF
fn5XXz+VSzY75QdUck57uhw5uXLalD9qhzMsd1gbw7PuL71gk3JI3K+MyWFs
Djl6+uMvWEZ3+pLncWEZ/p5cQH329d2Xf9qtBGO9tJf4Hvryi4le1Mf3nI/q
5Pod3NMOX8p3VV+M9TvRpcUEN+1mT3Jv2kfMh7Lv7GMwNihtUa6PclX0edD3
4TNljMHoIOoi2ry1fbuG6g+hj/6bjfgA6QukfVxfCW2C2gbdDzesxOfdeD+7
NhMXQx8hfYXk67gW6POr76/8CX2H9AnSN+irXnzdj69lPXuf/KOD4WQO72RN
dm2Wk79kL/uRe7E+OfrmvMBx3mB8DBYk/Xc3vv7G9DC2hxxNuZr6RMxNer8y
/t2/NeLPbfwRbVHDaon/sX8Z7tfvjdjrmt343rsH6v+jDKMsIwfUeAT6iOor
qk5kvAb3SPdKY1QpL2zXDt9wE36vh8rsB2tXEkPB+E/yg1yL9fnQ98M9wr1i
B9rP0Ik8r+y+B7/9ZspD7fA5NqS/B+hvmV58p7RBvN5LvItj6P8F8ZVeYl4Y
+6LH9W7UDWYsdmwMEOUJ/dX0ZdPGc0Mve7J7sxy2Gm3/V09cHH3e9H37gXNL
VbKnurce2IuubcymW7rxaTeOlD6T+k7KF7T+Qf015h6fbz0+znO2o7+pm+lz
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
MG6x7uvU4eqRL42X4fc8lMWUmY1nbx19y4yVbVs5xHKJ5cgbL3HrXvhdxj66
pgxf3lg1r1G+ZzfP3eevjiTJ4xRl5MGswbv27V0fDgUPNH6anHy5+eo78oHP
pc976onvbLyvj+rx/VIHknN2ZiuxRuT0yx/Xv0x/Nvmn2oj8bom+i8roctqM
32usVOV94/+e2EusdN+5nbuRH7Q/yR29rMw3Sfw2yQv12H98J3035eQZv8r1
V3uDXNpLyqw5rj3GYHm+HR8lfZX0YTK+5hm0H3MwHD7jE8mR9Vr1ITSenfK2
2JY2IG1BwzqJ9fd4X/6Sr2+sQfkb8jjEFMQWpmS8V9uR4ZTl9BkxfqJ8eWM1
6jOk79BVjazl+uy7BvnOtxuJR+haIMdFrstN9fifG09I7q17lnvXr+3EKru1
L1/o/2BsTe1L2pnUfeSeiZcZ32b3MlxbZXZl90onsdzu7svnV/evxz3mlXr8
0eQ66DOm75j+VMZy1GdL3y2/GaJsrIz8TD3xKeWG6POk75P4yfj1yIT6i/vN
B3UdOcHaE/Vnk9uhj5u+bjc3Ihsa30GbmN80UXeRI639yDVNnxtjMLvWGV9C
fyz5bfLc1M/GrgdP0V/SNbbWSDxW117jacoN0gdMXzAxf7F/bbDaYk9shGsr
p3z1ZuQW5Rf1S+Mx6cOjL48x6w8mvUgnsQlaffx7rW645voYGy9KDE/+5HnN
YHvK6Mrq9Ua+dXC28k098f2Mr7dcJ7746uTq5sYQkvsl5+tDZbky/j7ahMVH
tflr+9cnxXhwh/QSK8QY9X5f4YheYrH4zQL9sYyn67cGlJeVm/1eywP0VyF/
XC/xbI3lrz6lXiXnU+6n/rPyX+Vcyr38tAh/75b+76VM/5b4ZSPcbTmKKzeD
WcpvPaUZLFOOq1xX/QnkW57Uvz99WL7r2xeNFzVTPbLXOt34BuhjbnxaOVsL
UL5gPVwu9WNjKcr9v6gMR0aujD7nxpvVBqYtTBu4tvDZysS61fdN/M411thE
EzSy9hrfVe6ua74y6bRlZNFz+nwvY8waa1ZOo3zD/2S0odh4tOeI38nFVuZS
9rrBa6pnz5FfLv/ZZyfHbiHKr1cnbsRmru3ceEXuNe6pxhtS/9F2eB3nxu5G
hliqmRg5yhbqOOo6YqKjdCPjK+vrM/d5O/w1efjqGBuWkQmVDf1NtE+KRcuP
Fw+S3y6eJrddHUddZ5r2fyGEiy/FP0gs0AnXQYxDrGP6dvi8v/TXO/kQ2g7V
SdVNp2uHv/sdx8vt8Nv97W+lj+3Vj9v5jtXH/fVZfxZ9Uf6LGdaNvqbt7XLy
nW5kVGXVsfvXo7+tc/NBzu3RiQ+tvrTK+OuU4ad/XYTTt0g3/McJi/jcvt6O
jqauJoaoPie2LZ9XPEt/EO0v+kIr/yoHG8PQWIauP8YvVCdUNzTGofKm/MUl
muF7ap/XdmGsl/uL+NoaL8y9/91K4onJwZCLYcx+42HM7DMr4pPo+669UnxW
DoN4/z3NyBLG8DOWn5iH76rf7Jinkxhpxkozfq/8d2NSG5tanxO/z6F9Utla
G5i2MGM8G+vZbwwYD1k+pr6Q6njrk96rFb9q/aunKBM/xm9V6UNivCXj5Sgb
GCPJeDHGMDaW8YcDiUd+XTu2BnVQddHr27EtGFNtVrHZRvjIGxeJd2bMbWNv
+40r44sbI9lYyW8V+d6RPrf63qoDrlsmnpXfNtuiiH4qP9O9wD1BeViMT26P
GNZ4fduXsWDkFMstll9rbNI/K+HTGu/UtVgfJH2R1Cf8bXfsy1PGqNIXRZ8U
/Yzkn6sryDmXe66+r+xkzBjj/RrvW+65nH+5/8bQkPctJ0n+lDEA5T8bz8y4
Zn5/4MuBxEQ3vpBrhr4pkzWyluhjoK+Ba7bxqeVXa0uWAy0Xepr+9fmNmwPr
WVOMpeO3G1xrlCH085HTp2xhTDr9hY3hZ9xA55e+xsqo6ujLlvG3dw1zfL9n
oC7hOyL33fivyoJyxuWOT1PGV+20Pr/Y7z8YD0uV3vhXcqjUnSaqJH6jtkD5
/98X8TcQ35IbN0Ul8UbFovVfMGa6/hJyfOT6TFzEv9nvE/ntIGNIae/2nZMb
I4fYd1EfDX015AgZ/3y6Mv7qcoDdP4xHq6wv536ePl7pfDHmiU6PfmNDf2Z9
II/g+hdqZO1SxzYexkKdfMvmp/5+box5Y82/UuR7Y/pjGYtSm8aXnXzPS98f
v5n2srJDO7Z4bfLaH8RwxHKMoS/eo3+U38bzm2tvdBKz1NilflPJ+P1iQGJB
E/XXV/2zjDVpDLcPxXNbkTdcj/UV36od7oocFvF3/WVcK7QR/dQJ5uH6OGs9
WIgYnFicPvzq38YTNRaQe4a+VcZLNlaZMRWMraAtQn+XX4v4z8zRf37GEzOu
mDKGssZURfj+cujl0os5b1yGT6G9SA6c9jr5fcZ+FpOXb6cOry6vjUw8Y9FW
Ym+In4ij6BOgb4CY9iZlvkHgtwj8RonfMzBewA3u90XwTHV4vx32VD26vT65
X7hW1RPbRbzUb93IeZb7rM+5vufalLUti/XKTzG+jvH73J/cK71XsRXjP7r3
uQfqF6kOrj+F3/JTN/f3s9x3T2xvir78IifX78MYz0/fbeO5GdfthHp8Ddwj
9aE5u5290Bg0Xq/fp/FdUufx+0TGz/N63MMfGcr3p/xt3EP9fpX+vZdV4tPj
/BaP+aIRG6exiPwGkH7hcnLk5ohxGGtb35ML+vKr31kyxvLsZWRYY0V7zjJ/
H+P9XFIkPsrT9Txvv+mhj5k6trGg/Xaeuvf+9Xy760T3u0awc/nsxiQynqL+
j8Z3M16ecfMk6vttOa/x/D7e4bM1pve8ZXRU/Uf99qO6q4dpY+TOVWZMxzaG
+hxl7sl7kyO2AOmj6omd4BqjD5L4v37VcsLlhh9Wz3y52P2ike8PGHvrySL8
DDkY6iLGdpKb4R7qXvpsEf9Dbbzael8s4r+nzqruuq3Pq0x8P6/B+aMspT+P
c0CZS9nLNd213TV6GbGzdricfmPA7wdo03MulX19wv3c72yIKYstu0a7VvvO
KxspPy3YTIxRY5P4vbRTKvERcz+ZvJH96Gv6H78ZmVvZW07mQmXi2yoLjtWf
k8bTNYaZ/IY1ysTPFbtVR/Z7Zcab16dQ+/vq/Wtx//AdfUKcvZtYEnIi1J+U
w5XHjXn79FDwH2PoXMTptct8b01s1zXR752pj3s97q3a/idvhyvrN0H8nodY
ovHkxPiNB/dj/9mL561cDz5kTCn5MWuViRduDDf5MWuWiX8q9m9M1LGb8bnV
93acVuLrGsPGWDY+A5+FMQuMJSImIzajT7q+6cY0EJ/RX12sRkxCbOLYTmIh
GKNU/OjMXmIhGINK/NvvMb07kJjXxm90o1W/Mea1sa+XLhOPTkxJ/Wa6er5t
pL6xXx9DE8NSxlTWdP3cpRkOulx043Mo78t/MV6HOpO6k/FD5EIYL8/vl6jf
q+f7vSjlDWN6G+9QjF85QnlC7MsYq8ZaNeaO/jhyavy2mN/ulGtj/DzzT/Sv
2e/DiXf5jR717Sfb+a3FVgUx5YjIFTGmg3i+8W619YppiW3JJ/G7e2JKYkvG
dDC2gzGCxZe0Oajnqe+J9R3ciS++MXPFw7SvL9CMvKUvp/Hfjc1tTJYTeokB
byx4Y+oar9t4svoaifmJ/YnRidX5GyxVhuNybRGbobZDOU1+u8tYkHKdjCcq
V8iYQn4nbdy+/WydevjAxo/ye5B+o3KI9Iv14GF+M0MfWnnG8o21Ga9WT8ww
/XV9x3zXvupj6T5D402JeRqLyznuXFe+XqSZ+J3GujGenfKNa5i4ijqFvrWT
t6JrGOPMWGe+E74bxiQT31uvHj7sWH17yJr18OW0LRhPz5gmxs+buI93u98Y
j88Y+voj67Oi74rfi/Obevrg++3cCRvR198Xc2omXpG+S/LDjF8kDiMeY0w9
Y+sZL8rn+3xfhhVXEV8xJqSxIaeu51tm4q9718P1MbahNnYxYuWTHZvxQdAX
wfjmYp7KbMpuYs7G73INci0S0xZjVYZRlpErYOwu9wTjMs7Wi6+mPjj64sgJ
f7MeDrhcceOBq5u6HhvXVduI8QD18TX+nf766hbqGOK0fi9R3xz5FX4fUY63
a9h2lC9KeqVGvh05SZH4nPoy+G0Mv4dhDFkxVLn0ytxiq67nz9czf8RWtD/7
7WB96vStEycUL9RGoG+q35PVt0L+hN+vNSa1samn7+vX2oi1FRsDSP3U+3WO
6vO9eBlM94165rhYr/462mL1MdTXUHu23xr2G9FPdYK7ir+q8xlT2O9tGrtI
fp/xWfWvVXZXhv90KPw8Yxnrc6fvnTGsjGUlJ0ZuzL3t2Bq0ORirTxxVPFUb
i7EV5ISoizxSD1dEn1Z9W+UgykU0xpexvq5rJr7NVe1wY5TVjMVrDAzlmRnr
iY1hjD3j/8qRkyunzUUfauVTbTH6/Ov7f3EzsTeuaYe7o6xjrGDjnYsNiBE8
N5T4F+Jf+tOJV2rDVf+dvR7b7tKNYCPawI3XaowcY+XImZE7Y8waY9fI6ZHb
Y7wB79f54LwwHoO6mjrbl31M/aV63mmxdvkF2j71EdVX9PZuvu0qZ1G8T39l
5UV9CMUD5QDZ3331cIMmKxOr9bEi8WK1vxsrTI6ZXDPxe7EhdW1ticZf81sO
8qne6NvQtKUZf2qJMjq6tg9tgOru4una0uxzyTLrrWvFA0W+l2j8afsXg7pn
KN+o9Vu1xuj0+2M39WUOn6nYghwzuWba8I3/YLwpY3M+UiSet+/fy/XYFPW9
kH8ml1ROvNx45/sv/TV6MdKntmObUDdwfqxWJh7Zf99aJv1/cdR8gQ==
          "]], Polygon3DBox[CompressedData["
1:eJwl13eUV9UVBeAnbWaYGQYRWSgCgREIiDSpg/TmgIBUkc7QQpEWFQwqagjo
shFADIIoC3QMSjEYQLMoS0URpEQlFAGFRDEBTUIwUlTynbw/zvze2Xfvfc59
77777tQomtp3SokkSTaI0mJzdpIMyUiSMVlJ0s/AiZwkGZ6XJF3ky8smyfVI
S8slyQJ4W/x2uN2MjcA5DP+D8Y/x6oge8p+Mj7wqSX70myXKiqto/+T38zI4
PErIK4i6eIsyk+Q8v0u5etLLnXg7eM3l+yG/12FtYUPwjuA/TrdCdOHTCV5I
O0ovo+hzSyZJftSFtZYPE1mwirB/0P9M/ga/QdEjTjfzPciruzq11bwZtohv
oXw7/CmaOrAreH1oi7LTe1QR9xpxv7qNRFd+J8ztvP5eoUvoL9Ll4o+Gl8PZ
Tr8CVsDzTKkkeQxnnfHO6EdxXuXxtbwD7h7XH4kpxnrCbon5ycuI52D5arwL
XxjPMHh8n+Pfleck/b2nRk39dZF/Az9lfC6smv5K0e6KvqIGbDb+ZdinuMXu
+V66G0QneUfac8Zr0DfE7aWPErCX1B1Lfw98DGwsvwF4b+J8FusDloNXjDde
PhNvLKyT+LP8Y3Gvsf50F9Re6roINh1vNM4mtXvqZa0+NsNbwnbjFej/oDwb
fi9sG/0TsZ5gE+LZqbkVNjyeh5htbKL8evg615Ng9+ONpy2AZbpukJWum1g/
89Q95dnM478U/nb4qdtA3b20l2DTaJ/Eu4z3DN5q2C68VvAtOOtgvfS+GWdP
6GkL3Zc1eLvlzfHuzkjXZKzNobBJuNPp8vX6orVQC+c1WEs+q+HrcM8aG4mb
Q1NdnvBrKm+GO0GeJzKNDYaNENmub4ie1W4o/0Csoqkl8snflz9A241/dd6L
1a0hX2S+NdV9EX4b7kjYMOOFnu8aXp/y7BLrEXYfzbV+83BnweqLVsb3wxuo
ccjYf8zjb/xO4ZSgb8l/EHwGTkW/GfBf0g3OTt/HsvIscQ/sQVEYfYhX+c3A
eQjWR17D9VIe+fKV8YzUWAXvruci2AJ1y8AWw9bDDphvZ7wsPVytx7X8ukQu
8mNfgZ/GO4e3m/c4nL/A5uupNGx9drp3xR623ti3MQd1SsZe4HoafKDfOfz2
8utL21n0xZkjBuD1j154zMT7juc36j2JcyN+Dl1P2GX1jvOaCl8NG5KbPtd4
vl/AKsiPBhdvrXyFGMB/iflWjL1ajWW4n6nRFW8y7//i9IaPwtkf74K6tUU9
veyT74AX0W7CeZe2Db/v6De6Poh3lscLvO6O9zfupWhH2xxnvijWb22/U+kf
xlnFrz6/lfKXeXxlbAr8ON0x0ZW2NawjXhWc+nEfYB3kfYPLr4LfxNh0ujGx
X4mqeminl2p++8NfyEzvQdyLEcbP0B9W93O6i+o2wZuJV05+WN6atr/5Vo17
iHcS/iu1f4EzC/cd4z34tRV9YGtocmC/jz1LT5+IDWp0oC2m3QBvgVdatDeW
6KE1v8n8J8QziX0X53R8q2ADYa/w3izu0vP47HTvjT14L2y7GJyXrrdYd4fk
u8QQ2GSxn19WfL/UypJniM6uS8Dax94Ue0l8a1yviH1cn0/x7wX/gd9J3Jn8
1sGej++K3prirjTH0bB9sDf1WgleEq8AthjWSN4I7xm8IbBnYY1hc4RtMLlJ
3lPdWjS1xQnYAtg+92qRHnbq5WpRt1yKx/hDtDfi3k73MqxurEX9tVVnarwH
8Q2lPUOXjVeItxyvSuxdeM3jueHtzU7f5Xinf4j56K85bSW6TXRLeRyQv4RX
E28PbSvaSbR5Yp/x47F/wcbFtzfWDGwrLFfcB9tI+yDtZdqiWKt0w0VZ72Vl
Nc+pU08+EXez8d/Rlefxa163xvPAeQznOs/g33jtYDthC2G1YBdhj6txSI3Z
8Grw7jg9RPU4t2SmY8G5kJtqfgt7D7ctTnl1Poh1pr+74l7I68GbwT6MNeu5
TaRbQl/R+DZYk/h2w76H/TEjPYPEWeSCfJv7NUz/T8RZBe88Xl1+TfDewWsh
SspvEi3iHFEm/c5NyU3PZ3FOGxrvpeiH8za/gfzecF+24hfAZodWfkzsMpZF
e552mrm9T/dWvCMxf/Ew/8qxx8a9jZ7jXEPzJW0pvNtwKsOfp20Du6zGLbyq
wh+grUQ7iXYxThWxHO803RW8ZnhN8EbEms9Iz09LcA7A25vHMdi1sU/gPM3n
dX4/9zsL9iisJe6jeDX4zYA9kpeeFePMeBb3afiOeAdFXmb6bsU71lu+BW+x
vm6GH/UizTWvHrwn0pX3+328C/w+CozuJN6zfK+Jb1ncL9f5OLfC78AbGmf5
OO/wbqWnKjnp+THOkf3od4v2sa5oL9EeVmcs7RK8v+ake1LsTcXiTrx/5aZr
dr58W+yfsKl4m3h3hDWO7wpsHqyFGm1wOutnGKwjLCPWQNn0uVyXm5734tw3
EO+A6BjPB68RrEDegXYo7IT7sMPzPUT7T3gdnDvof+LztZ5/w3dLfPNxO2Sk
84j5dI9nm5N+r3byKo53Is5UsG9hk+leg/0ddlFUhs2Odwv3K9rGcdaJs5UY
zm8h7C28uaAraozDWwBbBmuKMy/j/1t+Ut+f3vAfab7Em8NzY6wfUdr1F+Zx
xHzOmtcyvBl8PomzLewIrGH8v5WRfvfj+387zpr4lsD6ZKbniThXnBFjjG+F
rReD6P4Hx62+hA==
          "]], 
         Polygon3DBox[{{3000, 1884, 2010, 3910, 2915, 2916}, {2994, 1881, 
          2003, 3908, 2907, 2908}, {3885, 1852, 1747, 1746, 1949, 3037}, {
          3892, 1892, 1802, 1801, 2033, 3113}}]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl00tIVGEYxvHXMku7CUpEkeUmL6nQRSqwoqA2BYEtIl2EbdKgJIjosqmV
UWhEoRAJQSVJGl20ctH9ousypzQzKZGIytaB9TsIM/O8///3fHMO35zJ31df
eSgtIj56P8iISOZ7stFQPDsiG0+kR9zFG/lSbimXOSOij1uJy/BquUF2zIn4
y1fp7sC79Hq43GkRNVw114tL8QFzv3mbeY/9x/EV/b34hG4dd4br5o5yB3EL
rpdtsnBuRDvfrNuN/+m9wK34Fd5sfQg/wu9wlxzEBTNdFy/Gw/imLOTec0vM
I1wRHsDFMiVzMyNG+XbrH3C+XMB95W5lTJ3fQjyGB82LzOPmFfYP4eU633Gn
LOE+Jfdv/sGV4mFcJj/LPHt/8reTe8El8je+I7/gZdb/4B48mpyPnMAXnctb
nINT+Lp8iSedyxN80noXPixvyCzn08if02vGqXmuoXuEO801cN/8PtW41p5j
eIt5t7nOvF+3COfMt65fxVVy2dwmne24XFbIJt8z4rnYmTxD+Lxrpeu+4bZy
eVytTid+iH1l3JcduE+qxy/PYTuuwG49xnEb7sW2xmvpcrF2VsQ1fj3Owg0+
xnSvcus4xxdrdFrxc2yMy+ZnZj9BDOu24En7yjmvGOAucU+B247HMj15Pmy+
wK/C0/Epe/otNCX/Dc5RRIHO2bSp/9d/ZN9xUQ==
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzMdNQwEQhOF9NhIHgt0CR4JED4QrQhwBE57ju0ANBIcCyLEIcoYKMK6I
7x1G/87M7k6kuys7SURUaGok4m4sYn884h5XRyNSTEoRs8MRe/IH/pHWdVXs
647crfG/eMAf4zT1aUOelCNqdk/4Cv9kPvTrOaf9TVndXDCf5j90L3zJXSab
N5/J53CJb9O2m3PZFv7xr7qOuzdMZQ0syiep4E9b9y77oJq+iQPdhR/V/Ad2
+EucoQE15EW3LbtXfJ3/NPf8+sKu/aYsMw+Zr+10dd982d0PLtKNfAGX7fQo
c3Mra+E/S9UyOg==
       "]], Line3DBox[CompressedData["
1:eJwVzjdOAwEUhOGHhL1IJl2BFmRowOIEUCKoqSixvWuTwwkcCEcgY65BzkEY
zsNHMZo3/8yGkaVsIe2JiEUqFiKuByJuqNwfscxHhyJ6h93yt76URIzzLlWx
nK5sdyRX5Ft3czDijqfypL7iznnPsU1Ddy8/UAOb4Sd4ZjsnN6nuPsVq/9+U
H23annviK1iV5/EzmxY+5RvP2Aut6VM+ps/jq/KP3bT/nuC/tIEluszuXF6X
X9373vXGN+WSvuZOvOfCZk/3Ln9QC5vll/iW7bzcph13B9vmXfnT5tBzX3wX
q/M+/MrmAP8DM6o0Aw==
       "]], Line3DBox[CompressedData["
1:eJwVzLcyAwAYB/DP6KK/gZ07LFhNrLGKwRh33Okl4XSOxEV0nkAZlCfRorfX
YPAz/O9fv6++bzA5UBYRKWhORJSgoTriAproR8hWRAxVRlzKeiDD3/BPumJV
REd5RAEPy2Z0t3iLf9Z30j9uTuhZXZLOwTx9KpvDdza1NREv/K67EX4bj+IF
fdq+Vb8je7VZko3pxmGRvte/yRvxFbTQ77Cim7C5lqVg+X/Lf+gO/OqVtfm7
R0/KV/UPeJ//tOmif23O6DVdN52HDfpcto5LNnV+fPHH7qb4QzyNc/p++3b9
kezbZlOW0WUhT/8BUO06pA==
       "]], Line3DBox[CompressedData["
1:eJwV0EkuQwEcx/G/lUVNCQ7gAkhwAUuxspagB+AG1FisCAkxVFppVSWszPcw
Dwvz1DP4vMU3v/9veC8vry09NjBaExGD6EpFvGC5LmK8PuK4MWIIS/wN/6rb
aYiYcG/TE90wVvS3spzszabP3S4/xaoug3X01kas0Tt9c1PEu+2uZzJ8nk7S
Df09LfAtNh82W7Ip2TQ23dfe+yk/RDfO+a/k23QzNmf8CHL8A/+t2/O+WXeR
XujSyOsfZSXZj02/u0N+iYJuESV08lcoup9sWn3Xr/2B5+b4fZqlZf0zrfB/
+go/zy8km+QfekdVfoQe/AOIpD8U
       "]], Line3DBox[CompressedData["
1:eJwVzrdKw3EUxfEbF0mxTJbRlzDF9gDi4uzkrPFdBAVRQTCgYAyKQRfLc8TJ
ltgGS+z943D4nnvuub//v29yZryYiIgJGklHtGQiEnTUETFsDn6DfvlD2W1b
xBB/gz9Ybo/o7YzI2+3x1/IMf4W75hy/RGve+NYfpGNzyTyms4oDsqKsxztf
/Lq7T6zipU7arpaM2DF/yFfcvGPDrttNgX+jVzrQzeMLLes9476srpvjL/AJ
S97abiU8l6V0znDLnOUXacF9UzdLNfO8eVRnDvtl07Iu33/8/yd3D1jBU52k
3RQV7Ddl93az7u7wxL7M/wEEQz3V
       "]], Line3DBox[CompressedData["
1:eJwVzlsuQ2EYheGvdaiedjda7oiBSNA7iqrTjSsDUEzIaRCEUooYhQiJWdTh
2Rdv1r/e9aW7C4fdzlEuIg6wX46oJ6hFNORrJWJavmAxjTjl99xM6lOZt6fy
k6/JXdssd6U3saOvyEs884mbKrb5SvYbfL4UMbCV9QFK6NhPbPO+WdSf7DPY
4r/5x+xdjejLD73NF9yl3hPygR+XfQyLEZv2Ue8x3NuO3b1jRN+wNbgLfRnr
+pI8R4/Pu8mhxf/5ZsKHfibv7L9cT/+Ra266/Jz/PdRv7XWs8l/8jXebv5Zv
+Af6IytO
       "]], Line3DBox[CompressedData["
1:eJwVzscuRGEYh/HXShtlx5hDgoiwYMVmrF3AxETIrMSapXtQBzei9xswaiJ6
b8Fd+M3iyfv9W85pn5jOTVVERAFjtRFN9RElNOMqFTFbF5FuiBhujFiTH/MT
tOJGPif/ka/Lruk0lugNuoAMfYcq+3ndTd4t3Wl/ilRNxD29IGux25Kf8LvR
YTPDG5Ft8x/08nQRT947vEf3l+7RP0cvnnmLNhn+eGXEGa8P/Xgt/5/sT7Zr
/0InWKb36Em00e+o9v2i7j7vjR6wv8QgVvQ/yjt54n2gc8HPostuyM3LDvmf
eqM6q/j2PuJ9uf8haTbg
       "]], Line3DBox[CompressedData["
1:eJwV0MkuQ3EYxuHPyqKmjaqK4VAiQWJKDOtiXyJiVtFasTAE12O4EjWPsbEm
7oJ4uvjl/d4hJ/+cpLhf2KuJiFXspiLe6yLm6yP+GiMWUZZNNURk3NP0TT9J
bzGBkn6MjuNVd2b3g1F+RzfnvkK7bpufdV/ihR+xGUZRfirLNUW00CHZs36Q
3mAAWzYnuh6bfv5J/1kbsSl/dBe8+Ve/gA1Zr03a3Ucf9Mfub1T4HNZtEtqN
e/2R7gtd/Jpuxn2BrG6Fz7vPccd32nRgWX4oS7ypmbZV/4s+S6/RiiWbg+p3
bdJ8RZ/BB/4B2hgslg==
       "]], Line3DBox[CompressedData["
1:eJwNzUkyg1EYheHPSJUk2ABJ7IC5JPpoRgaagSplhir2QjqL0UWTsd4KNAnR
M/UM3rr3vOfc/8+ubc9vdUTECtYTEcPdETk8JiN2UhGDPRFdvREPcholed9u
Axn5GQn9ru0B9yTnvb9EAU05py/p+7w9tLngRzCKMregO+JbtktyBa/ux9yL
symP2V5jHG2u7E0/X7e54vL+MeGcxLu+oh/SJ/k3OYvVzohN+wH3T6R0VbsT
7kOe8vYWRXzJBX1Nn/adU5sbfhozqHKLujP+23ZZruHX/Zz7cbbkWdt7zOGP
2/Mmwzds7rh/DvM5mQ==
       "]], Line3DBox[CompressedData["
1:eJwVzrdRg2EQhOETggFJIGiBwQivABqgAJwiYSIgBBERUQnCCtcHJsBUgLch
BWAG8/zBO7u3d9/O1z6/UqqkImIOy7mIjuaI4daIYyyZO82fqLZEnMgW8GEe
y0d00Vuab4vYsL/mN+mXfJy/QTdflv15d67v2zzDr+OXv5D90InkVk+Bf+C3
vLmj28lbWTEbcW/u4VOyHewi8K6rVz5CT1HR2WdO29VwJltEHT+po9/uma5m
Ih7pnrweU/wTBuynk27/udTVwM96X0UTfyVrpCW3BTeD7t/4fdkLPaAZrLkf
tX+VDbnJyQ5xhCz+AfbCMyQ=
       "]], Line3DBox[CompressedData["
1:eJwVzskuA2AUhuFjw0KnhCAakgqCjaFaw2WYNV1JDKuWq0LN7sE83AWCaIOt
RR+LN99wTs7/5zaqC5WWiCij2h4xnohIJiP2cZWO2ESCX0xFTJi90QP5hV6b
bSEtL8mvmLRTkgv6G2T4P10n/ZIfvdHBL9sdyURMmX3yh7p3WqNdWOE/MGon
b6dHd4RjdKPu1rT+yb1d3MkFOWt2glt5G738qjtFswY9/f8HvTfbQZ+8Jtcx
Y6csF/UP6OdbMYBKW0SOrtsb86dZu7/8me6bntNBlPgfzJkPyxe4xBAabs7r
n/13D01EfjGP
       "]], Line3DBox[CompressedData["
1:eJwVzsdKg2EUhOHjTkiMBVwIgsYICuoV2JNYYgW38bfEsjRg796O3ovlNly4
iGA3Cx8Xw3tmzpyPL1upruw1RERCF6mI5XTEEj01R5zzi+a+pogFfJTtZiLO
5Ds4L3vDdGNEHbepV2cLf6lkvqOc+zndU3evfDefUBedyG5kQy36OjV3s/iD
FcrZXVPR/pufset0N42b/KD82BtTfJEedI/4grlDL4/3sg3dQ/k6TspecAIL
7r/Ma9Sjl+Dn/x/Mt9TujXG9A7c1vo0vUyvty65kA94Y03l2N4ofuEpZu0vK
27/zI3YZd8NY5vvNfx4MLew=
       "]], 
      Line3DBox[{1700, 1204, 3378, 1203, 4145, 2949, 3157, 2075, 2948, 3156, 
       3377, 4144, 1202, 2947, 1200, 2798, 1533, 1199, 1698, 1197, 4011, 3376,
        3155, 2946, 4087, 3375, 3423, 3374, 2945, 4085, 1195, 1527, 1194, 
       2852, 1696, 1192, 3373, 1191, 4143, 2944, 3154, 2069, 2943, 3153, 3372,
        4142, 1190, 2942, 1188, 2792, 1521, 1187, 1694, 1185, 4010, 3371, 
       3152, 2941, 4083, 3370, 3422, 3369, 2940, 4082, 1183, 1515, 1182, 
       1535}], Line3DBox[CompressedData["
1:eJwVzscyg2EYhuHXVj8FC2UtOiG2wsZCGRtstEiUqFHCQokWnIZ2cCaDGeWy
uOf5nvK/8zfN58azVRExg8eaiOP6iLaGiCJN1UUc0eAL1REP+gP+EEO6Av3Q
7dN73XRtxBs/hjI/Sl8xaLtns4s7+Q5t/f/OzaRum//FFm71p7pEY0SeH9BP
uXsj/5L383PoQ4W/lm/YtXhv0l75Ov1B3v0rfc57DT26E7t3ZPmSbtLtFz6N
S36EPqPbdtUmgwv5Mm2Wr9An2qVf8v7GIs5tivJ2/73Ad+on3D6Tf8o7+Fkk
MIw/U4AwEQ==
       "]], Line3DBox[CompressedData["
1:eJwVzUkyg2EUheGrNEHy509kphnYBtG3mUSVuYkFsCJ2oAtRQlFJWQalLEDf
k4kng1PnnPfe+33jm9vrW10RsUGNXMRDwvMR3fIB7+GP2E0aMZuN2NOr+j6/
xeaw3s4u7egTdO7uyU4iP/MLvc+8xicLhL/g825feVkfxg/tZGgBb2Ui+uVF
ecTszd6AfkSDdOmtdyx1u2T+IV9hWbM6z/FP7K4z90ZNX9OP+T22jCXyCe3q
U9R092WnKH/zlp43P+Nlf0zjP/iK218+o4/idTspreJNrCAXqaKPmf/ZHdJP
qUTX3mtjJbv/dh8zfQ==
       "]]}, 
     {GrayLevel[0.2], Line3DBox[CompressedData["
1:eJwVzb8rhAEYB/DnJF5ncBmuLHLrmcjkLYNRDLzGW5wynOIPQClKiT9AFgbh
SsnuZh0pstgoInXTjTfwMXz7/nie7/OUqusLa7mIqMBtT8R2b8RoEjHWF5Er
RIzjhvwUH5jt5yMm/zWeME/p6I+4wYeyIzvz+inuDEQ86Wb8CkzLXvlnu8dm
1/y5zix/iedw3q0PXOdT9xt29nQz2SL86J/oNuUZtPkz/oWu21uyk+hVccds
yJ03sztckzXxlPkqXfSrzN9Dy86D/jL+dS/Bj/w71OiWrIBn7F7Q3fJPetOd
L7yFR9yr0N8waN4l24FdKOle6Q3LN+gy/AF+czLf
       "]], Line3DBox[CompressedData["
1:eJwVzjsvw2EYxuFHpHVMSNqpBodEYihfwFhbTU1sLBYm3W3KQKQWDB1bJBIi
4QP4C5MgkTisaMNiltTmMtz53c/9HN53dLFcWumIiHlK0hG7PRFrXRH57ogK
VnojNgYi9uSTsgauy6p627iDW/oH8nEqmCnRDFXlc3hoZgkzgxFHfN3ejdll
2RM21OfyY7zAZ9mq3ifm7CSyTfUVfvtj3d07/p5q8pa6z+6L+kT9itfqfjpV
5/7fow/5LTZx384Qn/fGpZkHSqgmf8S2mSZOeP+XfzM7TS1ZEd8pxRf0v/g0
P4s/uIBT8gzf6X4Wx9w4c3uYH6Gs/A/llzXR
       "]], Line3DBox[CompressedData["
1:eJwNzr0vw1EUh/EjadAa6CARaujEQH+DwcbkHzA0EUm9bBYWL4vVYKpRJEwk
FoPErwaRdGLqIITESrwNFoNIWnyGJ8/9nnPPube4uDK93BYRs6i3R5Q6I4rZ
iIS3uiPGuNoRMcVH6rdqh1zNRZxxpisi5bL+eE/EufOuXo1n1K74GkvOD2aP
7Xr0TsqXco039V7cGTD/ytvyO78htavJee+0eE/vjy/Uf3kYLXv21U9wgB35
lJ/srvOgux9qBW5gBP32jfKNfsL3KOFOnuBJPDt/mmvak0dWbsg5/kbFncSf
5zjjHws8jy+sYsgba9yrt8E/WEef/A8uJja9
       "]], Line3DBox[CompressedData["
1:eJwVzr8rxWEUx/Fzl+v+KL+Wbxnc/CiLhDKbpLtQ12IwXcUi/gAzizATZSKu
wWBwR2JQFoQwGAkRw93Ey/Du/ZxznvN5nrbyXGk2FRETOE5HLNRF9Gci1rMR
lw0Ra7yYi9jmVD5ih4fNK7yiP9AYsedc1DviKsadb+xuyrqSuctVdYVnzG7d
Sezd8bz6kR+wL++V670zZP7mvGT+yYdmH9yFZb0neRu8ii3cyz7gZvdezJr4
DK1I5BX4xLyDLzAov51P9Xq5D9fO73a/ZGXxg3P1Lz+bjbjTbW+Ua+oxLv3/
GWV0emeS0/44zd+YQo86g5qshHNowR/nITYC
       "]], Line3DBox[CompressedData["
1:eJwVzb8rxAEYBvAXhXPfYlG3us5qkcsgbrLSDVxhUa4sd/cXYDujH6tBFik6
gzJYMeoMLqVutMiVUhbF5zs8PT/e93nfic16udYXEevwMBjRHIqYHY6YyUQM
jEUU8aP8Eh+ZHYxELKQaF81LdH824g4fy07trOnP49/RiBfdDb4BHX5R3pV1
7Z/wt/yV3hLfwss4ce8LX/NzftzbOdRflVWgp3+m25avwA9/zr/RN/a27GT0
qvjPrODOu9kTrsvauGTeoHN+TfPP8G2no1/FYZ7gV/4DavR4+s/ehV/ZNKd3
3fjEezjv1jbdg5x5ImvCPkzqtvQK8h16Cv4BxN0zxA==
       "]], Line3DBox[CompressedData["
1:eJwVzr8rxHEcx/H3Gfy4XCynTpcy3HdQyspqZbG4gZTRQPwJFncp5SilWDC6
LMQf4L7KIBYlIgoDKbvy+A6vnu/36/V+vz+fwfmlqcVcRMxS2h6x1xVR64gY
7YyoYy0fsdYTsc8f4x1jnbcl28RtXJc3+QlNmJmhSdrgz2U7Zpax2GtOfWjv
2uwK7xmP9CXZuaypvsAX/qr8F8uyS15D38If/zxw+1Z9l93jv+uLdh/1p/on
bOkb/D4841UwpQ/ZDX7ijjxRD3snNXNPV7TLf8AcfdGQP7Thq9lx+lZP4xt1
ZzNYwCr+4QKO2CmpC273Y+K9E3crWU0D/H+gMDba
       "]], 
      Line3DBox[{1596, 915, 1258, 917, 4112, 2340, 2109, 2123, 2110, 3980, 
       2127, 1953, 2142, 4114, 962, 1311, 986, 1334, 3754, 988, 2164, 1013, 
       4030, 2177, 1978, 1767, 1991, 4032, 1992, 2196, 4065, 1056, 2211, 1058,
        1409, 3784, 1083, 1432, 1085, 4133, 2347, 2232, 2246, 2233, 3992, 
       2250, 2037, 2265, 4135, 1130, 1483, 1154, 1506, 3826, 1156, 2287, 1181,
        4046, 2300, 2062, 1822, 2075, 2076, 2319, 4088, 1224, 2333, 1226, 
       1580}], Line3DBox[CompressedData["
1:eJwVzjsohWEYwPFHh8+tnFPKRMiAUbkkJMVqsCusOAajy2KxH1YbRjbh8K0U
KRkUZZZicFt08vuGf//3ub+dCyszxaqImMVVEjFSF9FVHzHK2/mIcd6tjZjm
Y/kHuSPeaYgoc9IYccFz6sOFiNR7T+2S5+Vu+Bar3o/ZrF0v7pxzKi7zltqn
njbzX1wS//A3Tu0ak89xs1vVvK+ecIoa9Oqr2HUgf4JDlMRn/Gr/Nffoe5Pr
5nv0o9W+AX5Sn3BjyPsZg5nlJnkK794fZnPcYl+e78QFrmBRT5/5JW7ylyIv
4xdr2f/cWed2tU3+wwY6xP/5gjTj
       "]], Line3DBox[CompressedData["
1:eJwVzS8sxAEUB/Bns/tn5oKNdieddsmMwgS/YBcoN7ab3ZVrLt3MBIVMoTLB
VEGhEATFNcVsmGDSTbATjM+F777v++e9N9ForWwMREQNSumILchnI35GGLhA
t+EvE7GWi/jir+IxXgvezdt6XflCPiKhC0MRi3hY3oRN+Z29Z51vOgV1uOV9
4oAa5Ow3da/1xvs/oJdyi1+V39Dr8nN5xjzqTxoX5V29ZZ1D2Zu7e/iDV+Ht
9j17T/xX/MJP+Gd2l+i2fNaNjjnr5gN+1JnTScyX9ho6p3SHP4MveEf4np7C
g/andef1TvAxXMnKsh1/yvSk7AD/0vu4RP8D/tAxHQ==
       "]], Line3DBox[CompressedData["
1:eJwVzyEsxHEYxvH3ir87G6eYwlwxptwEQ3LtFLNLBGanSO4UTJJsNGbEy6og
UBAEykkKt0lm0hGc5vMPz57nfZ/v//3tX6jWKpuZiFihsSRijzq5iMNsRD/V
5dGeiBqfzEeM6Lcpo/vpi/jujhg016ktT2DmsWXqtdugN3kX/4BvYWbMQ25O
80RfpS39vf5J/5Xep1PzKm/RX1fEh3lJXsNe4HK+z1LBm219RXdtXtaf6Ts8
751fPoz5xCxgDnSvbu3wd7ty+k/yAOYZ26QX+zn7Rvov5iv8OuZOTty8TTnM
LKYkX+oX9efmR/spfkQ3clNXlIu4ccwJP6Z9t/8BVqEyVA==
       "]], Line3DBox[CompressedData["
1:eJwVzi8sBGAYBvAXw3HjuCYIJp2moR1JvGvcFGOjsKNohuaCxCkmkEw5gnKK
YiYeG+mManMIRvK78Oz5877P+31D86v5lZaImINMZ0SpK2IX0jCYiPjsjjhP
RRTxcDJiW96gt/AH7rdzZl6gB/SL8C1ryF5wil+GW77O/9CPdiea++6tu/NA
9/ZFrNE1+t1OBrc2u7Kk2RKu6tdlfx0Re+7N0DU4pb9kBTuzULZ3J79049js
V9bjrTy+kOVwBV/bOTJ/41/1p/kN3WfZIn6SZWVX/AJ/Qpf1buy3uTeFD/hJ
vI8PzSv0vd44bvfvMZzVLZlV5TtujdKbMCL/B706NfU=
       "]], Line3DBox[CompressedData["
1:eJwNzT8oxHEcxvEP6s7dqbuUQbf4daPNnyy3MXADRyYpxZlOlEUKm01WBmX1
Z2MxO4PBZiFlQqlTBkoSXsPT+/M8z+fz/SbzK1PLLRExS73piA3qzkR85yMy
WOLXKG1ezEZ8ymtYlK3Sq3lL99UeMVKImOSTXEQVO/V1Wtdfu3ux88tnqUYN
2Tu20Rx1uF+y27CXuO+hn1TEjO7KvKA70xXMXf7IY8nNh51pO4e6Z2/uYlM2
Idsxv7l7lDfxSV6Rn7od5zf195jz3h0+6If1Y+YLN3X9CX8rL+O57ABv+CFM
+b9sd9TeMR7Rpa5P16rb9k+/bFC/j3/8Hg7w/4BDMYY=
       "]], Line3DBox[CompressedData["
1:eJwVzb8rxHEcx/H3lTj3HQiDcpG6wcB0kkVRN7FIbuEGic2PgeEojBaDnZTu
T2AyWBhQFrFRFMVgURJSHt/h1fv1er+en/ene3Z5YikTERXqbYjYoN9cxE5j
RAet8T1JRNUsNkcU9FVKdF9NET/ZiLy8Qt98H6aMnaRWuwV64tfxV/hXzIjc
6eawmejnaVV/rr/Tf8h1NEPP9Fcf8aab5udwR5i29D4V/PepL+tO5Yr+UJ/h
W/wRZhfmHTOO2dU9urVlvtiN2W3y7ZgHb+9T2Zfsa96Oyif4Rcwln3XzwrzF
DGFK/LF+Sn8gX9sPpv/QGX+jK/L9uAHMvrlH227/A51DMak=
       "]], Line3DBox[CompressedData["
1:eJwNzj8ohHEcBvAvdY6TznBlwCAZLVIsDFdnkEmx4AaTxXsLBpPFu1E3+1cG
CzNixEIxe2WkmAi3KPkMT8+f3/d53rdvsTadNEXEHAzmI7bbIragB/pbIxqF
iHUYaI9IZT/0Jv7GXd6PixFLdK/uCvzKPmXvuMQvwx3/xgc8uS1Dt701Oxm9
ih/xl9shnMOJrKNTH9/ovcj+WiLqtubpDI7ohqzqZgEO3T3Iz200Q9E3ZuVn
9Aw+xVfe9/U++FfdKX5DL5PV8LOsIrvkE/6E3tO7dZ+zN4F3+Qoe9X879IGb
C/5edxzn5WN4Ur/u7Vqe2humUxiR/wPOODSf
       "]], Line3DBox[CompressedData["
1:eJwVzT0sg2EUxfFr0JaEEnSw9R0kWNhZDDaLSCwmo6GSmoyiU3cN7WJiY6ix
HQibj0QiurBgraVTm4jfO5z87zn3PPcp7u5vloYiYocKIxEHoxF9SnIRU3wR
y3wvHzHMF/gZms1G5LBHj3ZZ3ND7wVUc2M9PRHym98wdXKFX+0V8p1/5nM6L
rGu+xZpb19imK1rwZ6Izrt9JO+lbbOMYfes39AZ6Lf7Z7pR/wr7sw77K36Vv
6SsTcYOHspZd0/ymt8c/4CU/7b9zty7MdbyXb9s38YxvyCd1tmR18zpW3VrG
NVqiRDevU8OKzpF3x1jBE9kf/gPUjjc6
       "]]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
zeet17+Y7VltUcz2XDm703eyp2XlbLank/KFMLpe74wEtqf/hMlsz4KPj9ie
/bQb13tfYb13EtZ7u5QDduQXRkU6+hA6BA4yIv8AHQ9dDz0P3QkdCv0JnQTd
BL2EuI44j/iOOIS4hHjUlP/EOse6x3oHL8FT8BN2hF1hT1NbGT5v4LqDPdie
94+1riN7qjiZy9P1do9ey/bs3L6oO9kR+E7vNK/3LZmN8eirEI+qkxvjUaua
BfZkx3fXRvoR9l/acQbnUzZBdyjOOcY77iM8qFgpT/EOeRHyJORH0PHQ9dDz
0J3QodCf0EnQTdBLTcV3xCHEJcQj+E34UfhPrHOse6x38BI8BT9hR9gV9izT
U1MiOwKPHqpIp99tZtOol/YLeun5q0a9tMW39x6yY5V/S1fCzrt7MT/tT7rF
kR2bV+V6Etr71rM9t5io3qLzC2t3gPVbtIHqbNJvyDORdyLfRF6EPAn5EXQ8
dD30fFP6EzoJugl6CXEdcR7xHXEIcQnxCH4TfhT+E+sc6x7rvSl+wo6wK+x5
VSN2H9kR6OTUmu35O60olOyY9ajhNOGccdVsz1LJipt0fidUdVgXF9fozyJ7
Go87Npnjk93baYTprW8Y8/kLeTvyeOTvyDORdyLfbCo/go6Hroeeh+6EDoX+
hE6CboJeasqeiEOIS4hH8Jvwo/CfWOdY91jv4CV4Cn7CjrAr7Fm36OcNOj/g
KLuGmWTPioFhk+j8WhVnTyc80CWC7Tk51Hcg5dVeNUrTCRsSDldTfo06COoi
qIc0lb8jz0TeiXwTeRHyJORH0PHQ9dDz0J3QodCf0EnQTdBLiOuI84jviEOI
S4hH8Jvwo/Cf/6xzYd1jvYOX4Cn4CTvCrrBnyrHdo8mOwIzXNWzPd5I/n6lO
pNtJ5iOhvNvRw67/pb6EOgjqIqiHIG9HHo/8HXkm8k7km8iLkCchP4KOh66H
nofuhA6F/oROgm6CXkJcR5xHfEccQlxCPILfhB+F/8Q6x7rHegcvwVPwE3aE
XWHPLbMa7Qi0+9toz2LPgDvUD/hXxeAC9R/vNz2Zxp31fG8GYVRtJNfrct18
eH7/ukzm+pJHmdkkzoO2RTEPYnae4+uwd9WZQ+c/xnvgDLrOoGF17QldrnXh
esjpUEXmm8eDFmcIdaMXc74Zp7SW9WUvF+0/pDetG/qyzrQ0DRhE8+I46ZYt
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
TDx4EFPFfBg66Bb7Qxzj/9GuXmk9ks47Z6RYm7D1oRD2Y0XzG+vFwINljXXj
TXG1z+l6S2QMnrAdGkzViA9z/z7LoGN735XMl7+WeQOpfYDbNeaD/4nIRYQD
OqgwH6JPnfGg4+WxS6wItXTl4qn96KlA5km13HrmSdens5gPgWdry+i46GlD
OWGV5Sj2V3OWtL9CPMjpO+0CoVHfscyH12OnRtCxzOvjQf87TxZX13clHrRQ
eaBB2L6F1x/Of2c/U6DjQcs7DyCcmdajltoddnVnv2FVLWK/UZS+gHlyX9if
AD4U9inOf3RtoOt/LneF8Z1L/hPqj2P8P9ozrQ9dJB7s9Z2bQKjkNoz5MN3f
J4yOK75E3iH8OcC5JbX/yTp6m65HySkwnvD9r0FWnEf8SZDQsbOO+g1C1zda
a6gdcRRxFfEUcRdxGPEXfgR+Bf4Efgd+CP5n+uZY5k36s1mMRsskG+i64F/g
b/7xM4P/PKLrX732LPNHf9w4DeIJjvH/aLcc1tWF+NH9iI0NYYpZ3Q2yg8wd
6+10/MZ8kD3HydBJzJ9uGgu/Ez/26Q74Rji9x/RQ4klpudEnOlZ+qM3tys9W
R1D7Ep/uzJ+9V52ZJ2bPn9vy/s6U5+xnni13ukhoEXKS27PkdFoTPz6k2fQk
7LNN9S/ZwaksuiUdh6fGKBN6BDlw++627di/GNU6MY/kFtWkkX0chP1X4Bph
H7aX73nmx3t9G8Z2eg3Mk4lH/Pm4dLcJ4w6PgenUrnpxxjXih3/Iu7uE3Wel
ypEd0qLUE+k4sVD/EWEX+z8tqP3Z2D236Ho+5H2+Rni027S1dF25j4Yk0bHl
96xoQp3SkHXUDv0EPQUdBb0F/QXdBX0GvQadVt86kuORk9/O0YRjM08zT6Cr
oLOgr+BH4FfgT+B34Ifgf8AD8AJ8AG/AI/DHw0SZ/Uzw+s0/mCe7PjFPcIz/
R/va1pMukV3+nurAfqXCafEWjkfJ2dxufa+a9Y6zxzNuH6Hvxnx4NWNWZ8Ih
mfeZD6dmf+H2wWUj2hDa/R5dR+1HV3VmnmhubGCeNOvuzDyZLuwrA+/h/vDH
ThyH4rpa89/189djnpwyuchxaESELuPj7OWPqf1axxPJxIPyXjkvCWdNVGc+
fLWez/7lTY973F51sR23T6mPYJ7MUpjNPBlitZ55Mv9dOvNkim8482TDoX3M
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
CHkQdAl0CvQJdAx0DfQM4g3iD+IO4hPiFeIU/AX8B/wG/Av8DfzMu89XexAP
3ueOVuH9t/onX4kPOMb/o115dH8ffenvvS9r50SY2X3/StqPW/JuwB46ztsc
4sDoHmxB7dj/w34g9gGxX4j9Q+wbYn8R+43YZ8R+D/Z/sO+D/SHsF2GfCHV8
1PVRz0fdH/sAqP+jvoZ6G+psqMehPoe6HOomqKOgfoI6C+ouqLdcjrjbWIc9
05/9SlrLb5wvI39GPo08GnkO8h7kO//kRUKehPwI+hV6FjoWehf6F7oXugQ6
BfoEOuYfXSPoGfgL+A/4DfgX+Bv4GfDgH14IfABvwCPwRzNkSBBff2rGBcIx
M+5sJTvgGP+P9v0eA9nPfvbYxvVP5e7XuO6Eeijqo6iL+mubMp+03Y2ZX1si
u7J/g7+D/4PfQ50ddXfU2xEvET8RN7F/g/0c7ONAh0GXQY9hvxD7h9g3hO5H
HgD9j31o7EtjPxr5JPJL5JWwC+wE+zRVr2iqHXwFf8Hbf+qnQj0VdVT4QfhF
+EPU5VGnR30e8RXxFnEW+z3Y/8G+D3QbdBz0G/YXsd+IfUbkCcgbkC9g3xr7
2Ni/Rv6JfBR5KHgDHoE/qGugzoH6xjALoyK6XwHYMnYG3y/07tsgLVonKVYz
+D6HpX8e8f0Psad78v50JyvdFYSzC7aLaN192LGU9wuDOlw7RXjUxI/3iXSX
5nO9TH7dGzHhmBJrrmM8WjuF6+yGA+dwXcQ0/S7XwRZZr+S8Imn1Wc4/JGM2
c36x54fdcIrfjsOd9Qhvb9RmPYnzw/niPEc6dthI59fVcNJawl9X3+nQedqP
6mPPcWiMPO9zLtEN4PN8rdaNz1Nxgo0J6/Caw1zv3Z0tKeHzPOBTT/j23skg
Os+Mw9UhdH55i0q47vJsVIkdnWd5m0V9OU9e3nkM4WofI853NC1TTrOeLD3O
elKjoIzjAs4P54vznH/+2T46P6Bl/jU+z4KZnbfyeW6fvJzwtepHPs8+2vmc
x8pkHPjDdbJne9meV5XHcV3xiMgvmPCX7k8+T+9j0Zzn33kQM4j1uHo15/XW
5tWsY25vG8/50eeZL1jneMldTaa/D7H/zvFqcM8wjkfgAXgBPsC+sDfsrNFw
iffprFtNXUeofcuBz796aRrXv4CdZfvz+f9QTOb6heOP23wd3/QPcf1zpXdt
PZ2fi38w17fUtIu4fqWo/CqO2nv7L7lPODjKmXW7c8Qq1mFb/wZyHSljdUvW
Y+Ar+Ave4vxwvjhPu6l2rMeARaN7MB/62/bnuluF3jyuz11d/JbP89pCoxo6
j8LC+23pPHft+cZ12jsREyTUHrXtC+ejUWfGcN7R6Y0X60KT7X9ZPxq6D+Xz
/NyhkOO62vATbJ+TOgc4voMH4AX40JQ9139/yusLqHttN59nx/7qvK+gUWwi
x/uZnR34PHt4mKfT+X25PKiAMCY6iuswEvvlnA//GDiP9y9ic79xvrw4sOQN
/V6KvdkHwrDD16Lod20HKhfT+W0J3cr57vHR1qw3sN6w/rDuwGPwGnyGfWFv
2BnnjevA+Te1f+F57CDr8ImGNY37WR4zuX7Y3z7xPf1ezvP5nLf9/KzMevuU
8sds5sORW6yn3qnF8PnDr8HPwb/BX8B/wG+Ax+A1+Ax+gC/gSVP187I+k/n8
E2+0ZZ6MUF/G569lEcT15fGidK5vuayI4Hxz60VNzhsLn4s4j/RdNInzR/hf
+GP4YfgL+A/4Daw3rD+su6bqdTg/nC/OM6Pej38vSeFOAeGepJGR9LsuE2be
pfMb3OHRKcLM9724HrL9dNFv0oWqEhNdWqd28804v4D/hT+GH4Zfg5+DfwOP
wWvwGTwAL8AHnB/OF+f57MfkGDo/oFdGLNuztNxejs5vxYVLnB+vE8/i8zyx
d0ljPiPZsJPwfHz+UPKTiHOIe4h3iB+IJ4gj8Bf/+A/Bb2AdYl1iPYIH4AX4
APvC3rDz7e0K3em8x6+43p8w9/u9xnwtU8GJzvveFwfO18zjJg2j80c8RnxG
XIb/hT+GH4Zfg5+Df8N6w/rDugNfwV/wFueH88V55ndL5XwBqLOvE+ePKf2z
urLub3t3EGH2WqsvpBMQ5xD3EO8QJxA3EC/g1+Dn4N/gF+An4B/AA/ACfIAd
YVfY82jAxp50fsC0qkzOZwe8VXGlPESvo9iOUHWpN+cp0BPQF9AViNOI24jX
iB+IJ4gj8Mvw0/DPWG9Yf1h34DF4DT7DvrA37IzzxnXg/M1Np9yl+93V0mX4
+XTfUjE/n45j/D/az22xKiWdapIU957wyF1z1qvTXdSS6H56q1mZzwnnC++f
fLnt0z06bqa++Amhe44zt2s+qmXdmPmjG2Nd8/XZdJ7txkfyfZhK1ovNCStV
CljPLB70aibd9196YQG/r27Xy2p+nrer4wxtOp7ed7Aiv7dyWCU/32rrVbaO
7FaUrXCB0MdsCeuKq5XLHOm5gk1T7wfx+8N6NZ9E9s/5auRPx28ffD9FeC5m
Fj8HWn/ah5/rM797kd/PNHiXAT/f5zVPj9sdc5/x838jPtfzc5F3VS/wfmHX
Q3vHc74fOoPj0f6vbfk5yZB7+tsIy9rk8HuHxoTGavF7uLRfWRNu3veA2+sL
c7me8G7+LY5j3qda8L7k8VYt2E95H3Dmeq1+58/sr543HD5Iz2tUravZSDgz
ZQ6/n2SrUTm/pyh0ULgt4bkXsfx8UF7EOt4vSD911YCwR5dYrsv56qTzczKD
VpxdTjhZ/Re/f8N9f0d+v4l37SVGm5tD+Tka8AC8AB8w35h/zDv4Ab6AJ0lz
isYQD4DT1K5yHtFBe+wW4sGUnVuXEaqf+cH3uT1uZqRF8917vJIy4bkb2Tzv
KQuaiehYPcxPgzA7VIN5YtsQxXyoezDhKOHuZV34viarBxb8vkhjldf8PPiz
TgE87xtcavi56E/Jf/n5YLeoCn6/XKxFDj8H+2q2Fj8XK+N9led9wSZDfq7n
3avn/J65H+us+f1yfpUujfcrZFpP5fsodVoyH/beT+bnQuMbUqwI/UIv8XOR
Lye94PYVxQNWE8p63uH2B9dlmA+T+6qzLht8+gbvM4asGRxOPJC92cBxzGOs
IvMh9IyEn5d0OL5wOz8n+GIoz/v6a7Zn+XlSB3lXwu1FZfz8YP/V1bz/eGb9
Gm3CIBm5xnhnNZbfb9N7rTxjcFE5z3t97wx+3vC7vjW/T0jNajI/XxY+aD0/
T7Xnyhgxof+Fk/w8kZ/SSG7PPxPD72tJuVPFz1th/cMfwA/08znJfgDYSf1j
4337Fc8H0bxuHhrB7wHdqfGa5x3H+H+0HzAa5EjzbRve4E6o9ech+wF59Qn8
/pC4lvf4OXjDoYGN7wfec4X9wM3zxscIty27wO0uaWv5fYybQ8+3JFzi/J39
gO5MbX4/Y2FyM/5/224v+Xn5othbfD9TXZ/ShYSVSwewrpbt34X9QFzyA3N+
bnRLG35ueoiNH7e3rZk7nzB23onG9xBGr2H9XTdX+y/j0L6sD72GX2H9Olf1
EuuvgIljeH856NCZAJpXrc2j3QhnD47i+S33fxxOx3ctFnny+xOuPuDnZ+UH
OvK+cqfSwqGEx+Y4sE5ro/nClOZp08nLvN7vDFeVo/HXy3jy++LCvH35ucKa
G478fOW3Txk8vyl/mvFzddufXeL5nblFg5+3HB6gx+11v8r4ecO2LSzOU7w8
EeB/g7Dlsq0cN3+2V1Wk580e3O77m87zeGIpv2embbZSO2pf/WBLBbUnPjvP
z6PBL8BPwD9g/cMfwA/AX8B/wG+AH+ALeAIegBfgA3gDHoE/F0+u4/cFfFv3
i/mQ3Vf5FV1vmGlk4/s1enozf1K9TNhv2Ets9xM/WuubrSL8Newi3ydpuNCw
J/MgcsBMwrn+RfyegV8+vtp0vN5/0hRC8eZ85olxxFve9yz5KlNNOMrQOJjz
d0tX3nfP/tPnPGFn+4DN/J4Nl0Oh/Dy4hwu/H6znssvMh+abfPn56mDJ2mOE
N/sX8XsCB02uYh2fb9xNjZ8TGjaJ70+ofZ3Pz5/PfpG9kHD/8UP83PH6oOb8
/G1UlAXzaMjKSm6/9Tqd+SDRjWQ/sGH9Z+ZDXMgAfh7Va6Af86T6sgu3R5o9
uUr8CCqtY524ftxw1oejVke1JD60EyuW0nmaXV7Iz2l20FrdnNqXJRrwc829
l3Tm51ivRhzm+r5Bjzq+X+W20bnGOr+gM6A7oDegJ6AvoCugP6BHoEMQVxBn
EF8QPxBPEEcQbxB/EHfAD/AFPAGfwC/wylLn7ia+71rAcVfHsJ+JmtrAPHnb
d7ge4cxYM+YPjvH/aHcIeMm8adthAOcBFWnz2M+EVRazn/GfP4Tz0GmvL3G+
LPf5YgQ/H7rvB8eTYVMymScR05y5PX6iDr+3wPTuBW6f0+lhC+LN24WWfH/c
1W3vOW8dvC6Kn9sfsXkw88XWypzfY1Bdns/tb43Wc5zpft6Yn+t/ZObE/DDe
tJ/5s/OWKvNE12oV82fyiO/8PsU2q1L5+e5YwwO3iDdrUwY/5P3lfsWcr/1d
UMrvs+oRHZbPuilnLfPk9oUTVXT8rI3je37vYmw7fq/dvukbeB/osfMYzlPz
E17xviH0JfQmdCZ0JHQl9CR0J3Qo9CfiB+IJ4gjiDeIP4g78BfwH/Ab8AvwE
/AP8CPwK/AnmG/OPeW/q/uqm3lsS3j+V33v73rEykTF/Lb//NmJONd/3Ztai
Fd/ntvT6ZK6rPCm1Yr/Rerg9Y3BDHc/7J/NOfDw8PZTf9+i8KoHbI1X9eb5v
DXXl5/ijDXR4fl2M9/J7M4PkOxsTLrvyvD0/F1m6jec7+nsQ10VKXXvwfUrL
Hu/k9xXWLdmfy++BOLaF51exbs8XOv6R6vaCsMtbU34PQOWaOTf5Pq32Qzmf
ayHy5Xm32ebO+8F1r29wPnd3xzTO40buNef3miXWrFRi+5fv4eedP3bJfErt
e4brtKL2xPpv3A69CP0I3Qh9Cb0JnQk9AX0BXQHdAB0B/QCdAd0BvYE4gbiB
eNHU/dKY13/mWZjfpt7f0tR91E2916WpdklZX17PBaPd+f0VXVf05PdXOCwt
ZR64FrTi9oUO13jeg96W59B831vdo5Sw4dZKvr9x3cebHA9WLmvJ8/vmQBLP
74tuPXn9G3QcwO03++Vze/5aOZ7vkUaGvN7Tn0m4ntN7dHuuj4w9dYDXTcuW
Yq6TbLxr/Irm122YGz/3r5XcwM/7ay0/WMDvB15Zwe9FWBK7mNv7DvbKo/lz
UtrIdYsDcQs5329R80mN5vvvpxX8fLzlkS78XPzNuD996ThoXQm3e73Zx+3I
P5GPIg9Fvor8FXkr8hDkJchHkG8g/0DegfwE+QrylH/0KPSpoEsRJxA3EC8Q
DxAfEBcQPxBPEEfgL+A/4DfgF+An4B/gR+BX4E+aeh9OU+1LXq/NJ95YndBn
vxE6JIf5ozx0FfOjKnc0vz9meYoZvzdGV1f8it+/sUWV29WPGnC7xx4vrlsN
PJcQSXgvbg/ft1Zsmt54//GeO1wX/FAVyPXAdUO6FRFP9OcnMU925PZknozf
n/CV2q+Zbud2LbtMfp+Gq7/6a5q/0dHPmT+Wbx8yf5Ka3+xN8x3x+jD7EyeT
Fvx+idhPLfg9C2e8PzN/VP32MH9Qp0DdAvUK1CNQn0BdAvUL1DNQx0BeijwV
+Sl0J3Qo9Cf0JfQmdCb0KPQpdCl0A3QE9AP0AfQCdAL0BPQFdAX8BfwH/Ab8
C/wN/Ax4AF6AD5hvzD/mHfwAX8CTFTavmAfA0rHJm3h/al1H5kP351t5P8sy
KZXvY/xTp1NO8z7T34ffM7ZyY3wov1+ofj+/X+bK5XJ+j+brMD/mw4ltj+7T
/P1+Ucv3OWo7OnCdNm73+F403/d12igTfp67jd8/s/dyT+bJuhuzWxN6GAzM
pPah3nW2pEumTtl4gnCVaDC/h0Qvd+8OOp78/NN+wpeubvxeDtSnUK9CnQp5
KfJU5KfIP5GPIg9Fvor8FXkr8g3kH8g7kFcgz0B+gTwEeQnyEegD6AXoBOgJ
6AvoCsQPxBPEEcQJxA3EC8QVxBnEF6x/+AP4AZnYbnz/IfD2GBO+z/n4nkp+
r/RMsWkDYdqGtzy/OMb/o71XhFMizbfF1dXB/FxOzmee96+tnXi+D3262JNQ
5eRTnnfN/Fvcnq21gnXm8X4yGfw8lNpufi/tg4YCfg/Nsqs9+f20a9eU76bj
CXsXuRBee72S37NqeVy7Ge/b9tYy4Lp69T6u/++/vv065UWr9c8cIJSZv4jf
09Km/P5VOk6LG+zB72U8vpbbUbdCHQv1K9SnUK9CnQr1LNS3UNdC/QL1DNQx
UKdA3QL1CtQ1UOdAfQP5A/IJ5BHIN5B/IO+AvoTehM6EjoSuhJ6E7oQOhf6E
zoDugN6AX4CfgH/A+oc/gB+Av4D/gN8AP8AX8AQ8AC/AB/AGPAJ/dBa94PdB
O3SqZj/Qopsu80G+6gO/tydypy+3D33Qgtu7aqsrEj/kdOYOJFy+Qpb3L+rC
Wofx91GMBvoQGtWeZT7cafWH3ysdHNTvOGHmhvHcPtThJe/XvL57mvdrHhys
5f0O1MFRF0c9HPVu1L9R90Z9HPVy1MlR90QdFPVP1DdR70SdE/VQ1EdRF0X9
AvUM1DFQ70D9A3UP5KXIU5GfIv9EPoo8FPkq8lfkrchPkK8gT4HOgO6A3oCe
gL6AroD+gB6BDkFcQZxBfEH8QDxBHEG8QfxB3AE/wBfwBHwCv8CrMI2PfH8z
MLZjO+aPQvRu5segiU99Cbfmb+H3YuEY/4925R6u+4g3VfUBzKMQ1dF8HyP2
P7Afgn0Q7HNg3wP7HdgXwT4J9kdQ30S9E3VO1ENRH0VdFPUs1LdQ10LdCnUs
1K9Q50LdC/Uu1CNQn0BdAvkJ8hXkKchDkJcgH0HegjwG+Qv0JfQmdCZ0JHQl
9CR0J3Qo9CfiB+IJ4gjiDeIP4g78BfwH/Ab8AvwE/AP8CPwK/AnmG/OPeV9c
MJHvV54nbs33L0/TquN93h/RgYNpX6qo90I9wuZ/1Pj9YO3rk0bQsYdK5Rh+
b/el7tyO/Qzsb2BfA/sf2A/BPgjq3ah/o+6Nujbq3Khvow6Oujjq4ahjoq6J
eibqEahPoC6BugPqEKg/oE6BugXqFchLkaciP0X+iXwUeSjyVeSvyFuhF6Ef
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
znHOzFrhHG8c6Z3D62Lb1dXq0fV9b5nKz/dyTo1DdPxwpxf83mSod9BifsW6
fjxu+w4+HUzjMqD1FdaNu3/jAY/PoHGDHShO6mS6ge3a0hiOlxZ/9uJxcdw6
lt+XkTYzeXy8TFI5HoJdHBCr4EUmjeRx+W2TyXaMRTN+T6a3trSkcSmoP4z1
9m6tSmC9TcubbfNZ/yqp0m2yJi3DWTfP47FKCcVhw0/s4/zVhFq6IXQ9jcwP
8/z3p24Rv5/rz9Tj+PPKekV8dt1rN9u8qEq8LstetFyb/l2teC8/50WH7x7k
PM8ySzu6/w+561nX9Pq4Tfy9VBQnm+1bxONep+oyttaRBRxn3nphxffZzGYF
P69Oo3fy+zBJdJWLRFfZS3SVK9JPTruyjHXAFn29lso8h1mtHP5XvG2vYc/v
57kNPfj9HDxYj+PGBLt17A+f3r3G97upzpUgOn4w+wV/52duVOP7anB3MX/v
5+2L+XvuF1Gf/47ScXN+Xp4nnvWm+bJ0Uldet+28pcvrtdo6X1mvs05+ximy
++2sWMd1kej3Jot+r4Po91ak09u482ae12F1FbbP1eIW/P5H6+Uq/PTWAMXz
rei+bvTkeLT1pfocn9ZwT+e4dGqlagWkb2W1fL5C904/lfXubj87zuNw+IMh
j0OwrjePg8cyb8X75JzPf1fN7zaPw7ccP9ad7PruNOvWKuVUZ/3StjOezKZ5
1KFJp2lk8/RM1tPfXVAyk/Ul7dI3sw7tsjOV+H7zWq7lOPXUmtlsdXdO4nj1
VaMn/N5sWDGI7c0PkzgPWXSmPd9nqzVL+Dp1TWfx/epMfsn6j+6WJqqs67a9
jO9rbsRtS4p3/ZRVOpPNrec1heKcSxdOsh7fZ48jzBeYsKfJHdYNq9xZneLd
jK+fqpI16zo+nq6nV/h7fv8/FGTw38/YcYnjq3Tl2vyerB6qze9Jj0uaHG9s
zzvkS+Oy5NnnULJJE37w+HjJeme2rHfiZL1zXKUnr2PvuHuw9e19xYvmzYp0
WQ1nNeFxGWYdzn/3bM20r/8rf1srexWPl3HojIaK/ExHHrfiOQN+07gNtylm
e9Imk8dthayn3st6ykzWU/H3pv6k67N1S+b4vf7LD9p0nd3ehXN8OXZINL8n
Kwee5DhzX/0jHB+8yvrC82FQwGiOE27XOrmM5j/Le0nzyd6qqs7zYHvVVqxL
e/VrDb7fer5umvR7b9EX1Rd90SLRF61IR/TE19N8HVEnt/F3s09pzP8cnxDN
bB6X5z6D+Ht6PiyLxwffFb4zfF8vl+1uQONiX7cq6zu+d81jnbdmbT6MpvXG
C5MqdmRzbGJv0brjiUYo6/0dv6nHeo874pdacZyz4CyvIxYsTVPEifdG8bpj
mY+5Bd3/1MAYjgtOZTTleKCjypzzNF/u/PEuneZPzJsjJpuwHua0oRllZHUm
7+V5s5foYf4QPUxl0cN00e7F43Nt42ueN9ym7+D51KrYgP34ePcfPK/ujsnM
/l/jcLRR5Eq6n2NNp68gq3S+iHXtxpXU7XO2V1QcbK1sxXX2i7fdTfHu2UVt
95HdsDCRdep67gg8T39vTv2+58h6dqzG47BE9XEm+9/nCZwPLHCdzHlpvy23
B9B1TJ7XczDZ7BWGVnQ9Ti8sOX6q5D6LdQeNrJPqsL53aXgejUtsUGsV0g88
VfsR60ZmrnfmefTB9Uk8rz68pszz6cjx/fj9eGiTw3bJsy08PphHMa9iPj1h
0YTjjD5j+3Dc4Xt/GccbuX5PN/Jz75bEnAur5DDWdQwoHLqK7t8rs3YwWd/U
+6zPWfd4ry10Hc3yfbeRjcnu293/7/Votu4RQ9cxyn9tLNkHJ5rx+DjV+sb1
DLA5YT14H+Trg3eD6DreL8gYyOuREv+hdLzdhM/FrC99+F0NGofc+fNG/q91
tF8rXc7/3ly3VoPssvXfeD41GOPC91vDrhffb8m+3ny/n0R30Vl0F2+I7mJF
+oqfL3zYSPevdetlFNkFk2bw+1DRenz26Af69PcMNyVznnv2kOBN9HctZ8RZ
0r/rvxvJNsevL99vQHTH603nZccvcDiSTHbX2bIYyrcP6fyozeLEu/GaW6xb
k1XZu/TKWN3CPqppQZeC/86Xvx4mXSMbZ7zNiNannpMmzDCYl92nqPdxD7If
S6aZUJ4/VPIApyQPsEjyAEWFz29SHUDVlo5cF2DweOp+qgfoVyvuTOnyi/EP
/zxo+P2vDbeskkr7nq4eP53IX3xbqTmHrJfD8gTyG1VmPeU4IO982QCyLvP5
331eVa/L+duWHjHKZH8scarF+dIvlSzod1eHjOP/V8txGP++3duyO7RP1neI
Ae1TxWduaN6SrnNXr2O873K5x6KeZJNPNB1B+y/qP1dn0r5ylkX1FLKu90t5
f9n1u+67pX/Ha0sfuxtkfaNiXo35O24b9xutoDjjyibzQLLHdqVr0bwf7JQ8
lvab16j5zyHbsFn1Qhq3PMlLNJK8RF3JSzxdMdeD9gVL3JdPIXvA2ov3B6ec
0X2R/3e8BkdoVnv/107W+dGO9nO3rJ7A+bpHjzx8eD7ZNHUczSO7Sgby/cO2
PGZA49LHptU9zlNfnBPD9t75Mato3IIMA/l3sPW7r+dxCzyfZ0HjMtrtOdvE
63V78f7U9ePTbKne5Ya6M1n7z2+iJ9TM7xOve3MQ7eNmrfrFdoK6VY2Gr173
cRrT7xPtw6lvsX1P1tTHdQPtx6VX7cr5NXsjG863Leow6RLFG2X3S/l5dyiJ
YdvxtpIlXY//k83zeH/QNGQm2X2qfmm0P2iXPSmWzqsZuP4y2VUaL9/S+S2e
TOZ89+TzfYaQnZ6XzXnvlmWZvH88J7lmLNkR20IDaB85/lRljvvvqP+YSLZm
1x/MuQi7cI73qRea7txM9nczn630dyc8m8D7lxu3/+G6DM0pDbkeI6BSXc4T
dvB+wHb9tOdf6L4Kj33i8YVd0f823V+fOTZPY+h+Vo/TPUe2KHKdA50/Kmv1
PT6v6QjeL9UYsi6Wzt/gYqAP+cdnzeexzUnbNJD8ZPn9oK6SP+lxON+Wnt+M
LZ243uPWs4nN6Tm+kf0YWB/Zl5nx4fRVqv/o0PLcJbL5gc7FNC8M9Qu9R/vB
V16tyiB7XsukLu0LZ8V6DXn+971sXVf3zbO/1nm/7TZ6P7Ok3l1J6t+9pe59
156DzAv5UXlGGdm6d4bxurvyrZumtD99dbOnNdmaa30KaJ/6d/OET3SfVrV3
fiA7yfrOcboeJ8nDbJM8zADJw2hbTOZ927Phx9k+y3thQvebLPlr2BuSx+7w
+6oe7bPqNFPh+hTnUZmT6fzRM8pK6D6raWaxdbjeKp3235PDqiW9+3ufAXsj
i8lmvd3dme73of+kUPpuH7oN3EtWQ3XsRfp+vbbd5fq5wddyx5HVSlDjOrrk
ETNY/+1tSibrvzlKH0RhT8sC2k9VC5n+lmxe55pbyW90lO/hh3wf+C4qeo5z
PD4/Jf91rM3PdLK6w/R/kx87baz/kvzXtY/dXpB9sWT4C/Jj3jP1JrC/unGY
7caaSp/o7zqtusPrqDS/uavJhtw1bUj+LSxwsCPtEzt9W2ZLdlbW2SN0/sOS
F1oneaG5khfq9Knvd+pnODY50JP62T9JXfGZ5C4vaX865XFRDtmCVQMt6Dwz
x+Tz/cCuevOMv5fyz/GmPMfHQ1Lu0/8/7b/7IdnK5+vY0HkMigyWr/h7n0XT
IzzJ5mbYqtP9zrlrPZ2u+31G0ESyZQVu++j3IWUHJ9H6dv9Z01Fkw9wDP9P9
3rcK0qF563bf9lE0jwUtrcHzl8fr+f703lxbkO1D1m1d16u0L5wg85CXzEuY
j9zvlfSg97LrsbW9yA4+etGW3s/UKgt5v3jnw0ucb1loFFGb3sM+v9aeID/1
8V0++62NQbe2kr9yrtqf8wgle2oeI1u6fAznE3KvfgwkP1VtSMh2ska5TwLI
nxwZcDuA5pE5wUMiyIYNs+9I7227g78M6LqHtlvfiusZYjLG0t91eL2Wrx82
7E64Yt924iGuh9hiNo6/r9ut3nFdRGqLiG/0fbb67ML7ZZeSkoPpPO7FB9Rt
/l538AKHn1T/o6PzdhrV/+TumfaE/an5gZdk53v1b0jX+azBGzWqz9iXeb4K
2b7zDt2nOg3EAYgLEA/4fztzgf1jz6ns/898icsjP3lE8lrWkte6K3mtB/NC
+e+Nmn84k+yzG9fq0d9NcDjC9UkuxSuKyK5/VziHrtP35aQijpMH5bIf2n9q
3DG6rxZ/qjLXyqH5MrbdosdwfqN9w2kXyY/v9f1ygaxxZvAIOv8b4VrBbha+
VRPJd5SzFR5fcyOP55unQxqxLUq053nBUfJm+pI36yp5s9V9hu2h+9TZWJvf
i9yP7zbR9dT4pLuJ3qfspDnHyTYfd283vVcT74QOp/cvvXGRPdldk1/Uo/t9
lVyD/X5Y0doHZJf1yKtD/n+a6Holi67XUdH1qrensg358VMqUezXjS1t2Z+3
31qN60v9us+xJDtkWu8y+r7Kfne0p+8w7snrMWTXXN0eQt/jsC59d9N3C1t8
+8Efh7/f7wjxJwdNZiorKQXEacl6cGC92lzXBetxrBfnIRPTfq+kOAl2c9wQ
Z4qXKhpnnZq7uU4U9mjbd7fJ/+vI73TK/T5H9HT0RV/ntujqVHbvv4PmA3Uv
ax+ylQ03X+E61R5LJnPc6NqO/evlQQ56NA4m+9/akv89tT2Q/XDVS4ZfyQ97
5bSvuezv/XtvnfqR/PZvy30PyY+tGmkYSvsEwfWKdpNt1nn2H7qv67GK7yV9
puJ7ifdQfC++XVRT6f/vKPz5nqy1TdlLOo9X/B5/uo58l5NLyGZceFiPruec
5AP7Sj5QWfKBdXyGLKH7uWrdietwZ3snJ9F9De61NJr8y8aUy+xvnFYMZD9T
+usTjyNs0vkBPJ5fptW/QPHoi+KxXE9RpdXWNRSX2ovfsS/nfx7u3EXrz3hY
lZS6vA7VeHyG/RLs625Lue7U+rnaRnpvYNskXq5E95vs/2QEvX/Xao22JjtI
TaeE7jde1vlPZN3vL+v9vJaNDOg9vhmu2YVs/3OduY6uhdHvRxT/tEiMXUPW
bapFAN1v4VJPrqP7OKL6fbKXWnWvRd/Li5NKi+g+jXMWzeF4/KnfJ7rf/Guh
NJ/Hr1aZ149swd2dPL8b3cgbQfcze4T6KLLjnvtw/OYZFhxH3635/B37yCZ0
CtxM369PM/9t9J23dqrH33vYZvct9L2P+3mE40jlWavZbxxzMT9PfkMjugrH
qdPUrvC+dvN+mbyvPUvm3Vnl5t+M1ifZrw3c9p7r9FITc7neOKiqC5934IbO
/Hdqqqfw+a3iHDl/1XqfWRZZC99vzFF603D+D/Kz2iv1fpFtpTdoJvnbl/c1
mJ919E3WQ7JRvu2Zn7VAZ0o23c99tydcX+8zOEib/q7BvIlc5zfzYehFsiOH
Vn5Nfzdr671U3qcX62he0I72T41+9uRxntn1Ns/L56eFm9N9nc3ax3WBx3yr
sz0wuP4Lmnf8+nfndUvP40O4rtuoz0BfOv/g5fEFNB902fyW60Tcu4w6QX6y
fF3HZclzBg5qz/NlYkEi26KXP/9nXLrUQpvrpPvt9WJ7doMZ10vv7tqc60Ft
9n38RnZ64uc0+o7qDW1hQd/bGKfd7cleuKhtRO/hJekL3SV9oubSH3o34ivX
Ww9wacH117ntVnLd9Z2efdhP/ZhSZyfZpAvz2F8dCxtpR/OB9u7pbA+fSqpD
17Na8qUfJF9qKvnS2XpeZnSf5zK7sC2YGjmU149S5wH7Veo9LIYne9J9Pg1Z
znFUP4/fqRRH7dwSwH0CLf/4NyY7e4m9L93v/Hsbb5f8vc8vVmk9KR7TtjPO
oHjs0aumPynvsDzk7luyiWN6+VH+wWi+gxXNKwfu1eB5Ju9zX+4H2bakQWfq
l29ZkMFxabzEpcs9tnGfiOVMM45Pq19xHEi/L5D1W0G5dVxFz9HkfNBT+v9H
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
8lGdJR/1UPo9HaXfc4T0e9btrehTeCx9CirSp6CnFe1L89NjmyTOSzx82lmb
/u5P11LmTT+ddoXf9+zh0/k7PS59CgOlT2G49ClcN7W1o7i57ZQ3VmQ7XbD+
RueZttKeudTqPxYyR7Hn81y+novJDubMuRxyla9nY7Oh7B8spX9htfQvZEr/
Qvk8iSrqpqRPc6z0aTpKn2blkql8fbBV1FX4Ogulr+Gi9DV0kr6GyxLHP5K4
frPE84ekT3Oe9Gm6SZ/mpMnT2H+VRsa+ouOW1byP0PGN3Zd+pO//ssdutnet
r/G61cSwkK9TuUcw+7NmHevyd/dM6p0aSb1TJal3ykmZ05je14eVu3OdV9MF
uvxdNB7Xia97wI3E09yXcWEJX/+Cmk05v513w4z7/lMnaHD81srK7y372w7D
2XYP7s7xc+4kRV1TT6lr6il1TYUfVpym5zG/nQXzSK/O3s79BdnSZ5EmfRYZ
0meRfMesK/mLFTcnxpP/gN949elSG7ruYgsHLbIa268yL/iy9FmkS5+Fp/RZ
HNyhUidlZbAZbNNixXmsk6pH0nXA7vnZjq/H5/pEng/CO9rweHa7tYHnhZrS
f/FFQ9F/4SL9F3a/A5gDnX9Bk//ukm/Hj9HfbSP9FF7ST5Eu/RSGnR/0pP9/
YsuNdmSLqniU0nk8pH5mnNTPxEj9zLbQzKv0numGDOF+gobDkirTebYsGnmA
/VL9ZbfIvvAZy1zXvVLfsk/qWzSkviU9Zl4n8ne2VSsxj7VlP03mM+62WTiC
/MJbldEWZH/ku22l7+ugquUl/rtvroSQXTlDifsXWsu64JasCyJlXfBa+ijv
Sh/lDumjVKqrs5Hq5oOGt5pHVm+5djTFb2rn6pvQdYTk9qrEnNA63/h6zkoc
fkzicG+Jw9Wlj/K79FHqSx+lboGiz8LQWdFn0Vb6LIbu93Uif6GUUOpC9obq
8490XxO+W7IfG+imz9zVyj7TXeg6deMUfRaLpc9ivvRZFEdv5nXso2HTepJt
9TEojfyztmoqX0+lkYVeZEef0epE15O43TqeOJFjtYziyPYzqBFCxwubXyvc
+/f+e146/57sg0NKI9z/nmeIV/NLxKecNiz9Llk73wN5xKmcK8f95LitHE/J
nTSL/l6TloEcF70KOcfz4+F3iYsyS6LihjTR6H5uxKk4c5mvPaRfI++xol9j
i/RrZEu/xivp19gr/RptZgXXpvnvp++k73/PH++2fcRjGh+jVme5HlH/5tq6
ZBu/2+tG45CRX51/X637sjL6/YBXjx/R79tK/UYfqd/IlvoNr/fVeL8+LLHf
Aq7b1XgSRNdzSI4nyvH3ctzdfg/X3y6o4sm86AGFaovo/O3G9Zkb3sE/Tm9T
xqwvRwPi9MU/RFi8u0HjtWNOp2SyH439edz832+No/VDJd9nF8iqlHwzpvew
ssSZkRJnVpY4c9oB82k0Xkvv3t1BNnp+U47T0uu84TyX9V6LALJHN27jdUFa
pjnHw4+2ZCuTbeHvynX+Oje+sy7D7g6xrNNQZ3V71mdIlnFTknEbKuPmJPUP
i6X+wUXqH8a0O96GxuVKwuLpZJU8t3Odw6lKQ3h+rXr95WaykYcXcv4/Suoi
EqQuQlPqIozl/MPk/DPk/PkSDw+SePicxMNKtzRak5/qN2KICVnnjKfsr7wm
rOF9x9Ihk9pw/sZwE693+vXXY27ulk/3uR7Se1+RgqubksN91563q3Ef9pg8
U+6/fqQ0oCp9V8OVylgfZcmQQu4/MpI4uZXEyZMkTu4k/SOPpH9kifSPjFDT
Mqb3suVRKz2ynp4pHEetbxK7nu4zxcnagaxf12Z8v/6uQTw+Bq/7jCLr9DaU
68YPrm4yzqlbiNm56V63VxaFmCVJP8JtGc8sGc8aMp6BUhdRInUR9aQuYnCp
vTn5ne7JxV3JVv+UyXosHyUOHylx+HGJww+ndBtI/jdI1d2GrFavWtvo97O7
fztMfs23gcd5sjXnDWf/NrK4iQb53zqtr3wif+xc5SHXxdXIqPJsT+K6uNGt
mkzf0c87TuWP4voNwrdy3841O2Uzso/D2vJ6pCBMcXyTHM+S45nanofIX/eb
6LyfrN/kVO7DDY/r2ZbGd2GQVhuy+9Kn8jgvlH6Wqv0U/SzfpJ+l7hZFP8sG
6WfpLf0s8Y8GL6X3denauz5kY9qe4Piwc35DjmNNtm37TNYsakgo93d4bQyj
+2zp67WF60XHneB4Zqsc/7lJcbypHHdyOsl9vz7hER5k1+0c60Xnb1tNm8dX
dXGnUWT3xBhs5r8btmEKPae6LZXHkp3l+bSIjvf7VJk5zXVXzGNuczvjL8xr
fj2nGvfF1ZjzuQtZP48W9WncDh47akL+t3ThFPbH8MO58T+5vmemVyn3jXlH
felD9/VejrvL8TVyfIro6owQXZ0BoqsTvXynB42vntWCeWTt213mca7/fgHX
ebwJbbGcbAfndg3o+hdLv0x16Zcpln6ZQ1Lv4SX1HvOk3sNV6hN+SX1CsdQn
lHVVi+Z65SMH95K9U9+b+wVeFz+LCmvnG6cV86NHWen/zR+JrZ/IfRFqFx9z
PfnZYd7cHzFOzv9Jzv9Dzt/GNYrr7DvNbcP7L/NcJnC9fSc53lWOz5HjvUX/
553o/6wU/Z+4ZaM5btG6d5brrutZfeJ11qmDnSbQc720LnAk2bTNnb/Q+LQO
msrzn8WBmzwfjh9oq5gHJ1/nvE8bVTO2L4uj2M9/uj/8IvnxmJr9r5G9ElPp
K/mx39sU68RBsk68LutEB9NUHnfl0gWfyB4I1uH3+Z7UJWySOoUgqU8okz6T
WdJ3skL6TT5aZp6jcdT4UhzLcf3vtY50/hnZjXk/fqu+sQX3DetE/KD72izj
n3lBMf4XZPy1pP7BQuofukv9w+nz2pxv6n16+wh+DpGXeZxXlI3k/NGklDKu
NzHSWMx5pBzJT8FulTyVoZzfWc7fVc4fscuI67TKCi7wvtht7QTeFzsr6+Ij
si7+Jevi0MMBF+n+zdJncFzZ43VVVzr/6WvPOI/czVCT88rvXSbyemRt6EKu
393hH1ZMtreVKtfxfu07/S6tR4pWTqtB/udHS0Ud7y4DizH0nVy9oLeIrMv0
X5xHzXpwl+dvezcLns8/uc7ieTxdjg+S4z/k+OS1127RPGG118mJ5g3MF3h+
eJ54jhekb6iX9A0tk76hEydGr5t7ZVMc7CpwvhrU4nGEtZ01gcezovHPOWg6
nfwa7FKVpqx7EFfYjPu1XnbZMJj7FCY25r6t03L8oRzXkeM7M9ptCQ7fEGfd
eV70r7U+cUlyPSHT8l9tTj5s9iD1UtiGh8Fm9rKeSjQZlEnvve6mDZzXb+G/
kPP5E3WVmTc/3tKQxy391QXOEzrd7zic54+DCd243+VIA+7v7u/TkuMhwyAD
jo8uvH7PcVGbk8+16XcbDadwHHqgQxeOPye+bTmV+9/63+P4SMUvgedlbzle
Jsd/+yqODy7V4edS9U89zhvpHlPhdT38F/wZ/Jij9EMdk34oJ+mHqiX9UHel
H+qw9EMtvHeUxxFWza4bj+eqR2lj6XnAtkxa5kvPpaLfP5A6CdhKUi9Rv/2U
e/TefH3ahffbx19z5H32LnK8zjPFcUc5burZ7wV9D/1C3vK8ajvmCq/TG8Vn
vMluHmym9XlkRLO7wWbN5TmucvKcyf2WjY90JOvmps/jdv12yHb6TnZ4eC8g
23WTIs5cInkSW8mTTJQ8iUOGQx0ar75twiuTnX34LucZxkTlt6Tv/9AXLfYr
ha5dHTlPrpHK9+/apjNb6+/DeRzeDz3L/mLYh0vsP9Z/d2K/MVPGC7aGjNtk
qVswk7qFAVK3sMJjGY/L10ebOK91Sus4j0+sykSuIxmcu8KW7PIa3zm/dFfq
GfZIPUO01DP0kPPXk/MPlvNvlXyOs+RzFkk+p+TP9RT6HpqUGh0ka7x3Pq/T
0yf85P1C4y9reH2QOeLhR7ovfdeCRTQPbb5WjeOBX3NTh9J5bLVarqX7bxF0
3ots9LYNaTQfNYqr3p2uu17vewM4zhxQ/Iuuv0TyPPmS59GVPE+09GcFS3/W
eenPGnlh23h6Lxt2URtD1m68Nr+fld1/vqb7DG998iHbHV8V4/kqhvsbnbM2
55DNu9iA+xzhL+A/4Dc+yHjGyHhGynimSz1DP6lneCP1DFrN986h9+z0xGPu
rNcVGMQ6XXU/KvJIeyWPFCd5pFvGJnMpTtXcUSuAbLPA5acoXn1h0liF1g83
Fjj2JTvBbTPnGa4MDIumuG3qaBU/7vvf3pn7OLR/zH/6RjMq7tmk784H50fF
fc5SXL/eIvV1dN0zzszbT3bxm0LuK89bqDhuLMdXyvHas+MW0Diu3P14Ftn8
c2vW0vWPTDC0o393XdWP8y57l9sEcP++9ItZSb9YgfSLNXJU9IstlX6xC9Iv
lj/bj/OhQ306OHCeI1SJ31vL3eqcD3VKf8l9VJoOfjyekSc+a9D3/P33Ws7P
PQ7fynk5LzmeLsefy/Ezo5V68zoq7rwZ2e7rRnMf4vv0JitofPu411pF9tmb
RpzPUVLO60Hrt7EJBzuSvddhOOdJ6lwvWEXr6rmjay0kW5wY2ZHW1yuzK8+n
+8lNf7CZ7Iikbazb4FPw3oXW8zvixsyg9T3W9UX9ZjnR+/pHL43rdAxcBrC+
QYkcV2uqON5UjmeK3pqO6K3VEr21yLnK6TS+XdsFxJE1NlrP8Yaq9YLRNI5P
73/nOuL6Ywdy/XA36Uf7Kv1olaUf7bHkc+MkvxsgeV1LqSvYLHUFV6SuwNdg
Cvev2rhOLeTxTzrP4zxlfvVI8r8z+m3MI38MP/yq1xP+vcXu0zn0+0u2pkfp
96Zy/nVy/utyftdzNlVpvvQ80ViPrK95q3S6zjly3FuO+8jxw6ILV1V04T6K
LpxKWCrnB38mvNcl23hdEX8vVa4lG9FzVXIx6UK2TkoGP9+YDV0cadwXOOix
TahirUrnH7vqMe+D7sxswra64QrOD4w1KOT1f0DTumzv7i2axPqxkudUkTxn
Y8lz1rxuHk3j/rp5tXiyapoHefwnbvHkOtf92r9HkK2nZ8z1rnstrIpoXMaq
D33Gz2FT5gkanwW//bVoPC/WD7tP42nirc5xYNXdRzj+69mxiyNZJf3VHAfG
yvg3kfFPkPEva66oWwiWuoXmUrew6009jm+ajZ3A8c7qi0c4zkk1ncf7rFVa
qiWzTufaZ+znG8r+aWXZP9WU/dMGUhdxRc7fVM6fNGngehovJ5cCngeKft9k
fbldktdtLHndDpLXXZrcmr+7qt511pD1Ne7Qjr67pO/tuS5hcO+LXKcQZtuU
6xP2TlnciPY7G9TQ0yGb2yD3Pe17Th+ia0x5tPAnsV3J+verWkr5tPStM30o
j3ZpuoYv2Se/3lqQH3i5L5rnlW3aRpwHSkz4yvmfu3LcS47fluPa9jqzKE+R
plQlm/IWyFf8kr68OdKXd1X68rZKX5669OUNkL489+gyjkf7DmuTQ/Ep4tL1
cSN5PM/Yhb3k9bJpLx5PtS7mNWncvwSNNCB781sZ1795r7fheLR/3dEjyTbw
959E7/nAu7lraT7u/dRzCdkH67w5r95DjhvJ8WdyvPWDBlNo/pgyezvPJ5hH
Xo0q2f39WowZrEm86IcnL17aj+LMn+dXkl15Zstkmo/235nzkvLIYxrfeU12
/d3xfvQcb9bQ19v39/quaMfqkz3+oIMp5ZMvHX0QeZv6BRqsjSBrM39jCdUp
JQ+6xJwY43NrmRsTKLyYjcKJLxNu/DThxQ/WmKj+YPnFPpuObYu4/9fa1QxP
ovMYeISaUR1Y/MjmI8k2+dFLn+rB1kme+bvkmQMkz9zU/OxQqpcaPMXrNPUZ
jZ/0m/uMbkn+U03yn5aS/2wQmcq8BLXOLsxPADdBs0vA51d/r6Pp6FeXyK4+
N30KnWf2Ce9wqsM77fUjgmy2j/oPup6nsv9+SPbfVWX/XfnMw0Ok/zt2VuxJ
so83Z98hHWBdr3ju5/lZ3Yr7e9DX0+rYeubOKD86xbrIWRaFyTQ+DlfHsl7t
rF51WL8WurWp6z2tSdeytFkPU7IdnZfuIH3LMbIvryv78l9kX37Y1S6VSGez
terRymTPtLY+QXqbqGtEnSPqG38IP3Kv8CTrCEcy4bpNNukOh4zQe0d2h6vL
ZTrPk88/39LzKzBKzyP74eIQfo7hDaoWUv3lBftn78nemZVzk+owI3wfnaBx
aTXqSDhZN+Un6TQ+Dz6nryPd21Sd8TlkUz7W+UW/7yb52CzJxy6UfOwEyQd+
Fn2bEskH7n83ojnp2y4NmPOBnuOU4jrOdD3Xlm04TnWBT+beyyY7qJdlBzoe
lruD9ZT3Pz+oQuNTtLbeSbqvzsc1q77++/9PnrG5R+fzDnvsRL+fJXUCAVIn
MEbqBFbLe/Vw3Frm25vJ81KZNdKSnlOvi6EDyLZTeh1Iz6tOi7fa9N7Wm7ir
Hr+/Pyfyeztf6gp2Sl2BvtQVeHSt/Zau08Mj5z3ZwGDnC3Sdw+69LKV+s8M5
NxrSfVmem2JM5zndPX8UfT8Pzvc3J5u/Y1wzem/PSR1CktQhfJI6hDPe1SNp
3GOuXjpBttf3ATz+tVcejqT+jWr7s5hb+PhX2BHq46jecCrfZ4xrBN837ndZ
4OBA+k78Et7sI3v5zCvuywiRfNEnyRedl3zRGalnUBM9nLNSz/DNJPUxjXu1
wxFHyP6qrzee6yGFM/pOuKOGwhstCEjcTJxH/SetWY8ZvFH34xfNadzNEtoP
J9t6bN3tNP61jy5/RHVrlt0uPCebYerGfburPz5/Q/d/dU0Sv48TCtV4HNyF
T3NNeDUOwqmJGNZ6GF0f7PBBRpPoOhvs2ltIz8lVvW0RWd/iu+foeS00M+T6
3hnvevmSbe87sjL93fadz4XT/79Y9sSHbMdvLVmfeeZGjZSiv/9++WD+MLqe
FsNOKNPxEtFvvCh1EZWlLuLzVsvv9PdglzpMiaa/myZ5IRvJCy2RvNAsyT9c
lPzDGMk/BEq9RCepl7CVegmjqg+daRzbGI1ind0h+nNYX1dj2acz5H8NlU6x
P6687Du/z8uFe64h3HNj4Z5Pr1LWjO5zwMbpfcnODv3B4/Z6n+NBGpfj1+x2
kY3u9/A3vT+3C/YNpPcbtsqhBEP6vbusz2Gryjo9yq/aTxq3zZ8srGncbIPK
lOj3VvuPVqY6xeejFpTQcy94Hcn9Mm+lnqGV1DOoSD3DPVvXPzSOdqfDS8ia
+ndj3fV6TxzYf6plXS+lfiP0Lar0U/C7jwi/e5Pwu6EPDr1w6IRnOlp9ovOu
77T5I9kuFpX4PfkjdQ6jpM6hm9Q5XDJ+70jj/mPJhIFk5zex3Uzj/7PLUK7b
fnM0iesuUb+tKbzbJsK/dRHurVWhoRf5X/XqoTxfVd1k9Zz88OzUki/kN4+m
zW1Nz6VBQeFkrqM+4ch11TMnhkWRLTbWZ//58JglzysdH2r+outvMWBAJF2/
9t0r/B5/9TE4RVZHRYPf51jJDxyT/MBZyQ/slfVpN1mffpD1af+Rk1rR8zOZ
drA92RtLH/JzbLbAPJjes/o+nuFkvSYu5XrprdYzR9G4zDbvxXby3an+ND5D
ujdWekjf8543URR33JyaFEe/byF1Fxqie+ksdRfW8pzqB/fe8i+/+NreDfxd
V1tRzPNgnaGLYul+/Ru016dxGWew9if54ztferIf7iV1GjukTuO21GkYL1u/
mcZ9e83YrWTN333n8e+h3uc39S8oDU1Rpnnzdz8b7l9oP6JaFH0PWus/HCOr
3n/4d/ouFktdx2Sp6zgtdR3hD2tF0rjHbJj1nOzWUV/H0fXYCidXSzi5mcLJ
nRYTw/fZYbZtEulAh8n9nhj9m+t7uz5oqU7fTaGz0iP6Xm7L+sVI1i/xsn4J
lvqQEKkPqSz1IT0+uj+jcVc1LssiOy8shMf/jHBpXwqX9qVwab9sN2YubfXq
ocylrSp60XvHveZxXzTs6Auyzw4+vkTjv+9xb+6XODDXzp3s3oDrGnSd1bdW
fkT3X7v6Fg2az218knkeXy08sKvCB4sTLti5+s7sZ29cLrtN/iMkZyf7W71P
VfbSc7qZ2dab7AH9vpn0vBYYF7Wn+bXX3Vr1yIYY1+9Ez2VYd7+TdJ+1ugRX
ovdOze4C3++5lb0f/P7776y4cY/Jum6/eoier7LUmWhJnUkHqTM5Yrl4GL3H
5169diGra6e1id7nI7JOaSzrlH6yTqkqdSbOUmeySOpMPNaUxdT9+/9N5uZf
IOscO3Xq07/nse8dtYX+rbLHMYDsklXrl9LxQ03MmWvZ53zef3EtvzS/xn5/
e680Y7IDWurvputpK/vpTWU/3Vn20+2E/9ha+I+ThP/4QvapB8g+dYTsU+fW
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
2P8MvL6jCv1eyW5JKL3fWaMnnSfrnfIylN5zcLDAxQIPqyIuQEXcn11zT3Pc
dmliZZ7vzB824+8XXBZwWsBneTbapHlblSNmNT8q+l8WyDwI/gR4FOBQgE8G
XhnWO+AkgZsEXhLmFcwzmF/A4QCXAzwOcN3AeQPfDXwp8KbAmaqIEwR+CXgm
4JiAswXuFnhb4B6BgwT+ETgu4LqA5wLeBvgb4G4MjtCsRjoLU87ovqDrmazz
g/UWiqZHeNJ1GxQZLCebm2GrTtfTIjGW+8FaGP1+RNZtqgXPL/fdXzWj7yTY
r6wp2QZuX/i7A58MvDJwysBnAq8JnCbwb8DDAQcHXBBwQsAHUVFy2Et6mipK
t0pJXxO6mjel/vO11H/aS/2nt9RtDpO6zcdSt7nx0ptWlGfvqVGLdU3Onz7n
TXm8a0Y9WM/lU/boWmSPO4xkvfeK6qsrqqMu35+SKv0pQ6XOLV3q3EZIndsV
qU/7LPVp7aU+LcawHeuUJU1MYr2ZyNVl0XQ91n4WrNd2bP7Jr2R/K6mybtt2
qUMeJ3XI/aUO+aPUG3tKvXEvqTcuHfmYdQnPR5vWIPu0sAnnAa5+rcHxc3vV
VoM47+3rpknHlZWKWE9HRWn1OdLXga5OjsT/vST+95D4f6bsg5dsVuyD95V9
cE3ZB18u++BFsg8eKXH7ZYnbT0ncPk72o3+NVexHX5b96B+yH91L9qNVZD86
belu1nV52r4276cMLtrDumqpdqd4HPX2f+Xn/HSJAeuBR53cxno0J76e5jq0
fUpjWOdnvPsPHl+rYgMe710xmdn/S+9rvey7Bcu+m5vsu1Wk61WR/tg6h3zW
Z6xxwI3Xr6PibXndevymnifrzmmEriK7I36pFY2bZv2mfN4vrUv4Plp+3c+6
OjNrhSvek87ufB8hvXP4+hcsTWN9yxkLznI97Y97o1g/R+l5AusnL1F9nEm2
0HUy61qjDxx94egHXyf98FelPx598RX1p1TUp1MmugwdRKcB+gyF0g9WWK4v
7I3sL74pp3tfUV+zuuxb6ZTTmUdfSrr0qcRLf4q99Nvbl+u7R5/Paun7KZB+
n1migzCrnB6CkfRfoR/rvPRhXa1lMpXyp88SanJd+vTnE3pR3lKpRzDvc5gY
FnJdULOOdbnetZLSwTiqH62ktLoL1ZOijjRG6pRqSJ2SktQp1ZU6JV2pU5oi
dUpjpe7IU+qOHKXu6KHUHeVI3VFTqTsan5F/iH43JfzrUe4XVBvK12PZYfhb
+m5bW/mx7R7cnfcR7GS/plT2ayJkv6aD7NfckP2aKNmvmSf7L4dk/8VN9l/m
y/5L4QfF/stV2X9po2rGPI9Wk6+zfVkcxVwPZaX2TlTnoay0/RbVfaDeQ1Xp
Shbn/ZVezKR9AOT/Uy/rd6e6xuYbM7nOEfWN1nstAui86XXecL/O0Y3b+PyH
vmgxz2NMVH5Lsh9cuzqyzuSWbM6fpmWa83vVwt+V/SfqeFDXg3oe1zaded36
TSOVrfX34TUVfrU1c3yVlUqZ6+sg+7PVpN4gQ+oNBki9QYLUA0RJPYCm1AP8
kn18V9nHL5Z9fAvZf9eS/ffusv8+KaWM+2FWlo3k+zPSWMy8kor22ffIvvZd
2deOln1t8L/BAwcHXFkpmnnAykrdp/zLl994d9csqtfcFaI291/uecmQSW3o
OrwmrOF+HSXDTVyf2WPStgjat+7TsfZ/ccONv6zh+qE7E35yH8/zEQ95H3nL
p/s8j5j31+M8tPe+Is4/7/APK6brWxu6kOuVelupcp3SlmvVuA5T37VgEdlf
c1OH0vHb788xd2fC62TWpV79KI37kpSVNvB7o6x0+7/qY8v7yWniJwMfKrgP
doEj2JbUaZiqOI+DG92/stLbGf/Wr5b3n63Ef7bN+Rn8cV52/M2UBqfIvv6q
PyZCJe//4Yc1xQ932TXz6Ie/v7PddvEE2SV2MVUi//6+vB9u8H/ww+X7c1eK
Hy6qf5XHpYHPDL4vk97GPD7l+SO64ocXJ27l322c+5nt1bo3ZDw7Sn1CVMS/
9QnJ4p/TxD+jf7AinfBxVg3C6D69H909TLb5ytfV6H7L+/Oj4s/fXTx9vPDv
7xyrGO0jO3zq+ov0+/J+vlD8fHndm9Xi5w3Fz88QP39B/Hy46AXNLqcXdER0
b7qI7s0X0b3p6xMYSNfxtnt0CNlFrTpcoesxPfdoL91PrVG5B8h2tqpbm457
TtbjOreZS887/Vvn5iX6Kj6ir+Ij+ioNtb7xeFX6nMR2YPROHrfGonMSIjon
l0Tn5OXl1jzOG8xO8u9LV63k3yeI7tUw0cHaKvpXPYVHFSt8qt7CpQqUPvxD
0pdfU/rxwUcBLwWcFPRxP5I+bjXp4x4t/cgnpB85R/qRQ/NC9tC4nG2TuYPs
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
Ifow
    "]],
  AutomaticImageSize->True,
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{352.1119355971572, 279.6997315959475},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->
   NCache[{{(-2) Pi, 2 Pi}, {(-2) Pi, 2 Pi}, {-0.9999999999999748, 
     0.9999999999999748}}, {{-6.283185307179586, 
    6.283185307179586}, {-6.283185307179586, 
    6.283185307179586}, {-0.9999999999999748, 0.9999999999999748}}],
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.5465014025876758`, -1.1659686702658336`, 1.8989069662775817`},
  ViewVertical->{0., 0., 1.}]], "Output",
 InitializationCell->True,
 CellChangeTimes->{3.623583977119127*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["interactive model", "Section",
 CellChangeTimes->{{3.6235842960883265`*^9, 3.6235843180843267`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"frequency", "*", "x"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{"-", "6.6"}], ",", " ", "6.6"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"frequency", ",", "5", ",", "50"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.6235843584259267`*^9, 3.6235844902303267`*^9}, 
   3.623584596691527*^9, {3.6235846832387266`*^9, 3.623584729976327*^9}, {
   3.6235848909831266`*^9, 3.623584899095127*^9}, {3.6235849383111267`*^9, 
   3.6235849899627266`*^9}, {3.623585037067927*^9, 3.623585041248727*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`frequency$$ = 2.35, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`frequency$$], 1, 5}}, Typeset`size$$ = {
    360., {110., 113.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`frequency$20447$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`frequency$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`frequency$$, $CellContext`frequency$20447$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`frequency$$ $CellContext`x], {$CellContext`x, -6.6, 
         6.6}], "Specifications" :> {{$CellContext`frequency$$, 1, 5}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{411., {155., 162.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6235850044015265`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{767, 873},
WindowMargins->{{Automatic, 393}, {83, Automatic}},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 122, 1, 101, "Title"],
Cell[705, 25, 142, 5, 126, "Subtitle"],
Cell[850, 32, 203, 4, 49, "Text"],
Cell[1056, 38, 141, 2, 31, "Input"],
Cell[CellGroupData[{
Cell[1222, 44, 102, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[1349, 49, 174, 3, 31, "Input"],
Cell[1526, 54, 79, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1642, 60, 163, 5, 31, "Input"],
Cell[1808, 67, 471, 9, 21, "Message"],
Cell[2282, 78, 178, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2497, 89, 96, 2, 31, "Input"],
Cell[2596, 93, 236, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2869, 106, 147, 3, 31, "Input"],
Cell[3019, 111, 100, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3156, 118, 160, 5, 46, "Input"],
Cell[3319, 125, 123, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3479, 133, 247, 8, 33, "Input"],
Cell[3729, 143, 6689, 120, 243, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10467, 269, 104, 1, 70, "Section"],
Cell[10574, 272, 355, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[10954, 283, 120, 2, 31, "Input"],
Cell[11077, 287, 73, 1, 31, "Output"]
}, Open  ]],
Cell[11165, 291, 292, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[11482, 302, 124, 2, 31, "Input"],
Cell[11609, 306, 72, 1, 31, "Output"]
}, Open  ]],
Cell[11696, 310, 340, 9, 31, "Input"],
Cell[CellGroupData[{
Cell[12061, 323, 122, 2, 31, "Input"],
Cell[12186, 327, 73, 1, 31, "Output"]
}, Open  ]],
Cell[12274, 331, 272, 8, 31, "Input"],
Cell[CellGroupData[{
Cell[12571, 343, 279, 9, 33, "Input"],
Cell[12853, 354, 303, 9, 33, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13193, 368, 494, 16, 33, "Input"],
Cell[13690, 386, 9686, 169, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23413, 560, 144, 4, 31, "Input"],
Cell[23560, 566, 9715, 170, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33312, 741, 449, 12, 52, "Input"],
Cell[33764, 755, 9894, 177, 226, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43707, 938, 160, 2, 70, "Section"],
Cell[43870, 942, 195, 4, 31, "Input"],
Cell[CellGroupData[{
Cell[44090, 950, 122, 2, 31, "Input"],
Cell[44215, 954, 86, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44338, 960, 122, 2, 31, "Input"],
Cell[44463, 964, 72, 1, 31, "Output"]
}, Open  ]],
Cell[44550, 968, 127, 3, 31, "Input"],
Cell[44680, 973, 12733, 316, 66, "WolframAlphaShortInput"],
Cell[CellGroupData[{
Cell[57438, 1293, 106, 2, 31, "Input"],
Cell[57547, 1297, 109, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57693, 1304, 226, 7, 33, "Input"],
Cell[57922, 1313, 18585, 315, 244, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76544, 1633, 14310, 353, 66, "WolframAlphaShortInput"],
Cell[90857, 1988, 199, 6, 46, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91093, 1999, 325, 11, 46, "Input"],
Cell[91421, 2012, 11751, 203, 243, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[103221, 2221, 95, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[103341, 2226, 43, 0, 33, "WolframAlphaShort"],
Cell[103387, 2228, 15433, 263, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[118857, 2496, 94931, 1799, 83, "WolframAlphaShortInput"],
Cell[213791, 4297, 16623, 283, 238, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230451, 4585, 38684, 763, 83, "WolframAlphaShortInput"],
Cell[269138, 5350, 183664, 3047, 265, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[452839, 8402, 38531, 759, 83, "WolframAlphaShortInput"],
Cell[491373, 9163, 169570, 2819, 295, "Output",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[660992, 11988, 106, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[661123, 11993, 679, 15, 52, "Code"],
Cell[661805, 12010, 1611, 32, 334, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

